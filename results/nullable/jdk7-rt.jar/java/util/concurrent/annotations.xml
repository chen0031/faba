<root>
  <item name="java.util.concurrent.AbstractExecutorService T invokeAny(java.util.Collection&lt;? extends java.util.concurrent.Callable&lt;T&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V put(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V putIfAbsent(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap V replace(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt; entryAt(java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt;[], int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt; entryForHash(java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt;, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt; segmentAt(java.util.concurrent.ConcurrentHashMap.Segment&lt;K,V&gt;[], int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment V put(K, int, V, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment V remove(java.lang.Object, int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment V replace(K, int, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment java.util.concurrent.ConcurrentHashMap.HashEntry&lt;K,V&gt; scanAndLockForPut(K, int, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E peekFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E peekLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E pollFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque E pollLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue java.util.concurrent.ConcurrentLinkedQueue.Node&lt;E&gt; first()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap K ceilingKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap K floorKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap K higherKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap K lowerKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doGet(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doPut(K, V, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V doRemove(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V put(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V putIfAbsent(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap V replace(K, V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.AbstractMap.SimpleImmutableEntry&lt;K,V&gt; getNear(K, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; ceilingEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; doRemoveFirstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; doRemoveLastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; firstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; floorEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; higherEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; lastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; lowerEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; pollFirstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Map.Entry&lt;K,V&gt; pollLastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findNear(K, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node&lt;K,V&gt; findNode(java.lang.Comparable&lt;? super K&gt;)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet E pollFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet E pollLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Node V getValidValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Node java.util.AbstractMap.SimpleImmutableEntry&lt;K,V&gt; createSnapshot()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K ceilingKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K floorKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K getNearKey(K, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K higherKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap K lowerKey(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap V get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap V remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; ceilingEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; firstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; floorEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; getNearEntry(K, int)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; higherEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; highestEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; lastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; lowerEntry(K)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; lowestEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; pollFirstEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; pollLastEntry()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; removeHighest()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Map.Entry&lt;K,V&gt; removeLowest()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet E pollFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet E pollLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.lang.Object poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Exchanger V exchange(V)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Exchanger V exchange(V, long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory.1.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory.1.1 java.lang.Void run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask&lt;?&gt; pollSubmission()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.lang.Throwable getException()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.lang.Throwable getThrowableException()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinPool getPool()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;?&gt; peekNextLocalTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;?&gt; pollNextLocalTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask&lt;?&gt; pollTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; deqTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; locallyDeqTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; peekTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; pollLocalTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; pollTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread java.util.concurrent.ForkJoinTask&lt;?&gt; popTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E element()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E getFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E getLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E peekFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E peekLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollFirst(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pollLast(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E pop()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E remove()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E removeFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E removeLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E take()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E takeFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E takeLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E unlinkFirst()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque E unlinkLast()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.AbstractItr java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt; succ(java.util.concurrent.LinkedBlockingDeque.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E firstDataItem()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.concurrent.LinkedTransferQueue.Node firstOfMode(boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.concurrent.LinkedTransferQueue.Node tryAppend(java.util.concurrent.LinkedTransferQueue.Node, boolean)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E dequeue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue E take()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.RecursiveAction java.lang.Object getRawResult()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.RecursiveAction java.lang.Void getRawResult()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.lang.Object poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture poll()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture poll(long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture pollExpired()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue E peek()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue java.lang.Object transfer(java.lang.Object, boolean, long)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack java.lang.Object transfer(java.lang.Object, boolean, long)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.lang.Runnable getTask()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
</root>
