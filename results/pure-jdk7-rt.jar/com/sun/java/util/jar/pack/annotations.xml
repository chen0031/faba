<root>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding AdaptiveCoding(int, com.sun.java.util.jar.pack.CodingMethod, com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding boolean isCodableLength(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding boolean isTrivial()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding int decodeK(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding int getKBOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding int getKXOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding int getNextK(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding void setHeadCoding(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding void setHeadLength(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.AdaptiveCoding void setTailCoding(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute Attribute(com.sun.java.util.jar.pack.Attribute)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute boolean isCanonical()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute boolean isDigit(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute byte[] bytes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute.Layout layout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute com.sun.java.util.jar.pack.Attribute.Layout.Element matchCase(com.sun.java.util.jar.pack.Attribute.Layout.Element, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute java.lang.String contextName(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Holder Holder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Holder java.util.List&lt;com.sun.java.util.jar.pack.Attribute&gt; getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout Layout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean equals(com.sun.java.util.jar.pack.Attribute.Layout)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean hasCallables()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout com.sun.java.util.jar.pack.Attribute canonicalInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout int ctype()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout java.lang.String layout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout.Element Element(com.sun.java.util.jar.pack.Attribute.Layout)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout.Element boolean flagTest(byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.Layout.Element boolean hasBand()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream ValueStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream int decodeBCI(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream int encodeBCI(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream int getInt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream java.lang.RuntimeException undef()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream void noteBackCall(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream void putInt(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Attribute.ValueStream void putRef(int, com.sun.java.util.jar.pack.ConstantPool.Entry)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean assertCanChangeLength(com.sun.java.util.jar.pack.BandStructure.Band)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean haveFlagsHi(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean phaseIsRead(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean testBit(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure boolean testBit(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure byte[] realloc(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure byte[] realloc(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.BandStructure.CPRefBand getCPRefOpBand(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.BandStructure.CPRefBand selfOpRefBand(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure com.sun.java.util.jar.pack.Coding codingForIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int getIntTotal(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int getPackageMajver()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int phaseCmp(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int setBit(int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int shortCodeHeader_h_base(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int shortCodeHeader_handler_count(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int shortCodeHeader_max_na_locals(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int shortCodeHeader_max_stack(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int[] realloc(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure int[] realloc(int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure long setBit(long, long, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band boolean isReader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band int phase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band int valuesExpected()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.Band java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteBand int capacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteCounter ByteCounter(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteCounter long getCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ByteCounter void setCount(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.CPRefBand void setIndex(com.sun.java.util.jar.pack.ConstantPool.Index)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand com.sun.java.util.jar.pack.BandStructure.Band get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int bandCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int capacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand int valuesRemainingForDebug()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.MultiBand void setCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand int capacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand int valueAtForDebug(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand int valuesRemainingForDebug()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand void initializeValues(int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.BandStructure.ValueBand void setCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader ClassReader(com.sun.java.util.jar.pack.Package.Class, java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader java.lang.String checkVersion(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader void setAttrCommands(java.util.Map)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader void setAttrDefs(java.util.Map&lt;com.sun.java.util.jar.pack.Attribute.Layout,com.sun.java.util.jar.pack.Attribute&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader.ClassFormatException ClassFormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ClassReader.ClassFormatException ClassFormatException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code Code(com.sun.java.util.jar.pack.Package.Class.Method)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code boolean flagsRequireCode(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Code com.sun.java.util.jar.pack.Package.Class.Method getMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getByte(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getHandlerCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getInt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getMaxStack()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Code int getShort(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Code void setHandlerCount(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Code void setMaxStack(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean canRepresentSigned(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean canRepresentUnsigned(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean hasNegativeCode(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isDelta()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isFullRange()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isNegativeCode(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isSigned()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding boolean isSubrange()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int B()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int H()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int L()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int S()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int bitWidth(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int byteMax(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int byteMin(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int ceil_lg2(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int del()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int getHL()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int max()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int min()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int reduceToSignedRange(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int saturate32(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int umax()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int umin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding int[] makeDeltas(int[], int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding long codeRangeLong(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding long codeRangeLong(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Coding long toUnsigned32(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser int[] getDeltas(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser void reset(int[], int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Choice Choice(com.sun.java.util.jar.pack.Coding, int, int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Choice boolean isExtra()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Choice void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Sizer Sizer()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Sizer Sizer(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Sizer int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.CodingChooser.Sizer void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool ConstantPool()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool boolean isMemberTag(byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool com.sun.java.util.jar.pack.ConstantPool.Index makeIndex(java.lang.String, com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool double percent(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool int skipTo(char, java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.ClassEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry Entry(byte)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry boolean isDoubleWord()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry boolean tagMatches(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry byte getTag()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Entry int superCompareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index Index(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index Index(java.lang.String, com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index com.sun.java.util.jar.pack.ConstantPool.Entry getEntry(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index com.sun.java.util.jar.pack.ConstantPool.Entry[] getMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index java.lang.Object get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index void clearIndex()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Index void setMap(com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.IndexGroup IndexGroup()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.LiteralEntry LiteralEntry(byte)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.MemberEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.NumberEntry java.lang.Comparable literalValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.NumberEntry java.lang.Number numberValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.StringEntry com.sun.java.util.jar.pack.ConstantPool.Entry getRef(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry java.lang.String stringValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Constants Constants()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Driver Driver()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.DriverResource DriverResource()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.DriverResource java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.DriverResource_ja DriverResource_ja()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.DriverResource_ja java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.DriverResource_zh_CN DriverResource_zh_CN()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.DriverResource_zh_CN java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList E remove(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean add(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean addAll(int, java.util.Collection&lt;? extends E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean addAll(java.util.Collection&lt;? extends E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean removeAll(java.util.Collection&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList boolean retainAll(java.util.Collection&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList void add(int, E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.FixedList void clear()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups Fixups()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups Fixups(byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups byte[] getBytes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int descEnd(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int descFmt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int descLoc(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int fetchDesc(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int fmtLen(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int makeDesc(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup Fixup(int, com.sun.java.util.jar.pack.ConstantPool.Entry)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup Fixup(int, int, com.sun.java.util.jar.pack.ConstantPool.Entry)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup com.sun.java.util.jar.pack.ConstantPool.Entry entry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup int format()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Fixup int location()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Itr Itr(com.sun.java.util.jar.pack.Fixups)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Itr int nextDesc()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Fixups.Itr void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram boolean assertWellFormed(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram boolean isSorted(int[], int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram com.sun.java.util.jar.pack.Histogram.BitMetric getBitMetric()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getFrequency(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowFrequency(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowLength(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowValue(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getRowWeight(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getTotalLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int getTotalWeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[] getAllFrequencies()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[] getAllValues()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Histogram int[][] getMatrix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction Instruction(byte[], int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean equals(com.sun.java.util.jar.pack.Instruction)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isBranchOp(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isCPRefOp(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isFieldOp(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isInvokeInitOp(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isLocalSlotOp(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isNonstandard()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isNonstandard(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isSelfLinkerOp(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction boolean isWide()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction byte getCPRefOpTag(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction byte getCPTag()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction byte[] getBytes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction com.sun.java.util.jar.pack.Instruction forceNextPC(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getBC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getBranchLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getByte(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getByteAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getCPIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getConstant()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getInt(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getIntAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getLocalSlot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getNextPC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getPC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getShort(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int getShortAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int opLength(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction int opWideLength(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction void reset(byte[], int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.FormatException FormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.LookupSwitch int getLength(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int alignPC(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.Switch int getAlignedPC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Instruction.TableSwitch int getLength(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.NativeUnpack NativeUnpack(com.sun.java.util.jar.pack.UnpackerImpl)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.NativeUnpack long getUnpackerPtr()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package int getDefaultClassVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package int getPackageVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.util.List&lt;com.sun.java.util.jar.pack.Package.Class&gt; getClasses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.util.List&lt;com.sun.java.util.jar.pack.Package.File&gt; getFiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package java.util.List&lt;com.sun.java.util.jar.pack.Package.InnerClass&gt; getAllInnerClasses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class boolean hasInnerClasses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class com.sun.java.util.jar.pack.ConstantPool.Entry[] getCPMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class com.sun.java.util.jar.pack.Package getPackage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class int getVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.util.List&lt;com.sun.java.util.jar.pack.Package.Class.Field&gt; getFields()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.util.List&lt;com.sun.java.util.jar.pack.Package.Class.Method&gt; getMethods()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class java.util.List&lt;com.sun.java.util.jar.pack.Package.InnerClass&gt; getInnerClasses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class void setCPMap(com.sun.java.util.jar.pack.ConstantPool.Entry[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Field int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member Member(com.sun.java.util.jar.pack.Package.Class, int, com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry getDescriptor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member com.sun.java.util.jar.pack.ConstantPool.Entry[] getCPMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.Class.Member com.sun.java.util.jar.pack.Package.Class thisClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File boolean isClassStub()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File boolean isDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File com.sun.java.util.jar.pack.Package.Class getStubClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Package.File int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader.LimitedBuffer LimitedBuffer(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader.LimitedBuffer long getBytesServed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageReader.LimitedBuffer long skip(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PackageWriter void endCode()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl java.util.SortedMap properties()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack boolean isMetaInfFile(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PackerImpl.DoPack.InFile java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding PopulationCoding()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding com.sun.java.util.jar.pack.Coding getTailCoding(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding int moreCentral(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding int moreCentralSlow(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding void setFavoredCoding(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding void setHistogram(com.sun.java.util.jar.pack.Histogram)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.PopulationCoding void setUnfavoredCoding(com.sun.java.util.jar.pack.CodingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.Object,com.sun.java.util.jar.pack.ConstantPool.LiteralEntry&gt; getLiteralEntries()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.ClassEntry&gt; getClassEntries()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry&gt; getDescriptorEntries()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.MemberEntry&gt; getMemberEntries()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.SignatureEntry&gt; getSignatureEntries()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.Map&lt;java.lang.String,com.sun.java.util.jar.pack.ConstantPool.Utf8Entry&gt; getUtf8Entries()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.TLGlobals java.util.SortedMap&lt;java.lang.Object,java.lang.Object&gt; getPropMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.UnpackerImpl java.util.SortedMap properties()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils Utils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isGZIPMagic(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isJarMagic(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils boolean isPackMagic(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils java.lang.String getJarEntryName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils.NonCloser NonCloser(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.util.jar.pack.Utils.Pack200Logger Pack200Logger(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
