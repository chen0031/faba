<root>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel float getBrightness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel float getHue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel float getSaturation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel javax.swing.Icon getLargeDisplayIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel javax.swing.Icon getSmallDisplayIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle boolean isSet(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle boolean isWheelFocused()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle com.sun.java.swing.plaf.gtk.GTKColorChooserPanel getGTKColorChooserPanel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle int getColorX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle int getColorY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle int getIndicatorSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle int getTriangleCircumscribedRadius()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle int getWheelRadius()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle int getWheelWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle int getWheelXOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle int getWheelYOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.ColorTriangle void setFlag(int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorChooserPanel.OpaqueLabel boolean isOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorType float hlsValue(float, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKColorType int hlsToRGB(float, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKConstants.ArrowType ArrowType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKConstants.ExpanderStyle ExpanderStyle(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKConstants.IconSize IconSize(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKConstants.Orientation Orientation(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKConstants.PositionType PositionType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKConstants.ShadowType ShadowType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKConstants.StateType StateType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKConstants.TextDirection TextDirection(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKEngine GTKEngine()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKEngine.Settings Settings(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKEngine.WidgetType WidgetType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI java.awt.Dimension getMinimumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI java.awt.event.MouseListener createDoubleClickListener(javax.swing.JFileChooser, javax.swing.JList)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI javax.swing.Action getApproveSelectionAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI javax.swing.JPanel getAccessoryPanel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI javax.swing.event.ListSelectionListener createListSelectionListener(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI javax.swing.filechooser.FileView getFileView(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI javax.swing.plaf.basic.BasicDirectoryModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI void ensureFileIsVisible(javax.swing.JFileChooser, java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI.DirectoryComboBoxModel java.lang.Object getSelectedItem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI.DoubleClickListener DoubleClickListener(com.sun.java.swing.plaf.gtk.GTKFileChooserUI, javax.swing.JList)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI.FilterComboBoxModel int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI.GTKFCPropertyChangeListener GTKFCPropertyChangeListener(com.sun.java.swing.plaf.gtk.GTKFileChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI.GTKFileView javax.swing.Icon getCachedIcon(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI.GTKFileView void cacheIcon(java.io.File, javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI.GTKFileView void clearIconCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKFileChooserUI.SelectionListener SelectionListener(com.sun.java.swing.plaf.gtk.GTKFileChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKGraphicsUtils GTKGraphicsUtils()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKGraphicsUtils boolean shouldShadowText(javax.swing.plaf.synth.Region, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory GTKIconFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory.DelegatingIcon DelegatingIcon(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory.DelegatingIcon java.lang.Class[] getMethodParamTypes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory.DelegatingIcon void resetIconDimensions()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory.MenuArrowIcon MenuArrowIcon()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory.MenuArrowIcon java.lang.Class[] getMethodParamTypes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory.SynthExpanderIcon SynthExpanderIcon(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory.ToolBarHandleIcon ToolBarHandleIcon()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKIconFactory.ToolBarHandleIcon java.lang.Class[] getMethodParamTypes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel boolean is2_2()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel boolean isNativeLookAndFeel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel boolean isText(javax.swing.plaf.synth.Region)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel boolean shouldUpdateStyleOnAncestorChanged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel com.sun.java.swing.plaf.gtk.GTKConstants.StateType synthStateToGTKStateType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel int synthStateToGTKState(javax.swing.plaf.synth.Region, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel java.lang.String getDescription()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel java.lang.String getGtkThemeName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel java.lang.String getID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel javax.swing.LayoutStyle getLayoutStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel.1FontLazyValue 1FontLazyValue(com.sun.java.swing.plaf.gtk.GTKLookAndFeel, javax.swing.plaf.synth.Region)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel.GnomeLayoutStyle GnomeLayoutStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel.GnomeLayoutStyle int getContainerGap(javax.swing.JComponent, int, java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel.WeakPCL WeakPCL(com.sun.java.swing.plaf.gtk.GTKLookAndFeel, java.awt.Toolkit, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKLookAndFeel.WeakPCL java.lang.String getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter GTKPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter void paintSpinnerBackground(javax.swing.plaf.synth.SynthContext, java.awt.Graphics, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter.ListTableFocusBorder ListTableFocusBorder(boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter.ListTableFocusBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter.ListTableFocusBorder com.sun.java.swing.plaf.gtk.GTKPainter.ListTableFocusBorder getNoFocusCellBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter.ListTableFocusBorder com.sun.java.swing.plaf.gtk.GTKPainter.ListTableFocusBorder getSelectedCellBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter.ListTableFocusBorder com.sun.java.swing.plaf.gtk.GTKPainter.ListTableFocusBorder getUnselectedCellBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter.TitledBorder TitledBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKPainter.TitledBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle int getXThickness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle int getYThickness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle java.awt.Font getFontForState(javax.swing.plaf.synth.SynthContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle java.awt.Insets getSimpleInsets(javax.swing.plaf.synth.SynthContext, java.awt.Insets, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle javax.swing.plaf.synth.SynthGraphicsUtils getGraphicsUtils(javax.swing.plaf.synth.SynthContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle javax.swing.plaf.synth.SynthPainter getPainter(javax.swing.plaf.synth.SynthContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle.GTKLazyValue GTKLazyValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle.GTKLazyValue GTKLazyValue(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle.GTKStockIcon GTKStockIcon(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyle.GTKStockIconInfo GTKStockIconInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.GTKStyleFactory.ComplexKey ComplexKey(com.sun.java.swing.plaf.gtk.GTKEngine.WidgetType, java.lang.Object...)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity java.awt.LayoutManager getTitlePaneLayout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity java.util.Map getFrameGeometry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.ArithmeticExpressionEvaluator ArithmeticExpressionEvaluator(com.sun.java.swing.plaf.gtk.Metacity)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.ColorizeImageFilter ColorizeImageFilter(com.sun.java.swing.plaf.gtk.Metacity)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.ColorizeImageFilter int filterRGB(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.PeekableStringTokenizer boolean hasMoreTokens()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.Privileged Privileged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape RoundRectClipShape()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape boolean contains(double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape boolean contains(double, double, double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape boolean intersects(double, double, double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape double getArcHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape double getArcWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape double getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape double getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape double getX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape double getY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape int classify(double, double, double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape int getCornerFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape java.awt.geom.Rectangle2D getBounds2D()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape void setFrame(double, double, double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape void setRoundedRect(int, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape.RoundishRectIterator boolean isDone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape.RoundishRectIterator int getWindingRule()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.RoundRectClipShape.RoundishRectIterator void next()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.TitlePaneLayout TitlePaneLayout(com.sun.java.swing.plaf.gtk.Metacity)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.TitlePaneLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.Metacity.TitlePaneLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.PangoFonts PangoFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.XColors XColors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.XColors.XColor XColor(java.lang.String, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.java.swing.plaf.gtk.XColors.XColor int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
