<root>
  <item name="com.sun.corba.se.impl.protocol.AddressingDispositionException AddressingDispositionException(short)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.AddressingDispositionException short expectedAddrDisp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.BootstrapServerRequestDispatcher com.sun.corba.se.spi.ior.IOR locate(com.sun.corba.se.spi.ior.ObjectKey)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaClientDelegateImpl com.sun.corba.se.pept.broker.Broker getBroker()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaClientDelegateImpl com.sun.corba.se.pept.transport.ContactInfoList getContactInfoList()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaClientDelegateImpl org.omg.CORBA.ORB orb(org.omg.CORBA.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaClientDelegateImpl org.omg.CORBA.Object duplicate(org.omg.CORBA.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaClientDelegateImpl void release(org.omg.CORBA.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo CorbaInvocationInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo CorbaInvocationInfo(com.sun.corba.se.spi.orb.ORB)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo boolean isRetryInvocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo com.sun.corba.se.pept.protocol.ClientRequestDispatcher getClientRequestDispatcher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo com.sun.corba.se.pept.protocol.MessageMediator getMessageMediator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo int getEntryCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo java.util.Iterator getContactInfoListIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo void decrementEntryCount()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo void incrementEntryCount()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo void setClientRequestDispatcher(com.sun.corba.se.pept.protocol.ClientRequestDispatcher)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo void setContactInfoListIterator(java.util.Iterator)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo void setIsRetryInvocation(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaInvocationInfo void setMessageMediator(com.sun.corba.se.pept.protocol.MessageMediator)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl boolean executePIInResponseConstructor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl boolean executeRemoveThreadInfoInResponseConstructor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl boolean executeReturnServantInResponseConstructor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl boolean isDIIRequest()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl boolean transportDebug()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.impl.protocol.giopmsgheaders.LocateReplyMessage getLocateReplyHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.impl.protocol.giopmsgheaders.Message getDispatchHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.impl.protocol.giopmsgheaders.ReplyMessage getReplyHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.impl.protocol.giopmsgheaders.RequestMessage getRequestHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.pept.broker.Broker getBroker()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.pept.encoding.InputObject getInputObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.pept.encoding.OutputObject getOutputObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.pept.transport.Connection getConnection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.pept.transport.ContactInfo getContactInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl com.sun.corba.se.spi.protocol.CorbaProtocolHandler getProtocolHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl java.nio.ByteBuffer getDispatchBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl short getAddrDisposition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setDIIInfo(org.omg.CORBA.Request)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setDispatchBuffer(java.nio.ByteBuffer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setDispatchHeader(com.sun.corba.se.impl.protocol.giopmsgheaders.Message)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setExecutePIInResponseConstructor(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setExecuteRemoveThreadInfoInResponseConstructor(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setExecuteReturnServantInResponseConstructor(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setInputObject(com.sun.corba.se.pept.encoding.InputObject)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setOutputObject(com.sun.corba.se.pept.encoding.OutputObject)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl void setReplyExceptionDetailMessage(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.GetInterface GetInterface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.GetInterface boolean isNonExistentMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.GetInterface java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.IsA IsA()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.IsA boolean isNonExistentMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.IsA java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.JIDLLocalCRDImpl void servant_postinvoke(org.omg.CORBA.Object, org.omg.CORBA.portable.ServantObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.JIDLLocalCRDImpl void unexport()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.LocalClientRequestDispatcherBase boolean is_local(org.omg.CORBA.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.LocalClientRequestDispatcherBase byte[] getObjectId()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.MinimalServantCacheLocalCRDImpl void servant_postinvoke(org.omg.CORBA.Object, org.omg.CORBA.portable.ServantObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NonExistent NonExistent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NonExistent boolean isNonExistentMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NonExistent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NotExistent NotExistent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NotExistent java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NotLocalLocalCRDImpl NotLocalLocalCRDImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NotLocalLocalCRDImpl boolean is_local(org.omg.CORBA.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NotLocalLocalCRDImpl boolean useLocalInvocation(org.omg.CORBA.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NotLocalLocalCRDImpl org.omg.CORBA.portable.ServantObject servant_preinvoke(org.omg.CORBA.Object, java.lang.String, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.NotLocalLocalCRDImpl void servant_postinvoke(org.omg.CORBA.Object, org.omg.CORBA.portable.ServantObject)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.RequestCanceledException RequestCanceledException(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.protocol.RequestCanceledException int getRequestId()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.RequestDispatcherRegistryImpl java.util.Set getObjectAdapterFactories()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.protocol.SpecialMethod SpecialMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
