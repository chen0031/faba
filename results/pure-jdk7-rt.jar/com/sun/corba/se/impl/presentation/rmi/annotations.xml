<root>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl java.lang.reflect.Method getMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicMethodMarshallerImpl.ReaderWriterBase ReaderWriterBase(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicStubImpl DynamicStubImpl(java.lang.String[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicStubImpl com.sun.corba.se.spi.presentation.rmi.DynamicStub getSelf()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicStubImpl java.lang.String[] _ids()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.DynamicStubImpl void setSelf(com.sun.corba.se.spi.presentation.rmi.DynamicStub)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWBase ExceptionRWBase(com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWBase java.lang.Class getExceptionClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWBase java.lang.String getId()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ExceptionHandlerImpl.ExceptionRWBase void setId(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean hasLeadingUnderscore(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isIDLAlphabeticChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isIDLDecimalDigit(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isIDLIdentifierChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl boolean isUnderscore(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.Class[] getInterfaces()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl java.lang.reflect.Method[] getMethods()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLNameTranslatorImpl.IDLMethodInfo IDLMethodInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType IDLType(java.lang.Class, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType IDLType(java.lang.Class, java.lang.String[], java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType boolean hasModule()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType java.lang.Class getJavaClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType java.lang.String getMemberName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLType java.lang.String[] getModules()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypeException IDLTypeException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypeException IDLTypeException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil IDLTypesUtil()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean isRemoteExceptionOrSuperClass(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil boolean readHasCorrespondingIsProperty(java.lang.reflect.Method, java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil com.sun.corba.se.impl.presentation.rmi.IDLType getSpecialCaseIDLTypeMapping(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.InvocationHandlerFactoryImpl java.lang.Class[] getProxyInterfaces()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.InvocationHandlerFactoryImpl.CustomCompositeInvocationHandlerImpl java.lang.Object writeReplace()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl boolean useDynamicStubs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactoryFactory getStubFactoryFactory(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl void setStubFactoryFactory(boolean, com.sun.corba.se.spi.presentation.rmi.PresentationManager.StubFactoryFactory)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl com.sun.corba.se.spi.orbutil.proxy.InvocationHandlerFactory getInvocationHandlerFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl com.sun.corba.se.spi.presentation.rmi.IDLNameTranslator getIDLNameTranslator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl java.lang.Class getMyClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl java.lang.String[] getTypeIds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.ClassDataImpl java.util.Map getDictionary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl NodeImpl(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.PresentationManagerImpl.NodeImpl java.lang.Class getInterface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.ReflectiveTie java.rmi.Remote getTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubConnectImpl StubConnectImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryBase StubFactoryBase(com.sun.corba.se.spi.presentation.rmi.PresentationManager.ClassData)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryBase StubFactoryFactoryBase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryDynamicBase boolean createsDynamicStubs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryFactoryStaticImpl boolean createsDynamicStubs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubFactoryStaticImpl StubFactoryStaticImpl(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubInvocationHandlerImpl java.lang.reflect.Proxy getProxy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.corba.se.impl.presentation.rmi.StubInvocationHandlerImpl void setProxy(java.lang.reflect.Proxy)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
