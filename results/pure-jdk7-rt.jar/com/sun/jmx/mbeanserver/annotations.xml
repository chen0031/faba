<root>
  <item name="com.sun.jmx.mbeanserver.ClassLoaderRepositorySupport.LoaderEntry LoaderEntry(javax.management.ObjectName, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.ConvertingMethod java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.ConvertingMethod java.lang.reflect.Method getMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.ConvertingMethod javax.management.openmbean.OpenType&lt;?&gt; getOpenReturnType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.ConvertingMethod javax.management.openmbean.OpenType&lt;?&gt;[] getOpenParameterTypes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory DefaultMXBeanMappingFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilder CompositeBuilder(java.lang.Class&lt;?&gt;, java.lang.String[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilder java.lang.Class&lt;?&gt; getTargetClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilder java.lang.String[] getItemNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilder java.lang.Throwable possibleCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilderCheckGetters CompositeBuilderCheckGetters(java.lang.Class&lt;?&gt;, java.lang.String[], com.sun.jmx.mbeanserver.MXBeanMapping[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilderCheckGetters java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData, java.lang.String[], com.sun.jmx.mbeanserver.MXBeanMapping[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilderCheckGetters java.lang.Throwable possibleCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilderViaConstructor CompositeBuilderViaConstructor(java.lang.Class&lt;?&gt;, java.lang.String[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilderViaConstructor.Constr Constr(java.lang.reflect.Constructor&lt;?&gt;, int[], java.util.BitSet)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilderViaFrom CompositeBuilderViaFrom(java.lang.Class&lt;?&gt;, java.lang.String[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilderViaProxy CompositeBuilderViaProxy(java.lang.Class&lt;?&gt;, java.lang.String[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.CompositeBuilderViaSetters CompositeBuilderViaSetters(java.lang.Class&lt;?&gt;, java.lang.String[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.EnumMapping java.lang.Object toNonNullOpenValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.IdentityMapping boolean isIdentity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.IdentityMapping java.lang.Object fromNonNullOpenValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.IdentityMapping java.lang.Object toNonNullOpenValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.NonNullMXBeanMapping boolean isIdentity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DescriptorCache com.sun.jmx.mbeanserver.DescriptorCache getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.DescriptorCache com.sun.jmx.mbeanserver.DescriptorCache getInstance(javax.management.JMX)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.GetPropertyAction GetPropertyAction(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.Introspector Introspector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Introspector.BeansHelper BeansHelper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Introspector.BeansHelper boolean isAvailable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Introspector.SimpleIntrospector SimpleIntrospector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.JmxMBeanServer boolean interceptorsEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.JmxMBeanServer com.sun.jmx.mbeanserver.MBeanInstantiator getMBeanInstantiator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.JmxMBeanServer javax.management.MBeanServer getMBeanServerInterceptor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.JmxMBeanServer javax.management.MBeanServerDelegate getMBeanServerDelegate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.JmxMBeanServer void setMBeanServerInterceptor(javax.management.MBeanServer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.JmxMBeanServerBuilder JmxMBeanServerBuilder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanAnalyzer.AttrMethods AttrMethods()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanAnalyzer.MethodOrder MethodOrder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanInstantiator MBeanInstantiator(com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanIntrospector MBeanIntrospector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanIntrospector.MBeanInfoMaker MBeanInfoMaker(com.sun.jmx.mbeanserver.MBeanIntrospector)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanServerDelegateImpl javax.management.MBeanInfo getMBeanInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanServerDelegateImpl javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanServerDelegateImpl void postDeregister()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanServerDelegateImpl void postRegister(java.lang.Boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanServerDelegateImpl void preDeregister()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanSupport java.lang.Class&lt;?&gt; getMBeanInterface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanSupport java.lang.Object getResource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MBeanSupport javax.management.MBeanInfo getMBeanInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanIntrospector boolean isMXBean()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanIntrospector com.sun.jmx.mbeanserver.MBeanIntrospector.MBeanInfoMap getMBeanInfoMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanIntrospector com.sun.jmx.mbeanserver.MBeanIntrospector.PerInterfaceMap&lt;com.sun.jmx.mbeanserver.ConvertingMethod&gt; getPerInterfaceMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanIntrospector com.sun.jmx.mbeanserver.MXBeanIntrospector getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanIntrospector java.lang.String getName(com.sun.jmx.mbeanserver.ConvertingMethod)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanIntrospector javax.management.Descriptor getMBeanDescriptor(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanMapping java.lang.Class&lt;?&gt; getOpenClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanMapping java.lang.reflect.Type getJavaType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanMapping javax.management.openmbean.OpenType&lt;?&gt; getOpenType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanMapping void checkReconstructible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanMappingFactory MXBeanMappingFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanProxy.GetHandler GetHandler(java.lang.String, com.sun.jmx.mbeanserver.ConvertingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanProxy.Handler Handler(java.lang.String, com.sun.jmx.mbeanserver.ConvertingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanProxy.Handler com.sun.jmx.mbeanserver.ConvertingMethod getConvertingMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanProxy.Handler java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanProxy.InvokeHandler InvokeHandler(java.lang.String, java.lang.String[], com.sun.jmx.mbeanserver.ConvertingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanProxy.SetHandler SetHandler(java.lang.String, com.sun.jmx.mbeanserver.ConvertingMethod)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanProxy.Visitor Visitor(com.sun.jmx.mbeanserver.MXBeanProxy)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanSupport com.sun.jmx.mbeanserver.MBeanIntrospector&lt;com.sun.jmx.mbeanserver.ConvertingMethod&gt; getMBeanIntrospector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.MXBeanSupport java.lang.Object getCookie()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.NamedObject javax.management.DynamicMBean getObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.NamedObject javax.management.ObjectName getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.PerInterface java.lang.Class&lt;?&gt; getMBeanInterface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.PerInterface javax.management.MBeanInfo getMBeanInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.PerInterface.InitMaps InitMaps(com.sun.jmx.mbeanserver.PerInterface)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.PerInterface.MethodAndSig MethodAndSig(com.sun.jmx.mbeanserver.PerInterface)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.Repository java.lang.Integer getCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Repository java.lang.String getDefaultDomain()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.SecureClassLoaderRepository SecureClassLoaderRepository(javax.management.loading.ClassLoaderRepository)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector StandardMBeanIntrospector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector boolean isMXBean()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector com.sun.jmx.mbeanserver.MBeanIntrospector.MBeanInfoMap getMBeanInfoMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector com.sun.jmx.mbeanserver.MBeanIntrospector.PerInterfaceMap&lt;java.lang.reflect.Method&gt; getPerInterfaceMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector com.sun.jmx.mbeanserver.StandardMBeanIntrospector getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector java.lang.String getName(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector java.lang.reflect.Method mFrom(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector javax.management.Descriptor getBasicMBeanDescriptor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanIntrospector void checkMethod(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanSupport com.sun.jmx.mbeanserver.MBeanIntrospector&lt;java.lang.reflect.Method&gt; getMBeanIntrospector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanSupport java.lang.Object getCookie()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanSupport void register(javax.management.MBeanServer, javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.StandardMBeanSupport void unregister()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Util T cast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Util Util()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Util java.util.IdentityHashMap&lt;K,V&gt; newIdentityHashMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Util java.util.List&lt;E&gt; newList()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Util java.util.Map&lt;K,V&gt; newSynchronizedIdentityHashMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Util java.util.SortedMap&lt;K,V&gt; newSortedMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.Util java.util.SortedMap&lt;K,V&gt; newSortedMap(java.util.Comparator&lt;? super K&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.jmx.mbeanserver.WeakIdentityHashMap.IdentityWeakReference int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
