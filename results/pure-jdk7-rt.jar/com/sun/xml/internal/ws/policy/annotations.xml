<root>
  <item name="com.sun.xml.internal.ws.policy.AssertionSet com.sun.xml.internal.ws.policy.AssertionSet emptyAssertionSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.AssertionSet java.util.Collection&lt;com.sun.xml.internal.ws.policy.PolicyAssertion&gt; getAssertions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.AssertionSet java.util.Collection&lt;javax.xml.namespace.QName&gt; getVocabulary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.ComplexAssertion boolean hasNestedPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.ComplexAssertion com.sun.xml.internal.ws.policy.NestedPolicy getNestedPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.EffectiveAlternativeSelector EffectiveAlternativeSelector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.EffectiveAlternativeSelector.AlternativeFitness AlternativeFitness(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.EffectivePolicyModifier EffectivePolicyModifier()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.EffectivePolicyModifier com.sun.xml.internal.ws.policy.EffectivePolicyModifier createEffectivePolicyModifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy Policy(com.sun.xml.internal.ws.policy.sourcemodel.wspolicy.NamespaceVersion, java.lang.String, java.lang.String, java.util.List&lt;com.sun.xml.internal.ws.policy.AssertionSet&gt;, java.util.Set&lt;javax.xml.namespace.QName&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy Policy(java.lang.String, java.lang.String, java.util.List&lt;com.sun.xml.internal.ws.policy.AssertionSet&gt;, java.util.Set&lt;javax.xml.namespace.QName&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy com.sun.xml.internal.ws.policy.Policy createEmptyPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy com.sun.xml.internal.ws.policy.Policy createEmptyPolicy(com.sun.xml.internal.ws.policy.sourcemodel.wspolicy.NamespaceVersion, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy com.sun.xml.internal.ws.policy.Policy createEmptyPolicy(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy com.sun.xml.internal.ws.policy.Policy createNullPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy com.sun.xml.internal.ws.policy.Policy createNullPolicy(com.sun.xml.internal.ws.policy.sourcemodel.wspolicy.NamespaceVersion, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy com.sun.xml.internal.ws.policy.Policy createNullPolicy(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy com.sun.xml.internal.ws.policy.sourcemodel.wspolicy.NamespaceVersion getNamespaceVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy java.lang.String getId()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy java.lang.String getIdOrName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy java.util.Collection&lt;com.sun.xml.internal.ws.policy.AssertionSet&gt; getContent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.Policy java.util.Collection&lt;javax.xml.namespace.QName&gt; getVocabulary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyAssertion boolean isIgnorable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyAssertion boolean isOptional()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyAssertion boolean isParameter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyAssertion com.sun.xml.internal.ws.policy.NestedPolicy getNestedPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyAssertion java.lang.String getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyAssertion javax.xml.namespace.QName getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyConstants PolicyConstants()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyException PolicyException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyException PolicyException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyIntersector PolicyIntersector(com.sun.xml.internal.ws.policy.PolicyIntersector.CompatibilityMode)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyIntersector com.sun.xml.internal.ws.policy.PolicyIntersector createLaxPolicyIntersector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyIntersector com.sun.xml.internal.ws.policy.PolicyIntersector createStrictPolicyIntersector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyIntersector.CompatibilityMode CompatibilityMode(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMap.ScopeType ScopeType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapExtender PolicyMapExtender()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapExtender com.sun.xml.internal.ws.policy.PolicyMapExtender createPolicyMapExtender()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapKey PolicyMapKey(com.sun.xml.internal.ws.policy.PolicyMapKey)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapKey javax.xml.namespace.QName getFaultMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapKey javax.xml.namespace.QName getOperation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapKey javax.xml.namespace.QName getPort()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapKey javax.xml.namespace.QName getService()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapMutator PolicyMapMutator()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapMutator boolean isConnected()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapMutator com.sun.xml.internal.ws.policy.PolicyMap getMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapMutator void disconnect()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMapUtil PolicyMapUtil()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMerger PolicyMerger()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyMerger com.sun.xml.internal.ws.policy.PolicyMerger getMerger()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicyScope java.util.Collection&lt;com.sun.xml.internal.ws.policy.PolicySubject&gt; getPolicySubjects()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.PolicySubject java.lang.Object getSubject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.SimpleAssertion boolean hasNestedPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.xml.internal.ws.policy.SimpleAssertion com.sun.xml.internal.ws.policy.NestedPolicy getNestedPolicy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
