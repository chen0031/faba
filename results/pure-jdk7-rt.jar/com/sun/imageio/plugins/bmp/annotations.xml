<root>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader BMPImageReader(javax.imageio.spi.ImageReaderSpi)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader boolean canReadRaster()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader javax.imageio.ImageReadParam getDefaultReadParam()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader javax.imageio.metadata.IIOMetadata getStreamMetadata()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader void resetHeaderInfo()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter EmbeddedProgressAdapter(com.sun.imageio.plugins.bmp.BMPImageReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void imageComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void imageProgress(javax.imageio.ImageReader, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void imageStarted(javax.imageio.ImageReader, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void readAborted(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void sequenceComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void sequenceStarted(javax.imageio.ImageReader, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void thumbnailComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void thumbnailProgress(javax.imageio.ImageReader, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader.EmbeddedProgressAdapter void thumbnailStarted(javax.imageio.ImageReader, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReaderSpi java.lang.String getDescription(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReaderSpi javax.imageio.ImageReader createReaderInstance(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReaderSpi void onRegistration(javax.imageio.spi.ServiceRegistry, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter BMPImageWriter(javax.imageio.spi.ImageWriterSpi)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter boolean canWriteRasters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter boolean isEven(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter int firstLowBit(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter int getCompressionType(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter int roundBpp(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void incCompImageSize(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter.IIOWriteProgressAdapter IIOWriteProgressAdapter(com.sun.imageio.plugins.bmp.BMPImageWriter)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter.IIOWriteProgressAdapter void imageComplete(javax.imageio.ImageWriter)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter.IIOWriteProgressAdapter void imageProgress(javax.imageio.ImageWriter, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter.IIOWriteProgressAdapter void imageStarted(javax.imageio.ImageWriter, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter.IIOWriteProgressAdapter void thumbnailComplete(javax.imageio.ImageWriter)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter.IIOWriteProgressAdapter void thumbnailProgress(javax.imageio.ImageWriter, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter.IIOWriteProgressAdapter void thumbnailStarted(javax.imageio.ImageWriter, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter.IIOWriteProgressAdapter void writeAborted(javax.imageio.ImageWriter)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriterSpi java.lang.String getDescription(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriterSpi javax.imageio.ImageWriter createWriterInstance(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriterSpi void onRegistration(javax.imageio.spi.ServiceRegistry, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadata boolean isReadOnly()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadataFormat boolean canNodeAppear(java.lang.String, javax.imageio.ImageTypeSpecifier)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadataFormatResources BMPMetadataFormatResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadataFormatResources java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
