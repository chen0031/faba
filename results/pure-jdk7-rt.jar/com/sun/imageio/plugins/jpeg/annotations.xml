<root>
  <item name="com.sun.imageio.plugins.jpeg.AdobeMarkerSegment AdobeMarkerSegment(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DHTMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DQTMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.DRIMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.ImageTypeIterator ImageTypeIterator(java.util.Iterator&lt;com.sun.imageio.plugins.jpeg.ImageTypeProducer&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.ImageTypeProducer ImageTypeProducer()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.ImageTypeProducer ImageTypeProducer(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment JFIFMarkerSegment()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.IllegalThumbException IllegalThumbException(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb JFIFThumb(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener ThumbnailReadListener(com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG, com.sun.imageio.plugins.jpeg.JPEGImageReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void imageComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void imageStarted(javax.imageio.ImageReader, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void readAborted(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void sequenceComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void sequenceStarted(javax.imageio.ImageReader, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailComplete(javax.imageio.ImageReader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailProgress(javax.imageio.ImageReader, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG.ThumbnailReadListener void thumbnailStarted(javax.imageio.ImageReader, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG JPEG()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG float convertToLinearQuality(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG javax.imageio.plugins.jpeg.JPEGHuffmanTable[] getDefaultHuffmanTables(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG javax.imageio.plugins.jpeg.JPEGQTable[] getDefaultQTables()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEG.JCS JCS()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGBuffer JPEGBuffer(javax.imageio.stream.ImageInputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageMetadataFormatResources JPEGImageMetadataFormatResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader boolean canReadRaster()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader boolean readerSupportsThumbnails()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader javax.imageio.ImageReadParam getDefaultReadParam()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader void initProgressData()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock CallBackLock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock void check()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock void lock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock void unlock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.CallBackLock.State State(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReader.JPEGReaderDisposerRecord JPEGReaderDisposerRecord(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderResources JPEGImageReaderResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderResources java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi java.lang.String getDescription(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter boolean canWriteRasters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter boolean isSubsampled(com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.ImageWriteParam getDefaultWriteParam()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter void checkSOFBands(com.sun.imageio.plugins.jpeg.SOFMarkerSegment, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock CallBackLock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock void check()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock void lock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock void unlock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.CallBackLock.State State(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriter.JPEGWriterDisposerRecord JPEGWriterDisposerRecord(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterResources JPEGImageWriterResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterResources java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi boolean isFormatLossless()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi java.lang.String getDescription(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata boolean isReadOnly()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardCompressionNode(org.w3c.dom.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardDataNode(org.w3c.dom.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void mergeStandardDocumentNode(org.w3c.dom.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadata void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGMetadataFormatResources JPEGMetadataFormatResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.JPEGStreamMetadataFormatResources JPEGStreamMetadataFormatResources()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.MarkerSegment MarkerSegment(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec getComponentSpec(byte, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment int getIDencodedCSType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec ComponentSpec(com.sun.imageio.plugins.jpeg.SOFMarkerSegment, byte, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec ComponentSpec(com.sun.imageio.plugins.jpeg.SOFMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec getScanComponentSpec(byte, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment void write(javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec ScanComponentSpec(com.sun.imageio.plugins.jpeg.SOSMarkerSegment, byte, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec ScanComponentSpec(com.sun.imageio.plugins.jpeg.SOSMarkerSegment, com.sun.imageio.plugins.jpeg.JPEGBuffer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
