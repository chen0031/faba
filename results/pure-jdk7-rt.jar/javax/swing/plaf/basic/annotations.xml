<root>
  <item name="javax.swing.plaf.basic.BasicArrowButton boolean isFocusTraversable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicArrowButton int getDirection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicArrowButton java.awt.Dimension getMaximumSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicArrowButton java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicArrowButton java.awt.Dimension getPreferredSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicArrowButton void setDirection(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders BasicBorders()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.ButtonBorder ButtonBorder(java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.FieldBorder FieldBorder(java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.MarginBorder MarginBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.MenuBarBorder MenuBarBorder(java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.RadioButtonBorder RadioButtonBorder(java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.RolloverButtonBorder RolloverButtonBorder(java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.RolloverMarginBorder RolloverMarginBorder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.SplitPaneBorder SplitPaneBorder(java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.SplitPaneBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.SplitPaneBorder java.awt.Insets getBorderInsets(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.SplitPaneDividerBorder SplitPaneDividerBorder(java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.SplitPaneDividerBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicBorders.ToggleButtonBorder ToggleButtonBorder(java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonListener BasicButtonListener(javax.swing.AbstractButton)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonListener void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonListener void mouseDragged(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonListener void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonListener.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI BasicButtonUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI int getDefaultTextIconGap(javax.swing.AbstractButton)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI int getTextShiftOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI javax.swing.plaf.basic.BasicButtonListener createButtonListener(javax.swing.AbstractButton)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI void clearTextShiftOffset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI void paintButtonPressed(java.awt.Graphics, javax.swing.AbstractButton)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI void paintFocus(java.awt.Graphics, javax.swing.AbstractButton, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicButtonUI void setTextShiftOffset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicCheckBoxMenuItemUI BasicCheckBoxMenuItemUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicCheckBoxMenuItemUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicCheckBoxMenuItemUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicCheckBoxUI BasicCheckBoxUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicCheckBoxUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI BasicColorChooserUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI javax.swing.plaf.basic.BasicColorChooserUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI.ColorTransferHandler ColorTransferHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI.Handler Handler(javax.swing.plaf.basic.BasicColorChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI.Handler void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI.Handler void mouseReleased(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicColorChooserUI.PropertyHandler PropertyHandler(javax.swing.plaf.basic.BasicColorChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxEditor java.awt.Component getEditorComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxEditor void focusGained(java.awt.event.FocusEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxEditor void focusLost(java.awt.event.FocusEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxRenderer javax.swing.border.Border getNoFocusBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI boolean isNavigationKey(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI boolean isTableCellEditor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI java.awt.LayoutManager createLayoutManager()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI java.awt.event.FocusListener createFocusListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI java.awt.event.ItemListener createItemListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI java.awt.event.KeyListener createKeyListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI javax.swing.event.ListDataListener createListDataListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI javax.swing.plaf.basic.BasicComboBoxUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.ComboBoxLayoutManager ComboBoxLayoutManager(javax.swing.plaf.basic.BasicComboBoxUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.ComboBoxLayoutManager void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.ComboBoxLayoutManager void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.DefaultKeySelectionManager DefaultKeySelectionManager(javax.swing.plaf.basic.BasicComboBoxUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.FocusHandler FocusHandler(javax.swing.plaf.basic.BasicComboBoxUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.Handler Handler(javax.swing.plaf.basic.BasicComboBoxUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.Handler void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.Handler void keyReleased(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.Handler void keyTyped(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.Handler void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.ItemHandler ItemHandler(javax.swing.plaf.basic.BasicComboBoxUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.ItemHandler void itemStateChanged(java.awt.event.ItemEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.KeyHandler KeyHandler(javax.swing.plaf.basic.BasicComboBoxUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.ListDataHandler ListDataHandler(javax.swing.plaf.basic.BasicComboBoxUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboBoxUI.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicComboBoxUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup boolean isFocusTraversable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup java.awt.event.ItemListener createItemListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup java.awt.event.KeyListener createKeyListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup java.awt.event.MouseListener createListMouseListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup java.awt.event.MouseListener createMouseListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup java.awt.event.MouseMotionListener createListMouseMotionListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup java.awt.event.MouseMotionListener createMouseMotionListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup javax.swing.JList getList()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup javax.swing.event.ListDataListener createListDataListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup javax.swing.event.ListSelectionListener createListSelectionListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup javax.swing.plaf.basic.BasicComboPopup.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup void installKeyboardActions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup void uninstallKeyboardActions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.AutoScrollActionHandler AutoScrollActionHandler(javax.swing.plaf.basic.BasicComboPopup, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.EmptyListModelClass EmptyListModelClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.EmptyListModelClass int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.EmptyListModelClass java.lang.Object getElementAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.EmptyListModelClass void addListDataListener(javax.swing.event.ListDataListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.EmptyListModelClass void removeListDataListener(javax.swing.event.ListDataListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.Handler Handler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.Handler void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.InvocationKeyHandler InvocationKeyHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.InvocationKeyHandler void keyReleased(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.InvocationMouseHandler InvocationMouseHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.InvocationMouseMotionHandler InvocationMouseMotionHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ItemHandler ItemHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListDataHandler ListDataHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListDataHandler void contentsChanged(javax.swing.event.ListDataEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListDataHandler void intervalAdded(javax.swing.event.ListDataEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListDataHandler void intervalRemoved(javax.swing.event.ListDataEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListMouseHandler ListMouseHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListMouseHandler void mousePressed(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListMouseMotionHandler ListMouseMotionHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListSelectionHandler ListSelectionHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.ListSelectionHandler void valueChanged(javax.swing.event.ListSelectionEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicComboPopup.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicComboPopup)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopIconUI BasicDesktopIconUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopIconUI javax.swing.event.MouseInputListener createMouseInputListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopIconUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopIconUI.MouseInputHandler MouseInputHandler(javax.swing.plaf.basic.BasicDesktopIconUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopIconUI.MouseInputHandler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI BasicDesktopPaneUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI java.awt.Dimension getMinimumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI java.awt.Dimension getPreferredSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI javax.swing.plaf.basic.BasicDesktopPaneUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI void paint(java.awt.Graphics, javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI void registerKeyboardActions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI void uninstallDefaults()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI void unregisterKeyboardActions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.Actions Actions()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.BasicDesktopManager BasicDesktopManager(javax.swing.plaf.basic.BasicDesktopPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.CloseAction CloseAction(javax.swing.plaf.basic.BasicDesktopPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.Handler Handler(javax.swing.plaf.basic.BasicDesktopPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.MaximizeAction MaximizeAction(javax.swing.plaf.basic.BasicDesktopPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.MinimizeAction MinimizeAction(javax.swing.plaf.basic.BasicDesktopPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.NavigateAction NavigateAction(javax.swing.plaf.basic.BasicDesktopPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.NavigateAction boolean isEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.OpenAction OpenAction(javax.swing.plaf.basic.BasicDesktopPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDesktopPaneUI.OpenAction boolean isEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDirectoryModel void intervalAdded(javax.swing.event.ListDataEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDirectoryModel void intervalRemoved(javax.swing.event.ListDataEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicDirectoryModel.DoChangeContents DoChangeContents(java.util.List&lt;java.io.File&gt;, int, java.util.List&lt;java.io.File&gt;, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicDirectoryModel.DoChangeContents void cancel()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicEditorPaneUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI boolean isDirectorySelected()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI boolean isGlobPattern(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI java.awt.event.MouseListener createDoubleClickListener(javax.swing.JFileChooser, javax.swing.JList)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI java.beans.PropertyChangeListener createPropertyChangeListener(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI java.io.File getDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI java.lang.String getDirectoryName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI java.lang.String getFileName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.Action getApproveSelectionAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.Action getCancelSelectionAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.Action getChangeToParentDirectoryAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.Action getGoHomeAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.Action getUpdateAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.JButton getApproveButton(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.JFileChooser getFileChooser()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.JPanel getAccessoryPanel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.event.ListSelectionListener createListSelectionListener(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.filechooser.FileFilter getAcceptAllFileFilter(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.filechooser.FileView getFileView(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.plaf.basic.BasicDirectoryModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI javax.swing.plaf.basic.BasicFileChooserUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void ensureFileIsVisible(javax.swing.JFileChooser, java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void installComponents(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void rescanCurrentDirectory(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void setDirectory(java.io.File)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void setDirectoryName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void setDirectorySelected(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void setFileName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void uninstallComponents(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void uninstallIcons(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI void uninstallStrings(javax.swing.JFileChooser)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.AcceptAllFileFilter AcceptAllFileFilter(javax.swing.plaf.basic.BasicFileChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.AcceptAllFileFilter boolean accept(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.CancelSelectionAction CancelSelectionAction(javax.swing.plaf.basic.BasicFileChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.DoubleClickListener DoubleClickListener(javax.swing.plaf.basic.BasicFileChooserUI, javax.swing.JList)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.FileTransferHandler FileTransferHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.FileTransferHandler int getSourceActions(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.FileTransferHandler.FileTransferable FileTransferable(java.lang.String, java.lang.String, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.FileTransferHandler.FileTransferable java.awt.datatransfer.DataFlavor[] getRicherFlavors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.GlobFilter GlobFilter(javax.swing.plaf.basic.BasicFileChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.GlobFilter java.lang.String getDescription()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.Handler Handler(javax.swing.plaf.basic.BasicFileChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.Handler Handler(javax.swing.plaf.basic.BasicFileChooserUI, javax.swing.JList)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.Handler void mousePressed(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.Handler void mouseReleased(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.SelectionListener SelectionListener(javax.swing.plaf.basic.BasicFileChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFileChooserUI.UpdateAction UpdateAction(javax.swing.plaf.basic.BasicFileChooserUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicFormattedTextFieldUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicGraphicsUtils BasicGraphicsUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicGraphicsUtils java.awt.Insets getEtchedInsets()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicGraphicsUtils java.awt.Insets getGrooveInsets()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML BasicHTML()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.BasicEditorKit javax.swing.text.ViewFactory getViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.BasicHTMLViewFactory BasicHTMLViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.Renderer float getMaximumSpan(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.Renderer int getViewCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.Renderer java.awt.Container getContainer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.Renderer javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.Renderer javax.swing.text.View getView(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.Renderer javax.swing.text.ViewFactory getViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicHTML.Renderer void setParent(javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory BasicIconFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.CheckBoxIcon CheckBoxIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.CheckBoxIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.CheckBoxIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.CheckBoxIcon void paintIcon(java.awt.Component, java.awt.Graphics, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.CheckBoxMenuItemIcon CheckBoxMenuItemIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.CheckBoxMenuItemIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.CheckBoxMenuItemIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.EmptyFrameIcon EmptyFrameIcon()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.EmptyFrameIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.EmptyFrameIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.EmptyFrameIcon void paintIcon(java.awt.Component, java.awt.Graphics, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuArrowIcon MenuArrowIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuArrowIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuArrowIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuItemArrowIcon MenuItemArrowIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuItemArrowIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuItemArrowIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuItemArrowIcon void paintIcon(java.awt.Component, java.awt.Graphics, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuItemCheckIcon MenuItemCheckIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuItemCheckIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuItemCheckIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.MenuItemCheckIcon void paintIcon(java.awt.Component, java.awt.Graphics, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.RadioButtonIcon RadioButtonIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.RadioButtonIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.RadioButtonIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.RadioButtonIcon void paintIcon(java.awt.Component, java.awt.Graphics, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.RadioButtonMenuItemIcon RadioButtonMenuItemIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.RadioButtonMenuItemIcon int getIconHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicIconFactory.RadioButtonMenuItemIcon int getIconWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane java.awt.LayoutManager createLayout()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane javax.swing.plaf.basic.BasicInternalFrameTitlePane.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane void uninstallDefaults()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.Handler Handler(javax.swing.plaf.basic.BasicInternalFrameTitlePane)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.Handler void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.Handler void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.MoveAction void actionPerformed(java.awt.event.ActionEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.NoFocusButton boolean isFocusTraversable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.NoFocusButton void requestFocus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicInternalFrameTitlePane)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.ShowSystemMenuAction ShowSystemMenuAction(javax.swing.plaf.basic.BasicInternalFrameTitlePane, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.SizeAction void actionPerformed(java.awt.event.ActionEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.SystemMenuBar boolean isFocusTraversable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.SystemMenuBar boolean isOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.SystemMenuBar void requestFocus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameTitlePane.TitlePaneLayout TitlePaneLayout(javax.swing.plaf.basic.BasicInternalFrameTitlePane)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI boolean isKeyBindingActive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI boolean isKeyBindingRegistered()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI java.awt.LayoutManager createLayoutManager()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI java.awt.event.ComponentListener createComponentListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI java.awt.event.WindowFocusListener getWindowFocusListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.DesktopManager createDesktopManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.JComponent createEastPane(javax.swing.JInternalFrame)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.JComponent createSouthPane(javax.swing.JInternalFrame)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.JComponent createWestPane(javax.swing.JInternalFrame)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.JComponent getEastPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.JComponent getNorthPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.JComponent getSouthPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.JComponent getWestPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.event.MouseInputAdapter createBorderListener(javax.swing.JInternalFrame)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.event.MouseInputListener createGlassPaneDispatcher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI javax.swing.plaf.basic.BasicInternalFrameUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI void createInternalFrameListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI void setEastPane(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI void setKeyBindingActive(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI void setKeyBindingRegistered(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI void setSouthPane(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI void setWestPane(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI void setupMenuCloseKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.BasicInternalFrameListener BasicInternalFrameListener(javax.swing.plaf.basic.BasicInternalFrameUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.BorderListener BorderListener(javax.swing.plaf.basic.BasicInternalFrameUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.ComponentHandler ComponentHandler(javax.swing.plaf.basic.BasicInternalFrameUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.GlassPaneDispatcher GlassPaneDispatcher(javax.swing.plaf.basic.BasicInternalFrameUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler Handler(javax.swing.plaf.basic.BasicInternalFrameUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void componentHidden(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void componentMoved(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void componentShown(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void internalFrameClosing(javax.swing.event.InternalFrameEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void internalFrameDeiconified(javax.swing.event.InternalFrameEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void internalFrameIconified(javax.swing.event.InternalFrameEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void internalFrameOpened(javax.swing.event.InternalFrameEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void mouseDragged(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void mousePressed(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void mouseReleased(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.Handler void windowGainedFocus(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.InternalFrameLayout InternalFrameLayout(javax.swing.plaf.basic.BasicInternalFrameUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicInternalFrameUI.InternalFramePropertyChangeListener InternalFramePropertyChangeListener(javax.swing.plaf.basic.BasicInternalFrameUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicLabelUI BasicLabelUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicLabelUI void uninstallDefaults(javax.swing.JLabel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicLabelUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI BasicListUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI java.awt.event.FocusListener createFocusListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI javax.swing.event.ListDataListener createListDataListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI javax.swing.event.ListSelectionListener createListSelectionListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI javax.swing.event.MouseInputListener createMouseInputListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI javax.swing.plaf.basic.BasicListUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.FocusHandler FocusHandler(javax.swing.plaf.basic.BasicListUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.Handler Handler(javax.swing.plaf.basic.BasicListUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.Handler void keyReleased(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.Handler void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.Handler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.ListDataHandler ListDataHandler(javax.swing.plaf.basic.BasicListUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.ListSelectionHandler ListSelectionHandler(javax.swing.plaf.basic.BasicListUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.ListTransferHandler ListTransferHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.ListTransferHandler int getSourceActions(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.MouseInputHandler MouseInputHandler(javax.swing.plaf.basic.BasicListUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicListUI.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicListUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicLookAndFeel BasicLookAndFeel()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI BasicMenuBarUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI java.awt.Dimension getMinimumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI java.awt.event.ContainerListener createContainerListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI javax.swing.event.ChangeListener createChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI javax.swing.plaf.basic.BasicMenuBarUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuBarUI.Handler Handler(javax.swing.plaf.basic.BasicMenuBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI BasicMenuItemUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI javax.swing.InputMap createInputMap(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI javax.swing.event.MenuKeyListener createMenuKeyListener(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI javax.swing.plaf.basic.BasicMenuItemUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI void applyInsets(java.awt.Rectangle, java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI.Handler Handler(javax.swing.plaf.basic.BasicMenuItemUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI.Handler void menuDragMouseExited(javax.swing.event.MenuDragMouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI.Handler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI.Handler void mousePressed(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuItemUI.MouseInputHandler MouseInputHandler(javax.swing.plaf.basic.BasicMenuItemUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI BasicMenuUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI javax.swing.event.ChangeListener createChangeListener(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI javax.swing.event.MenuListener createMenuListener(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI javax.swing.plaf.basic.BasicMenuItemUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Actions Actions(java.lang.String, javax.swing.JMenu, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.ChangeHandler ChangeHandler(javax.swing.plaf.basic.BasicMenuUI, javax.swing.JMenu, javax.swing.plaf.basic.BasicMenuUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.ChangeHandler void stateChanged(javax.swing.event.ChangeEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler Handler(javax.swing.plaf.basic.BasicMenuUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler void menuDragMouseEntered(javax.swing.event.MenuDragMouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler void menuDragMouseExited(javax.swing.event.MenuDragMouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler void menuDragMouseReleased(javax.swing.event.MenuDragMouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler void menuKeyPressed(javax.swing.event.MenuKeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler void menuKeyReleased(javax.swing.event.MenuKeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.Handler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicMenuUI.MouseInputHandler MouseInputHandler(javax.swing.plaf.basic.BasicMenuUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI BasicOptionPaneUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI boolean containsCustomComponents(javax.swing.JOptionPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI boolean getSizeButtonsToSameWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI java.awt.Container createSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI java.awt.Dimension getMinimumOptionPaneSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI java.awt.LayoutManager createLayoutManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI java.awt.event.ActionListener createButtonActionListener(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI javax.swing.plaf.basic.BasicOptionPaneUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonActionListener ButtonActionListener(javax.swing.plaf.basic.BasicOptionPaneUI, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout ButtonAreaLayout(boolean, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout ButtonAreaLayout(boolean, int, int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout boolean getCentersChildren()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout boolean getSyncAllWidths()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout int getPadding()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout void setCentersChildren(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout void setPadding(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout void setSyncAllWidths(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.ButtonFactory ButtonFactory(java.lang.String, int, javax.swing.Icon, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.Handler Handler(javax.swing.plaf.basic.BasicOptionPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.Handler void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.Handler void mouseReleased(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.MultiplexingTextField void setKeyStrokes(javax.swing.KeyStroke[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicOptionPaneUI.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicOptionPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicPanelUI BasicPanelUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPasswordFieldUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPasswordFieldUI javax.swing.text.View create(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuSeparatorUI BasicPopupMenuSeparatorUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuSeparatorUI java.awt.Dimension getPreferredSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuSeparatorUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI void installKeyboardActions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.BasicMenuKeyListener BasicMenuKeyListener(javax.swing.plaf.basic.BasicPopupMenuUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.BasicMenuKeyListener void menuKeyReleased(javax.swing.event.MenuKeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.BasicPopupMenuListener BasicPopupMenuListener(javax.swing.plaf.basic.BasicPopupMenuUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.BasicPopupMenuListener void popupMenuCanceled(javax.swing.event.PopupMenuEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.BasicPopupMenuListener void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.MenuKeyboardHelper javax.swing.JPopupMenu getActivePopup(javax.swing.MenuElement[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.MouseGrabber void windowActivated(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.MouseGrabber void windowDeiconified(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicPopupMenuUI.MouseGrabber void windowOpened(java.awt.event.WindowEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI BasicProgressBarUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI int getAnimationIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI int getCachedPercent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI int getCycleTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI int getFrameCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI int getRepaintInterval()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI java.awt.Color getSelectionBackground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI java.awt.Color getSelectionForeground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI javax.swing.plaf.basic.BasicProgressBarUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI void setCachedPercent(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI void setCellLength(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI void setCellSpacing(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI.Animator Animator(javax.swing.plaf.basic.BasicProgressBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI.ChangeHandler ChangeHandler(javax.swing.plaf.basic.BasicProgressBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicProgressBarUI.Handler Handler(javax.swing.plaf.basic.BasicProgressBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonMenuItemUI BasicRadioButtonMenuItemUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonMenuItemUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonMenuItemUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonUI BasicRadioButtonUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonUI java.awt.event.KeyListener createKeyListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonUI javax.swing.Icon getDefaultIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonUI void paintFocus(java.awt.Graphics, java.awt.Rectangle, java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonUI.KeyHandler KeyHandler(javax.swing.plaf.basic.BasicRadioButtonUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonUI.KeyHandler void keyReleased(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRadioButtonUI.KeyHandler void keyTyped(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRootPaneUI BasicRootPaneUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRootPaneUI javax.swing.ComponentInputMap createInputMap(int, javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRootPaneUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRootPaneUI void installComponents(javax.swing.JRootPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRootPaneUI void uninstallComponents(javax.swing.JRootPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRootPaneUI void uninstallDefaults(javax.swing.JRootPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicRootPaneUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicRootPaneUI.RootPaneInputMap RootPaneInputMap(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI BasicScrollBarUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI boolean getSupportsAbsolutePositioning()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI boolean isThumbRollover()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI java.awt.Dimension getMaximumThumbSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI java.awt.Dimension getMinimumThumbSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI java.awt.Rectangle getThumbBounds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI java.awt.Rectangle getTrackBounds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI javax.swing.plaf.basic.BasicScrollBarUI.ArrowButtonListener createArrowButtonListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI javax.swing.plaf.basic.BasicScrollBarUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI javax.swing.plaf.basic.BasicScrollBarUI.ModelListener createModelListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI javax.swing.plaf.basic.BasicScrollBarUI.ScrollListener createScrollListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI javax.swing.plaf.basic.BasicScrollBarUI.TrackListener createTrackListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.ArrowButtonListener ArrowButtonListener(javax.swing.plaf.basic.BasicScrollBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.Handler Handler(javax.swing.plaf.basic.BasicScrollBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.ModelListener ModelListener(javax.swing.plaf.basic.BasicScrollBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicScrollBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.ScrollListener ScrollListener(javax.swing.plaf.basic.BasicScrollBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.ScrollListener ScrollListener(javax.swing.plaf.basic.BasicScrollBarUI, int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.ScrollListener void setDirection(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.ScrollListener void setScrollByBlock(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollBarUI.TrackListener TrackListener(javax.swing.plaf.basic.BasicScrollBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI BasicScrollPaneUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI java.awt.event.MouseWheelListener createMouseWheelListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI java.beans.PropertyChangeListener createHSBPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI java.beans.PropertyChangeListener createVSBPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI javax.swing.event.ChangeListener createHSBChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI javax.swing.event.ChangeListener createVSBChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI javax.swing.event.ChangeListener createViewportChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI javax.swing.plaf.basic.BasicScrollPaneUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI.HSBChangeListener HSBChangeListener(javax.swing.plaf.basic.BasicScrollPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI.Handler Handler(javax.swing.plaf.basic.BasicScrollPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI.MouseWheelHandler MouseWheelHandler(javax.swing.plaf.basic.BasicScrollPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicScrollPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI.VSBChangeListener VSBChangeListener(javax.swing.plaf.basic.BasicScrollPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicScrollPaneUI.ViewportChangeHandler ViewportChangeHandler(javax.swing.plaf.basic.BasicScrollPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSeparatorUI BasicSeparatorUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSeparatorUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSeparatorUI java.awt.Dimension getMinimumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSeparatorUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSeparatorUI void installListeners(javax.swing.JSeparator)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSeparatorUI void uninstallDefaults(javax.swing.JSeparator)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSeparatorUI void uninstallListeners(javax.swing.JSeparator)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI BasicSliderUI(javax.swing.JSlider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI boolean isDragging()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI int getTickLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI java.awt.Color getFocusColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI java.awt.Color getHighlightColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI java.awt.Color getShadowColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI java.awt.event.ComponentListener createComponentListener(javax.swing.JSlider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI java.awt.event.FocusListener createFocusListener(javax.swing.JSlider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI java.beans.PropertyChangeListener createPropertyChangeListener(javax.swing.JSlider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI javax.swing.event.ChangeListener createChangeListener(javax.swing.JSlider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI javax.swing.plaf.basic.BasicSliderUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI javax.swing.plaf.basic.BasicSliderUI.ScrollListener createScrollListener(javax.swing.JSlider)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI javax.swing.plaf.basic.BasicSliderUI.TrackListener createTrackListener(javax.swing.JSlider)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.ActionScroller ActionScroller(javax.swing.plaf.basic.BasicSliderUI, javax.swing.JSlider, int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.Actions Actions()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.ChangeHandler ChangeHandler(javax.swing.plaf.basic.BasicSliderUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.ComponentHandler ComponentHandler(javax.swing.plaf.basic.BasicSliderUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.FocusHandler FocusHandler(javax.swing.plaf.basic.BasicSliderUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.Handler Handler(javax.swing.plaf.basic.BasicSliderUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.Handler void componentHidden(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.Handler void componentMoved(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.Handler void componentShown(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicSliderUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.ScrollListener ScrollListener(javax.swing.plaf.basic.BasicSliderUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.ScrollListener ScrollListener(javax.swing.plaf.basic.BasicSliderUI, int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.ScrollListener void setDirection(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.ScrollListener void setScrollByBlock(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.SharedActionScroller SharedActionScroller(int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.TrackListener TrackListener(javax.swing.plaf.basic.BasicSliderUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSliderUI.TrackListener void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI BasicSpinnerUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI java.awt.LayoutManager createLayout()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI javax.swing.plaf.basic.BasicSpinnerUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI.ArrowButtonHandler void focusGained(java.awt.event.FocusEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI.ArrowButtonHandler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI.Handler Handler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI.Handler void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSpinnerUI.Handler void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider boolean isMouseOver()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider int getDividerSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider javax.swing.border.Border getBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider javax.swing.plaf.basic.BasicSplitPaneUI getBasicSplitPaneUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider void setBorder(javax.swing.border.Border)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider void setDividerSize(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider void setMouseOver(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.DividerLayout DividerLayout(javax.swing.plaf.basic.BasicSplitPaneDivider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.DividerLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.DividerLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.DragController boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.DragController int getNeededLocation(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.MouseHandler MouseHandler(javax.swing.plaf.basic.BasicSplitPaneDivider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.MouseHandler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.OneTouchActionHandler OneTouchActionHandler(javax.swing.plaf.basic.BasicSplitPaneDivider, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneDivider.VerticalDragController int getNeededLocation(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI BasicSplitPaneUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI boolean getKeepHidden()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI boolean isContinuousLayout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI int getDividerBorderSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI int getKeyboardMoveIncrement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI int getLastDragLocation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI int getOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.awt.Component getNonContinuousLayoutDivider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.awt.Insets getInsets(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.awt.event.ActionListener createKeyboardDownRightListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.awt.event.ActionListener createKeyboardEndListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.awt.event.ActionListener createKeyboardHomeListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.awt.event.ActionListener createKeyboardResizeToggleListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.awt.event.ActionListener createKeyboardUpLeftListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.awt.event.FocusListener createFocusListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI javax.swing.JSplitPane getSplitPane()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI javax.swing.plaf.basic.BasicSplitPaneDivider getDivider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI javax.swing.plaf.basic.BasicSplitPaneUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI void setContinuousLayout(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI void setKeepHidden(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI void setLastDragLocation(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI void setOrientation(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager float getLayoutAlignmentX(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager float getLayoutAlignmentY(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager int getSizeForPrimaryAxis(java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager int getSizeForPrimaryAxis(java.awt.Insets, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager int getSizeForSecondaryAxis(java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager int getSizeForSecondaryAxis(java.awt.Insets, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager int[] getSizes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager java.awt.Dimension maximumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager void invalidateLayout(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager void resetToPreferredSizes()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.FocusHandler FocusHandler(javax.swing.plaf.basic.BasicSplitPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.Handler Handler(javax.swing.plaf.basic.BasicSplitPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.KeyboardDownRightHandler KeyboardDownRightHandler(javax.swing.plaf.basic.BasicSplitPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.KeyboardEndHandler KeyboardEndHandler(javax.swing.plaf.basic.BasicSplitPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.KeyboardHomeHandler KeyboardHomeHandler(javax.swing.plaf.basic.BasicSplitPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.KeyboardResizeToggleHandler KeyboardResizeToggleHandler(javax.swing.plaf.basic.BasicSplitPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.KeyboardUpLeftHandler KeyboardUpLeftHandler(javax.swing.plaf.basic.BasicSplitPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicSplitPaneUI.PropertyHandler PropertyHandler(javax.swing.plaf.basic.BasicSplitPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI BasicTabbedPaneUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI boolean shouldPadTabRun(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI boolean shouldRotateTabRuns(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI int getFocusIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI int getNextTabRun(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI int getPreviousTabRun(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI int getRolloverTab()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI int getTabRunIndent(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI int getTabRunOverlay(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI int lastTabInRun(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.awt.Component getVisibleComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.awt.Dimension getMaximumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.awt.Dimension getMinimumSize(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.awt.Insets getContentBorderInsets(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.awt.Insets getTabInsets(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.awt.Polygon createCroppedTabShape(int, java.awt.Rectangle, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.awt.event.FocusListener createFocusListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.awt.event.MouseListener createMouseListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI javax.swing.event.ChangeListener createChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI javax.swing.plaf.basic.BasicTabbedPaneUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI void expandTabRunsArray()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI void rotateInsets(java.awt.Insets, java.awt.Insets, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI void setRolloverTab(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI void uninstallDefaults()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.CroppedEdge boolean isParamsSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.CroppedEdge int getCropline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.CroppedEdge int getCroppedSideWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.CroppedEdge int getTabIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.FocusHandler FocusHandler(javax.swing.plaf.basic.BasicTabbedPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.Handler Handler(javax.swing.plaf.basic.BasicTabbedPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.Handler void mouseDragged(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.Handler void mouseReleased(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.MouseHandler MouseHandler(javax.swing.plaf.basic.BasicTabbedPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicTabbedPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.TabSelectionHandler TabSelectionHandler(javax.swing.plaf.basic.BasicTabbedPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.TabbedPaneLayout TabbedPaneLayout(javax.swing.plaf.basic.BasicTabbedPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.TabbedPaneLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.TabbedPaneLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTabbedPaneUI.TabbedPaneScrollLayout TabbedPaneScrollLayout(javax.swing.plaf.basic.BasicTabbedPaneUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableHeaderUI BasicTableHeaderUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableHeaderUI int getRolloverColumn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableHeaderUI javax.swing.event.MouseInputListener createMouseInputListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableHeaderUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableHeaderUI void rolloverColumnUpdated(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableHeaderUI void uninstallDefaults()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableHeaderUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableHeaderUI.MouseInputHandler MouseInputHandler(javax.swing.plaf.basic.BasicTableHeaderUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI BasicTableUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI java.awt.event.FocusListener createFocusListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI java.awt.event.KeyListener createKeyListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI javax.swing.event.MouseInputListener createMouseInputListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI javax.swing.plaf.basic.BasicTableUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Actions Actions(java.lang.String, boolean, boolean, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Actions Actions(java.lang.String, int, int, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Actions int clipToRange(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Actions int sign(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Actions void calcNextPos(int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.FocusHandler FocusHandler(javax.swing.plaf.basic.BasicTableUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Handler Handler(javax.swing.plaf.basic.BasicTableUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Handler void keyPressed(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Handler void keyReleased(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Handler void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.Handler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.KeyHandler KeyHandler(javax.swing.plaf.basic.BasicTableUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.MouseInputHandler MouseInputHandler(javax.swing.plaf.basic.BasicTableUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.TableTransferHandler TableTransferHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTableUI.TableTransferHandler int getSourceActions(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextAreaUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextAreaUI.PlainParagraph.LogicalView LogicalView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextAreaUI.PlainParagraph.LogicalView boolean isAfter(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextAreaUI.PlainParagraph.LogicalView boolean isBefore(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextAreaUI.PlainParagraph.LogicalView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextAreaUI.PlainParagraph.LogicalView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextAreaUI.PlainParagraph.LogicalView void childAllocation(int, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextAreaUI.PlainParagraph.LogicalView void paint(java.awt.Graphics, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextFieldUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextFieldUI.I18nFieldView int getFlowSpan(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextFieldUI.I18nFieldView int getResizeWeight(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextFieldUI.I18nFieldView void setJustification(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextPaneUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI javax.swing.TransferHandler getTransferHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI javax.swing.text.Caret createCaret()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI javax.swing.text.EditorKit getEditorKit(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI javax.swing.text.JTextComponent getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI javax.swing.text.View create(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI javax.swing.text.View create(javax.swing.text.Element, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI javax.swing.text.View getRootView(javax.swing.text.JTextComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI void installListeners()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI void uninstallListeners()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.BasicCaret BasicCaret()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.BasicCursor BasicCursor(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.DragListener DragListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.DragListener void dragStarting(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.FocusAction FocusAction(javax.swing.plaf.basic.BasicTextUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView RootView(javax.swing.plaf.basic.BasicTextUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView float getMaximumSpan(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView int getViewCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView int getViewIndex(int, javax.swing.text.Position.Bias)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView java.awt.Container getContainer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView java.awt.Shape getChildAllocation(int, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView javax.swing.text.View breakView(int, float, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView javax.swing.text.View getView(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.RootView void setParent(javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.TextTransferHandler TextTransferHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.UpdateHandler UpdateHandler(javax.swing.plaf.basic.BasicTextUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.UpdateHandler float getLayoutAlignmentX(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.UpdateHandler float getLayoutAlignmentY(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.UpdateHandler java.awt.Dimension maximumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.UpdateHandler java.awt.Dimension minimumLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.UpdateHandler java.awt.Dimension preferredLayoutSize(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.UpdateHandler void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTextUI.UpdateHandler void invalidateLayout(java.awt.Container)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToggleButtonUI BasicToggleButtonUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToggleButtonUI int getTextShiftOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToggleButtonUI java.lang.String getPropertyPrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarSeparatorUI BasicToolBarSeparatorUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarSeparatorUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarSeparatorUI void paint(java.awt.Graphics, javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI boolean isFloating()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI boolean isRolloverBorders()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI java.awt.Color getDockingColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI java.awt.Color getFloatingColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI java.awt.event.ContainerListener createToolBarContListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI java.awt.event.FocusListener createToolBarFocusListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI java.awt.event.WindowListener createFrameListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI java.beans.PropertyChangeListener createPropertyListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI javax.swing.border.Border getNonRolloverBorder(javax.swing.AbstractButton)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI javax.swing.border.Border getRolloverBorder(javax.swing.AbstractButton)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI javax.swing.plaf.basic.BasicToolBarUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI void installComponents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI void setDockingColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI void setFloatingColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI void setFloatingLocation(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI void uninstallComponents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.DragWindow int getOrientation()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.DragWindow java.awt.Color getBorderColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.DragWindow java.awt.Insets getInsets()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.DragWindow java.awt.Point getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.DragWindow void setOffset(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.FrameListener FrameListener(javax.swing.plaf.basic.BasicToolBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.Handler Handler(javax.swing.plaf.basic.BasicToolBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.Handler void focusLost(java.awt.event.FocusEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.Handler void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.Handler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.PropertyListener PropertyListener(javax.swing.plaf.basic.BasicToolBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.ToolBarContListener ToolBarContListener(javax.swing.plaf.basic.BasicToolBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolBarUI.ToolBarFocusListener ToolBarFocusListener(javax.swing.plaf.basic.BasicToolBarUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolTipUI BasicToolTipUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolTipUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicToolTipUI.PropertyChangeHandler PropertyChangeHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTransferable BasicTransferable(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTransferable boolean isHTMLSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTransferable boolean isPlainSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTransferable java.awt.datatransfer.DataFlavor[] getRicherFlavors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTransferable java.lang.Object getRicherData(java.awt.datatransfer.DataFlavor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTransferable java.lang.String getHTMLData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTransferable java.lang.String getPlainData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI BasicTreeUI()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI boolean isDropLine(javax.swing.JTree.DropLocation)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI boolean isEditing(javax.swing.JTree)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI boolean isLargeModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI int getHorizontalLegBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI int getLeadSelectionRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI int getLeftChildIndent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI int getRightChildIndent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI int getRowX(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI int getVerticalLegBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI java.awt.Color getHashColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI java.awt.Dimension getPreferredMinSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI java.awt.event.ComponentListener createComponentListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI java.awt.event.FocusListener createFocusListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI java.awt.event.KeyListener createKeyListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI java.awt.event.MouseListener createMouseListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI java.beans.PropertyChangeListener createPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI java.beans.PropertyChangeListener createSelectionModelPropertyChangeListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.Icon getCollapsedIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.Icon getExpandedIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.event.CellEditorListener createCellEditorListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.event.TreeExpansionListener createTreeExpansionListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.event.TreeModelListener createTreeModelListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.event.TreeSelectionListener createTreeSelectionListener()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.plaf.basic.BasicTreeUI.Handler getHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.tree.AbstractLayoutCache.NodeDimensions createNodeDimensions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.tree.TreeCellRenderer getCellRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.tree.TreeModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.tree.TreePath getEditingPath(javax.swing.JTree)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI javax.swing.tree.TreeSelectionModel getSelectionModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI void prepareForUIUninstall()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI void setCollapsedIcon(javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI void setExpandedIcon(javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI void setHashColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI void setPreferredMinSize(java.awt.Dimension)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.Actions Actions()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.Actions Actions(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.CellEditorHandler CellEditorHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.ComponentHandler ComponentHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.FocusHandler FocusHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.Handler Handler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.Handler void keyReleased(java.awt.event.KeyEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.Handler void mouseClicked(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.Handler void mouseEntered(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.Handler void mouseExited(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.Handler void mouseMoved(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.KeyHandler KeyHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.MouseHandler MouseHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.MouseInputHandler void mousePressed(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.NodeDimensionsHandler NodeDimensionsHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.PropertyChangeHandler PropertyChangeHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.SelectionModelPropertyChangeHandler SelectionModelPropertyChangeHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeCancelEditingAction TreeCancelEditingAction(javax.swing.plaf.basic.BasicTreeUI, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeExpansionHandler TreeExpansionHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeHomeAction TreeHomeAction(javax.swing.plaf.basic.BasicTreeUI, int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeHomeAction TreeHomeAction(javax.swing.plaf.basic.BasicTreeUI, int, java.lang.String, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeIncrementAction TreeIncrementAction(javax.swing.plaf.basic.BasicTreeUI, int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeIncrementAction TreeIncrementAction(javax.swing.plaf.basic.BasicTreeUI, int, java.lang.String, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeModelHandler TreeModelHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreePageAction TreePageAction(javax.swing.plaf.basic.BasicTreeUI, int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreePageAction TreePageAction(javax.swing.plaf.basic.BasicTreeUI, int, java.lang.String, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeSelectionHandler TreeSelectionHandler(javax.swing.plaf.basic.BasicTreeUI)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeToggleAction TreeToggleAction(javax.swing.plaf.basic.BasicTreeUI, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeTransferHandler TreeTransferHandler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeTransferHandler int getSourceActions(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeTraverseAction TreeTraverseAction(javax.swing.plaf.basic.BasicTreeUI, int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicTreeUI.TreeTraverseAction TreeTraverseAction(javax.swing.plaf.basic.BasicTreeUI, int, java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.BasicViewportUI BasicViewportUI()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.BasicViewportUI void uninstallDefaults(javax.swing.JComponent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.CenterLayout CenterLayout()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.CenterLayout void addLayoutComponent(java.lang.String, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.CenterLayout void removeLayoutComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.DefaultMenuLayout DefaultMenuLayout(java.awt.Container, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.DragRecognitionSupport DragRecognitionSupport()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.plaf.basic.DragRecognitionSupport void clearState()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.plaf.basic.LazyActionMap LazyActionMap(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
