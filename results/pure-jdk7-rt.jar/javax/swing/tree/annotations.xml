<root>
  <item name="javax.swing.tree.AbstractLayoutCache AbstractLayoutCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache boolean isFixedRowHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache boolean isRootVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache int getRowHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache javax.swing.tree.AbstractLayoutCache.NodeDimensions getNodeDimensions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache javax.swing.tree.TreeModel getModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache javax.swing.tree.TreeSelectionModel getSelectionModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache void setModel(javax.swing.tree.TreeModel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache void setNodeDimensions(javax.swing.tree.AbstractLayoutCache.NodeDimensions)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache void setRootVisible(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache void setRowHeight(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.AbstractLayoutCache.NodeDimensions NodeDimensions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode DefaultMutableTreeNode()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode DefaultMutableTreeNode(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode DefaultMutableTreeNode(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode boolean getAllowsChildren()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode java.lang.Object getUserObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode javax.swing.tree.TreeNode getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode void setParent(javax.swing.tree.MutableTreeNode)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode void setUserObject(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue Queue(javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue java.lang.Object firstObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue.QNode QNode(javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue, java.lang.Object, javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue.QNode)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultMutableTreeNode.PostorderEnumeration boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellEditor java.awt.Color getBorderSelectionColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellEditor java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellEditor void setBorderSelectionColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellEditor void setFont(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellEditor.DefaultTextField javax.swing.border.Border getBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer java.awt.Color getBackgroundNonSelectionColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer java.awt.Color getBackgroundSelectionColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer java.awt.Color getBorderSelectionColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer java.awt.Color getTextNonSelectionColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer java.awt.Color getTextSelectionColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer javax.swing.Icon getClosedIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer javax.swing.Icon getLeafIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer javax.swing.Icon getOpenIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void firePropertyChange(java.lang.String, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void firePropertyChange(java.lang.String, byte, byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void firePropertyChange(java.lang.String, char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void firePropertyChange(java.lang.String, double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void firePropertyChange(java.lang.String, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void firePropertyChange(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void firePropertyChange(java.lang.String, long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void firePropertyChange(java.lang.String, short, short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void invalidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void repaint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void repaint(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void repaint(long, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void revalidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void setBackgroundNonSelectionColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void setBackgroundSelectionColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void setBorderSelectionColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void setClosedIcon(javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void setLeafIcon(javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void setOpenIcon(javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void setTextNonSelectionColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void setTextSelectionColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeCellRenderer void validate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeModel DefaultTreeModel(javax.swing.tree.TreeNode)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeModel DefaultTreeModel(javax.swing.tree.TreeNode, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeModel boolean asksAllowsChildren()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeModel java.lang.Object getRoot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeModel void setAsksAllowsChildren(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel boolean isSelectionEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel int getLeadSelectionRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel int getSelectionCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel int getSelectionMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel javax.swing.tree.RowMapper getRowMapper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel javax.swing.tree.TreePath getLeadSelectionPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel javax.swing.tree.TreePath getSelectionPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel javax.swing.tree.TreePath[] getSelectionPaths()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel void insureUniqueness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.DefaultTreeSelectionModel void updateLeadIndex()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.ExpandVetoException ExpandVetoException(javax.swing.event.TreeExpansionEvent)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.ExpandVetoException ExpandVetoException(javax.swing.event.TreeExpansionEvent, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache int getRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache javax.swing.tree.FixedHeightLayoutCache.FHTreeStateNode createNodeForValue(java.lang.Object, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache void adjustRowCountBy(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache void invalidatePathBounds(javax.swing.tree.TreePath)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache void invalidateSizes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache void visibleNodesChanged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache.FHTreeStateNode FHTreeStateNode(javax.swing.tree.FixedHeightLayoutCache, java.lang.Object, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache.FHTreeStateNode boolean isExpanded()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache.FHTreeStateNode int getChildIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache.FHTreeStateNode int getRow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache.FHTreeStateNode javax.swing.tree.TreePath getTreePath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache.FHTreeStateNode void didAdjustTree()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache.SearchInfo SearchInfo(javax.swing.tree.FixedHeightLayoutCache)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.FixedHeightLayoutCache.VisibleFHTreeStateNodeEnumeration boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.PathPlaceHolder PathPlaceHolder(javax.swing.tree.TreePath, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.TreePath TreePath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.TreePath TreePath(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.TreePath TreePath(javax.swing.tree.TreePath, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.TreePath java.lang.Object getLastPathComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.TreePath javax.swing.tree.TreePath getParentPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.TreePath javax.swing.tree.TreePath pathByAddingChild(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache javax.swing.tree.VariableHeightLayoutCache.TreeStateNode createNodeForValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache void visibleNodesChanged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode TreeStateNode(javax.swing.tree.VariableHeightLayoutCache, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode boolean hasBeenExpanded()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode boolean hasValidSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode boolean isExpanded()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode javax.swing.tree.TreePath getTreePath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode void didAdjustTree()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode void markSizeInvalid()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode void setYOrigin(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.TreeStateNode void shiftYOriginBy(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.tree.VariableHeightLayoutCache.VisibleTreeStateNodeEnumeration boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
