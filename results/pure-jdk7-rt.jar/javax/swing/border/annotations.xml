<root>
  <item name="javax.swing.border.AbstractBorder AbstractBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.AbstractBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.AbstractBorder int getBaseline(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.AbstractBorder java.awt.Component.BaselineResizeBehavior getBaselineResizeBehavior(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.AbstractBorder java.awt.Insets getBorderInsets(java.awt.Component, java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="javax.swing.border.AbstractBorder void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.BevelBorder BevelBorder(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.BevelBorder BevelBorder(int, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.BevelBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.BevelBorder int getBevelType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.BevelBorder java.awt.Color getHighlightInnerColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.BevelBorder java.awt.Color getHighlightOuterColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.BevelBorder java.awt.Color getShadowInnerColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.BevelBorder java.awt.Color getShadowOuterColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.CompoundBorder CompoundBorder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.CompoundBorder CompoundBorder(javax.swing.border.Border, javax.swing.border.Border)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.CompoundBorder javax.swing.border.Border getInsideBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.CompoundBorder javax.swing.border.Border getOutsideBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.EmptyBorder EmptyBorder(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.EmptyBorder EmptyBorder(java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.EmptyBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.EmptyBorder java.awt.Insets getBorderInsets()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.EmptyBorder java.awt.Insets getBorderInsets(java.awt.Component, java.awt.Insets)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="javax.swing.border.EmptyBorder void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.EtchedBorder EtchedBorder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.EtchedBorder EtchedBorder(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.EtchedBorder EtchedBorder(int, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.EtchedBorder EtchedBorder(java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.EtchedBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.EtchedBorder int getEtchType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.EtchedBorder java.awt.Color getHighlightColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.EtchedBorder java.awt.Color getShadowColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.LineBorder LineBorder(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.LineBorder LineBorder(java.awt.Color, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.LineBorder LineBorder(java.awt.Color, int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.LineBorder boolean getRoundedCorners()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.LineBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.LineBorder int getThickness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.LineBorder java.awt.Color getLineColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.MatteBorder MatteBorder(int, int, int, int, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.MatteBorder MatteBorder(int, int, int, int, javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.MatteBorder MatteBorder(java.awt.Insets, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.MatteBorder MatteBorder(java.awt.Insets, javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.MatteBorder MatteBorder(javax.swing.Icon)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.MatteBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.MatteBorder java.awt.Color getMatteColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.MatteBorder javax.swing.Icon getTileIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.SoftBevelBorder SoftBevelBorder(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.SoftBevelBorder SoftBevelBorder(int, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.SoftBevelBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.StrokeBorder StrokeBorder(java.awt.BasicStroke)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.StrokeBorder StrokeBorder(java.awt.BasicStroke, java.awt.Paint)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.StrokeBorder java.awt.BasicStroke getStroke()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.StrokeBorder java.awt.Paint getPaint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.TitledBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.TitledBorder int getTitleJustification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.TitledBorder int getTitlePosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.TitledBorder java.awt.Color getTitleColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.TitledBorder java.awt.Font getTitleFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.TitledBorder java.lang.String getTitle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.border.TitledBorder void setBorder(javax.swing.border.Border)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.TitledBorder void setTitle(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.TitledBorder void setTitleColor(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.border.TitledBorder void setTitleFont(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
