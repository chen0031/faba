<root>
  <item name="javax.swing.text.html.AccessibleHTML javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML javax.swing.JEditorPane getTextComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML javax.swing.text.Document getDocument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML javax.swing.text.html.AccessibleHTML.ElementInfo getRootInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.DocumentHandler DocumentHandler(javax.swing.text.html.AccessibleHTML)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.ElementInfo ElementInfo(javax.swing.text.html.AccessibleHTML, javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.ElementInfo ElementInfo(javax.swing.text.html.AccessibleHTML, javax.swing.text.Element, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.ElementInfo boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.ElementInfo javax.swing.text.Element getElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.ElementInfo javax.swing.text.html.AccessibleHTML.ElementInfo getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.HTMLAccessibleContext HTMLAccessibleContext(javax.swing.text.html.AccessibleHTML, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.HTMLAccessibleContext javax.accessibility.AccessibleComponent getAccessibleComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.HTMLAccessibleContext javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.HTMLAccessibleContext void setBounds(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.HTMLAccessibleContext void setLocation(java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.IconElementInfo IconElementInfo(javax.swing.text.html.AccessibleHTML, javax.swing.text.Element, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.IconElementInfo javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.IconElementInfo.IconAccessibleContext IconAccessibleContext(javax.swing.text.html.AccessibleHTML.IconElementInfo, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.IconElementInfo.IconAccessibleContext javax.accessibility.AccessibleIcon[] getAccessibleIcon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.IconElementInfo.IconAccessibleContext javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.IconElementInfo.IconAccessibleContext void setAccessibleIconDescription(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.PropertyChangeHandler PropertyChangeHandler(javax.swing.text.html.AccessibleHTML)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.RootHTMLAccessibleContext RootHTMLAccessibleContext(javax.swing.text.html.AccessibleHTML, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.RootHTMLAccessibleContext javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo TableElementInfo(javax.swing.text.html.AccessibleHTML, javax.swing.text.Element, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo javax.swing.text.html.AccessibleHTML.ElementInfo getCaptionInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext TableAccessibleContext(javax.swing.text.html.AccessibleHTML.TableElementInfo, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext javax.accessibility.Accessible getAccessibleColumnDescription(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext javax.accessibility.Accessible getAccessibleRowDescription(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext javax.accessibility.Accessible getAccessibleSummary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext javax.accessibility.AccessibleTable getAccessibleColumnHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext javax.accessibility.AccessibleTable getAccessibleRowHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext javax.accessibility.AccessibleTable getAccessibleTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext void setAccessibleCaption(javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext void setAccessibleColumnDescription(int, javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext void setAccessibleColumnHeader(javax.accessibility.AccessibleTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext void setAccessibleRowDescription(int, javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext void setAccessibleRowHeader(javax.accessibility.AccessibleTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext void setAccessibleSummary(javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable boolean isAccessibleColumnSelected(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable boolean isAccessibleRowSelected(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable boolean isAccessibleSelected(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable int getAccessibleColumnCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable int getAccessibleRowCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable int[] getSelectedAccessibleColumns()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable int[] getSelectedAccessibleRows()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable javax.accessibility.Accessible getAccessibleCaption()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable javax.accessibility.Accessible getAccessibleColumnDescription(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable javax.accessibility.Accessible getAccessibleRowDescription(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable javax.accessibility.Accessible getAccessibleSummary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable javax.accessibility.AccessibleTable getAccessibleColumnHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable javax.accessibility.AccessibleTable getAccessibleRowHeader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable void setAccessibleCaption(javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable void setAccessibleColumnDescription(int, javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable void setAccessibleColumnHeader(javax.accessibility.AccessibleTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable void setAccessibleRowDescription(int, javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable void setAccessibleRowHeader(javax.accessibility.AccessibleTable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableAccessibleContext.AccessibleHeadersTable void setAccessibleSummary(javax.accessibility.Accessible)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableCellElementInfo TableCellElementInfo(javax.swing.text.html.AccessibleHTML.TableElementInfo, javax.swing.text.Element, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableCellElementInfo TableCellElementInfo(javax.swing.text.html.AccessibleHTML.TableElementInfo, javax.swing.text.Element, javax.swing.text.html.AccessibleHTML.ElementInfo, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableCellElementInfo boolean isHeaderCell()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TableElementInfo.TableRowElementInfo TableRowElementInfo(javax.swing.text.html.AccessibleHTML.TableElementInfo, javax.swing.text.Element, javax.swing.text.html.AccessibleHTML.TableElementInfo, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TextElementInfo TextElementInfo(javax.swing.text.html.AccessibleHTML, javax.swing.text.Element, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TextElementInfo javax.accessibility.AccessibleContext getAccessibleContext()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TextElementInfo.TextAccessibleContext TextAccessibleContext(javax.swing.text.html.AccessibleHTML.TextElementInfo, javax.swing.text.html.AccessibleHTML.ElementInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TextElementInfo.TextAccessibleContext javax.accessibility.AccessibleRole getAccessibleRole()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TextElementInfo.TextAccessibleContext javax.accessibility.AccessibleText getAccessibleText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.AccessibleHTML.TextElementInfo.TextAccessibleContext.IndexedSegment IndexedSegment(javax.swing.text.html.AccessibleHTML.TextElementInfo.TextAccessibleContext)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.BlockView BlockView(javax.swing.text.Element, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.BlockView void constrainSize(int, javax.swing.SizeRequirements, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="javax.swing.text.html.CSS boolean isFloater(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS boolean isHTMLFontTag(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS boolean validTextAlignValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS int getBaseFontSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS int getIndexOfSize(float, int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS javax.swing.text.html.CSS.Attribute getCssAlignAttribute(javax.swing.text.html.HTML.Tag, javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS javax.swing.text.html.CSS.Attribute[] getAllAttributeKeys()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS javax.swing.text.html.StyleSheet getStyleSheet(javax.swing.text.html.StyleSheet)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSS void setBaseFontSize(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSS.Attribute Attribute(java.lang.String, java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSS.Attribute boolean isInherited()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.Attribute java.lang.String getDefaultValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.Attribute java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundImage BackgroundImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundImage java.lang.Object parseCssValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundPosition BackgroundPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundPosition boolean isHorizontalPositionRelativeToFontSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundPosition boolean isHorizontalPositionRelativeToSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundPosition boolean isVerticalPositionRelativeToFontSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundPosition boolean isVerticalPositionRelativeToSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundPosition float getHorizontalPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BackgroundPosition float getVerticalPosition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BorderStyle BorderStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BorderStyle javax.swing.text.html.CSS.Value getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.BorderWidthValue BorderWidthValue(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSS.ColorValue ColorValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ColorValue java.awt.Color getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ColorValue java.lang.Object toStyleConstants(javax.swing.text.StyleConstants, javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.CssValue CssValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.CssValue java.lang.Object fromStyleConstants(javax.swing.text.StyleConstants, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.CssValue java.lang.Object parseCssValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.CssValue java.lang.Object toStyleConstants(javax.swing.text.StyleConstants, javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.CssValue java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.CssValueMapper CssValueMapper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.FontFamily FontFamily()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.FontFamily java.lang.Object toStyleConstants(javax.swing.text.StyleConstants, javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.FontFamily java.lang.String getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.FontFamily void setFontName(javax.swing.text.html.CSS.FontFamily, java.lang.String)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="javax.swing.text.html.CSS.FontSize FontSize(javax.swing.text.html.CSS)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSS.FontWeight FontWeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.FontWeight boolean isBold()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.FontWeight int getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.FontWeight java.lang.Object toStyleConstants(javax.swing.text.StyleConstants, javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.LengthValue LengthValue()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSS.LengthValue LengthValue(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSS.LengthValue boolean isPercentage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandBackgroundParser ShorthandBackgroundParser()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandBackgroundParser boolean isAttachment(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandBackgroundParser boolean isImage(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandBackgroundParser boolean isRepeat(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandBorderParser ShorthandBorderParser()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandFontParser ShorthandFontParser()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandFontParser boolean isFontStyle(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandFontParser boolean isFontVariant(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.ShorthandMarginParser ShorthandMarginParser()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.StringValue StringValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.StringValue boolean isItalic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.StringValue boolean isStrike()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.StringValue boolean isSub()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.StringValue boolean isSup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.StringValue boolean isUnderline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.StringValue java.lang.Object parseCssValue(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.StringValue java.lang.Object toStyleConstants(javax.swing.text.StyleConstants, javax.swing.text.View)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSS.Value Value(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSS.Value java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSSBorder CSSBorder(javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSSBorder.DottedDashedPainter DottedDashedPainter(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSSBorder.DoublePainter DoublePainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSSBorder.GrooveRidgePainter GrooveRidgePainter(javax.swing.text.html.CSS.Value)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSSBorder.InsetOutsetPainter InsetOutsetPainter(javax.swing.text.html.CSS.Value)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSSBorder.NullPainter NullPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSSBorder.NullPainter void paint(java.awt.Polygon, java.awt.Graphics, java.awt.Color, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSSBorder.ShadowLightPainter ShadowLightPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSSBorder.SolidPainter SolidPainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSSBorder.StrokePainter StrokePainter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSSParser CSSParser()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSSParser boolean inBlock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CSSParser void endBlock(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CSSParser void pushChar(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CommentView CommentView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CommentView void resetBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.CommentView.CommentBorder CommentBorder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.CommentView.CommentBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.EditableView EditableView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.EditableView boolean isVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.FormSubmitEvent FormSubmitEvent(java.lang.Object, javax.swing.event.HyperlinkEvent.EventType, java.net.URL, javax.swing.text.Element, java.lang.String, javax.swing.text.html.FormSubmitEvent.MethodType, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.FormSubmitEvent java.lang.String getData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.FormSubmitEvent javax.swing.text.html.FormSubmitEvent.MethodType getMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.FormSubmitEvent.MethodType MethodType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.FormView FormView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.FormView.BrowseFileAction BrowseFileAction(javax.swing.text.html.FormView, javax.swing.text.AttributeSet, javax.swing.text.Document)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.FormView.MouseEventListener MouseEventListener(javax.swing.text.html.FormView)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.FrameSetView FrameSetView(javax.swing.text.Element, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.FrameSetView void spread(int, int[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="javax.swing.text.html.FrameView FrameView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.FrameView float getMaximumSpan(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.FrameView float getMinimumSpan(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.FrameView.FrameEditorPane javax.swing.text.html.FrameView getFrameView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HRuleView int getBreakWeight(int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HRuleView int getResizeWeight(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HRuleView javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HRuleView javax.swing.text.View breakView(int, int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML HTML()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML javax.swing.text.html.HTML.Attribute[] getAllAttributeKeys()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML javax.swing.text.html.HTML.Tag[] getAllTags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML.Attribute Attribute(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTML.Attribute java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML.Tag Tag()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML.Tag Tag(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTML.Tag Tag(java.lang.String, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTML.Tag boolean breaksFlow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML.Tag boolean isBlock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML.Tag boolean isParagraph()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML.Tag boolean isPreformatted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML.Tag java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTML.UnknownTag UnknownTag(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument boolean getPreservesUnknownTags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument boolean hasBaseTag()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument boolean isFrameDocument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument java.lang.String getBaseTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument java.net.URL getBase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument void setFrameDocumentState(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument void setPreservesUnknownTags(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.BlockElement javax.swing.text.AttributeSet getResolveParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader boolean isInsertTag(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.AnchorAction AnchorAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.AreaAction AreaAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.AreaAction void end(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.BaseAction BaseAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.BlockAction BlockAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.CharacterAction CharacterAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.ConvertAction ConvertAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.FormAction FormAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.FormTagAction FormTagAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.HeadAction HeadAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.HeadAction boolean isEmpty(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.HiddenAction HiddenAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.HiddenAction boolean isEmpty(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.IsindexAction IsindexAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.LinkAction LinkAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.MapAction MapAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.MapAction void end(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.MetaAction MetaAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.MetaAction boolean isEmpty(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.ObjectAction ObjectAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.ParagraphAction ParagraphAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.PreAction PreAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.SpecialAction SpecialAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.StyleAction StyleAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.StyleAction boolean isEmpty(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.TagAction TagAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.TagAction void end(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.TagAction void start(javax.swing.text.html.HTML.Tag, javax.swing.text.MutableAttributeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.TitleAction TitleAction(javax.swing.text.html.HTMLDocument.HTMLReader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.HTMLReader.TitleAction boolean isEmpty(javax.swing.text.html.HTML.Tag)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.Iterator Iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.LeafIterator int getEndOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.LeafIterator javax.swing.text.html.HTML.Tag getTag()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLDocument.RunElement javax.swing.text.AttributeSet getResolveParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit boolean isAutoFormSubmission()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit java.awt.Cursor getDefaultCursor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit java.awt.Cursor getLinkCursor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit java.lang.String getContentType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit javax.swing.text.ViewFactory getViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit void setAutoFormSubmission(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit void setDefaultCursor(java.awt.Cursor)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit void setLinkCursor(java.awt.Cursor)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.HTMLFactory HTMLFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.HTMLFactory.BodyBlockView BodyBlockView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.HTMLFactory.BodyBlockView void componentHidden(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.HTMLFactory.BodyBlockView void componentMoved(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.HTMLFactory.BodyBlockView void componentShown(java.awt.event.ComponentEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.LinkController LinkController()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.LinkController void mouseDragged(java.awt.event.MouseEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.NavigateLinkAction.FocusHighlightPainter FocusHighlightPainter(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.Parser Parser()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback ParserCallback()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback void flush()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback void handleComment(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback void handleEndOfLineString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback void handleEndTag(javax.swing.text.html.HTML.Tag, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback void handleError(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback void handleSimpleTag(javax.swing.text.html.HTML.Tag, javax.swing.text.MutableAttributeSet, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback void handleStartTag(javax.swing.text.html.HTML.Tag, javax.swing.text.MutableAttributeSet, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLEditorKit.ParserCallback void handleText(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HTMLFrameHyperlinkEvent HTMLFrameHyperlinkEvent(java.lang.Object, javax.swing.event.HyperlinkEvent.EventType, java.net.URL, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLFrameHyperlinkEvent HTMLFrameHyperlinkEvent(java.lang.Object, javax.swing.event.HyperlinkEvent.EventType, java.net.URL, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLFrameHyperlinkEvent HTMLFrameHyperlinkEvent(java.lang.Object, javax.swing.event.HyperlinkEvent.EventType, java.net.URL, java.lang.String, javax.swing.text.Element, java.awt.event.InputEvent, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLFrameHyperlinkEvent HTMLFrameHyperlinkEvent(java.lang.Object, javax.swing.event.HyperlinkEvent.EventType, java.net.URL, java.lang.String, javax.swing.text.Element, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLFrameHyperlinkEvent HTMLFrameHyperlinkEvent(java.lang.Object, javax.swing.event.HyperlinkEvent.EventType, java.net.URL, javax.swing.text.Element, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HTMLFrameHyperlinkEvent java.lang.String getTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HiddenTagView HiddenTagView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.HiddenTagView float getAlignment(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HiddenTagView.EndTagBorder EndTagBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HiddenTagView.EndTagBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HiddenTagView.EndTagBorder java.awt.Insets getBorderInsets(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HiddenTagView.StartTagBorder StartTagBorder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HiddenTagView.StartTagBorder boolean isBorderOpaque()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.HiddenTagView.StartTagBorder java.awt.Insets getBorderInsets(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ImageView ImageView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.ImageView boolean getLoadsSynchronously()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ImageView boolean isLink()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ImageView float getAlignment(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ImageView void setLoadsSynchronously(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.ImageView.ImageHandler ImageHandler(javax.swing.text.html.ImageView)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.ImageView.ImageLabelView int getEndOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ImageView.ImageLabelView int getStartOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ImageView.ImageLabelView javax.swing.text.View breakView(int, int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ImageView.ImageLabelView void reset(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.InlineView javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.IsindexView IsindexView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.LineView boolean isVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.LineView int getCharactersPerTab()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ListView ListView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.Map Map()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.Map Map(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.Map java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.Map.CircleRegionContainment boolean contains(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.Map.DefaultRegionContainment DefaultRegionContainment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.Map.DefaultRegionContainment boolean contains(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.Map.RectangleRegionContainment boolean contains(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.MinimalHTMLWriter boolean inFontTag()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.MinimalHTMLWriter boolean isValidCharacter(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.MinimalHTMLWriter void writeComponent(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.MinimalHTMLWriter void writeImage(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.MuxingAttributeSet MuxingAttributeSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.MuxingAttributeSet MuxingAttributeSet(javax.swing.text.AttributeSet[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.MuxingAttributeSet javax.swing.text.AttributeSet getResolveParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.MuxingAttributeSet javax.swing.text.AttributeSet[] getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.MuxingAttributeSet void insertAttributeSetAt(javax.swing.text.AttributeSet, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.MuxingAttributeSet void removeAttributeSetAt(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.MuxingAttributeSet void setAttributes(javax.swing.text.AttributeSet[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.NoFramesView NoFramesView(javax.swing.text.Element, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.NoFramesView boolean isVisible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.ObjectView ObjectView(javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.Option boolean isSelected()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.Option java.lang.String getLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.Option java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.Option javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.Option void setLabel(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.Option void setSelection(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.OptionComboBoxModel javax.swing.text.html.Option getInitialSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionComboBoxModel void setInitialSelection(javax.swing.text.html.Option)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.OptionListModel boolean contains(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel boolean getValueIsAdjusting()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel boolean isLeadAnchorNotificationEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel boolean isSelectionEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel int getAnchorSelectionIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel int getLeadSelectionIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel int getMaxSelectionIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel int getSelectionMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel java.util.BitSet getInitialSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.OptionListModel void markAsDirty(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.OptionListModel void setAnchorSelectionIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.OptionListModel void setLeadAnchorNotificationEnabled(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.OptionListModel void setSelectionMode(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.OptionListModel void updateLeadAnchorIndices(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.ResourceLoader ResourceLoader(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet boolean isW3CLengthUnits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet int getIndexOfSize(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet int[] getSizeMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet java.net.URL getBase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet javax.swing.text.html.StyleSheet.SelectorMapping getRootSelectorMapping()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet void setBase(java.net.URL)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet.BackgroundImagePainter boolean updatePaintCoordinates(java.awt.Rectangle, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet.BoxPainter javax.swing.border.Border getBorder(javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.BoxPainter.HorizontalMargin HorizontalMargin(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet.CssParser void handleProperty(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle ResolvedStyle(java.lang.String, javax.swing.text.AttributeSet[], int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle int boundedIndexOf(java.lang.String, char, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle javax.swing.event.ChangeListener[] getChangeListeners()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle void addAttribute(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle void addAttributes(javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle void addChangeListener(javax.swing.event.ChangeListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle void removeAttribute(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle void removeAttributes(java.util.Enumeration&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle void removeAttributes(javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle void removeChangeListener(javax.swing.event.ChangeListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.ResolvedStyle void setResolveParent(javax.swing.text.AttributeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.SearchBuffer SearchBuffer()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet.SearchBuffer java.lang.StringBuffer getStringBuffer()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet.SelectorMapping SelectorMapping(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.StyleSheet.SelectorMapping int getSpecificity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.SelectorMapping javax.swing.text.Style getStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.SelectorMapping javax.swing.text.html.StyleSheet.SelectorMapping createChildSelectorMapping(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.StyleSheet.SelectorMapping void setStyle(javax.swing.text.Style)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView int getColumnCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView int getColumnSpan(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView javax.swing.text.ViewFactory getViewFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView void invalidateGrid()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView.CellView CellView(javax.swing.text.html.TableView, javax.swing.text.Element)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator ColumnIterator(javax.swing.text.html.TableView)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator float getBorderWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator float getLeadingCollapseSpan()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator float getMaximumSpan(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator float getMinimumSpan(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator float getPreferredSpan(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator float getTrailingCollapseSpan()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator int getAdjustmentWeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator int getCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator int getSpan()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator void disablePercentages()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView.ColumnIterator void setIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView.RowIterator RowIterator(javax.swing.text.html.TableView)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView.RowIterator float getBorderWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.RowIterator float getLeadingCollapseSpan()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.RowIterator float getTrailingCollapseSpan()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.RowIterator int getAdjustmentWeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.RowIterator void setIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView.RowIterator void setLayoutArrays(int[], int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.swing.text.html.TableView.RowView int getResizeWeight(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.RowView javax.swing.SizeRequirements calculateMajorAxisRequirements(int, javax.swing.SizeRequirements)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.swing.text.html.TableView.RowView javax.swing.text.AttributeSet getAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
