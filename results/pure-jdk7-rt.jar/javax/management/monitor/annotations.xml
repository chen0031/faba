<root>
  <item name="javax.management.monitor.CounterMonitor boolean getDifferenceMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor boolean getNotify()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor java.lang.Number getInitThreshold()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor java.lang.Number getModulus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor java.lang.Number getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor javax.management.monitor.Monitor.ObservedObject createObservedObject(javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor void setNotify(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject CounterMonitorObservedObject(javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject boolean getDerivedGaugeValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject boolean getEventAlreadyNotified()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject boolean getModulusExceeded()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject java.lang.Number getDerivedGaugeExceeded()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject java.lang.Number getPreviousScanCounter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject java.lang.Number getThreshold()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject javax.management.monitor.Monitor.NumericalType getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject void setDerivedGaugeExceeded(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject void setDerivedGaugeValid(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject void setEventAlreadyNotified(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject void setModulusExceeded(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject void setPreviousScanCounter(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject void setThreshold(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.CounterMonitor.CounterMonitorObservedObject void setType(javax.management.monitor.Monitor.NumericalType)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.GaugeMonitor boolean getDifferenceMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor boolean getNotifyHigh()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor boolean getNotifyLow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor java.lang.Number getHighThreshold()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor java.lang.Number getLowThreshold()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor javax.management.monitor.Monitor.ObservedObject createObservedObject(javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor void setNotifyHigh(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.GaugeMonitor void setNotifyLow(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject GaugeMonitorObservedObject(javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject boolean getDerivedGaugeValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject int getStatus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject java.lang.Number getPreviousScanGauge()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject javax.management.monitor.Monitor.NumericalType getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject void setDerivedGaugeValid(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject void setPreviousScanGauge(java.lang.Number)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject void setStatus(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.GaugeMonitor.GaugeMonitorObservedObject void setType(javax.management.monitor.Monitor.NumericalType)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.Monitor boolean isActive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor boolean isAlreadyNotified(javax.management.monitor.Monitor.ObservedObject, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor boolean isComparableTypeValid(javax.management.ObjectName, java.lang.String, java.lang.Comparable&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor boolean isThresholdTypeValid(javax.management.ObjectName, java.lang.String, java.lang.Comparable&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor java.lang.Comparable&lt;?&gt; getDerivedGaugeFromComparable(javax.management.ObjectName, java.lang.String, java.lang.Comparable&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor java.lang.String buildErrorNotification(javax.management.ObjectName, java.lang.String, java.lang.Comparable&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor java.lang.String getObservedAttribute()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor javax.management.monitor.Monitor.ObservedObject createObservedObject(javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor javax.management.monitor.MonitorNotification buildAlarmNotification(javax.management.ObjectName, java.lang.String, java.lang.Comparable&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor long getGranularityPeriod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor void onErrorNotification(javax.management.monitor.MonitorNotification)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor void postDeregister()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor void postRegister(java.lang.Boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor void updateDeprecatedAlreadyNotified()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.Monitor.DaemonThreadFactory java.lang.ThreadGroup getThreadGroup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor.NumericalType NumericalType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.Monitor.ObservedObject ObservedObject(javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.Monitor.ObservedObject int getAlreadyNotified()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor.ObservedObject java.lang.Object getDerivedGauge()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor.ObservedObject javax.management.ObjectName getObservedObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor.ObservedObject long getDerivedGaugeTimeStamp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.Monitor.ObservedObject void setAlreadyNotified(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.Monitor.ObservedObject void setDerivedGauge(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.Monitor.ObservedObject void setDerivedGaugeTimeStamp(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.Monitor.SchedulerTask SchedulerTask(javax.management.monitor.Monitor)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.Monitor.SchedulerTask void setMonitorTask(javax.management.monitor.Monitor.MonitorTask)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.MonitorNotification MonitorNotification(java.lang.String, java.lang.Object, long, long, java.lang.String, javax.management.ObjectName, java.lang.String, java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.MonitorNotification java.lang.Object getDerivedGauge()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.MonitorNotification java.lang.Object getTrigger()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.MonitorNotification java.lang.String getObservedAttribute()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.MonitorNotification javax.management.ObjectName getObservedObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.MonitorSettingException MonitorSettingException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.MonitorSettingException MonitorSettingException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.StringMonitor boolean getNotifyDiffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.StringMonitor boolean getNotifyMatch()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.StringMonitor boolean isComparableTypeValid(javax.management.ObjectName, java.lang.String, java.lang.Comparable&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.StringMonitor java.lang.String getStringToCompare()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.StringMonitor javax.management.monitor.Monitor.ObservedObject createObservedObject(javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.StringMonitor void setNotifyDiffer(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.StringMonitor void setNotifyMatch(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.StringMonitor.StringMonitorObservedObject StringMonitorObservedObject(javax.management.ObjectName)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.management.monitor.StringMonitor.StringMonitorObservedObject int getStatus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.management.monitor.StringMonitor.StringMonitorObservedObject void setStatus(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
