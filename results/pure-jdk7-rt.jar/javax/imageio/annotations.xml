<root>
  <item name="javax.imageio.IIOException IIOException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOImage IIOImage(java.awt.image.Raster, java.util.List&lt;? extends java.awt.image.BufferedImage&gt;, javax.imageio.metadata.IIOMetadata)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOImage IIOImage(java.awt.image.RenderedImage, java.util.List&lt;? extends java.awt.image.BufferedImage&gt;, javax.imageio.metadata.IIOMetadata)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOImage boolean hasRaster()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOImage java.awt.image.Raster getRaster()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOImage java.awt.image.RenderedImage getRenderedImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOImage java.util.List&lt;? extends java.awt.image.BufferedImage&gt; getThumbnails()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOImage javax.imageio.metadata.IIOMetadata getMetadata()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOImage void setMetadata(javax.imageio.metadata.IIOMetadata)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOImage void setRaster(java.awt.image.Raster)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOImage void setRenderedImage(java.awt.image.RenderedImage)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOImage void setThumbnails(java.util.List&lt;? extends java.awt.image.BufferedImage&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOParam IIOParam()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOParam boolean hasController()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOParam int getSourceXSubsampling()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOParam int getSourceYSubsampling()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOParam int getSubsamplingXOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOParam int getSubsamplingYOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOParam javax.imageio.IIOParamController getController()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOParam javax.imageio.IIOParamController getDefaultController()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOParam javax.imageio.ImageTypeSpecifier getDestinationType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.IIOParam void setController(javax.imageio.IIOParamController)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOParam void setDestinationType(javax.imageio.ImageTypeSpecifier)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.IIOParam void setSourceSubsampling(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO ImageIO()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageIO.CacheInfo CacheInfo()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.CacheInfo boolean getUseCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageIO.CacheInfo java.io.File getCacheDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageIO.CacheInfo java.lang.Boolean getHasPermission()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageIO.CacheInfo void setCacheDirectory(java.io.File)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.CacheInfo void setHasPermission(java.lang.Boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.CacheInfo void setUseCache(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.CanDecodeInputFilter CanDecodeInputFilter(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.CanEncodeImageAndFormatFilter CanEncodeImageAndFormatFilter(javax.imageio.ImageTypeSpecifier, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.ContainsFilter ContainsFilter(java.lang.reflect.Method, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.ImageReaderIterator ImageReaderIterator(java.util.Iterator)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.ImageReaderIterator void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageIO.ImageTranscoderIterator ImageTranscoderIterator(java.util.Iterator)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.ImageTranscoderIterator void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageIO.ImageWriterIterator ImageWriterIterator(java.util.Iterator)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageIO.ImageWriterIterator void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageIO.SpiInfo SpiInfo(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReadParam ImageReadParam()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReadParam boolean canSetSourceRenderSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReadParam int getSourceMaxProgressivePass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReadParam int getSourceMinProgressivePass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReadParam int getSourceNumProgressivePasses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReadParam java.awt.image.BufferedImage getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReadParam void setDestination(java.awt.image.BufferedImage)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReadParam void setSourceProgressivePasses(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReader ImageReader(javax.imageio.spi.ImageReaderSpi)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReader boolean abortRequested()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader boolean canReadRaster()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader boolean isIgnoringMetadata()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader boolean isImageTiled(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader boolean isRandomAccessEasy(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader boolean isSeekForwardOnly()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader boolean readerSupportsThumbnails()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader int getMinIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader int getNumThumbnails(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader int getTileGridXOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader int getTileGridYOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader java.awt.image.BufferedImage readThumbnail(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader java.awt.image.Raster readRaster(int, javax.imageio.ImageReadParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader java.lang.Object getInput()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.ImageReadParam getDefaultReadParam()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.spi.ImageReaderSpi getOriginatingProvider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader void abort()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReader void clearAbortRequest()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReader void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader void removeAllIIOReadProgressListeners()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReader void removeAllIIOReadUpdateListeners()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageReader void removeAllIIOReadWarningListeners()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier ImageTypeSpecifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier int getNumBands()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier java.awt.image.SampleModel getSampleModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriteParam ImageWriteParam()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageWriteParam ImageWriteParam(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageWriteParam boolean canOffsetTiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriteParam boolean canWriteCompressed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriteParam boolean canWriteProgressive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriteParam boolean canWriteTiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriteParam java.awt.Dimension[] clonePreferredTileSizes(java.awt.Dimension[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriteParam java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter ImageWriter(javax.imageio.spi.ImageWriterSpi)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageWriter boolean abortRequested()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter boolean canWriteRasters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter boolean canWriteSequence()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter int getNumThumbnailsSupported(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter java.awt.Dimension[] getPreferredThumbnailSizes(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter java.lang.Object getOutput()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter javax.imageio.spi.ImageWriterSpi getOriginatingProvider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter void abort()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageWriter void clearAbortRequest()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageWriter void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter void removeAllIIOWriteProgressListeners()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="javax.imageio.ImageWriter void removeAllIIOWriteWarningListeners()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
