<root>
  <item name="java.awt.image.AffineTransformOp int getInterpolationType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.AreaAveragingScaleFilter void makeAccumBuffers()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.BandCombineOp float[][] getMatrix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BandCombineOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BandedSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] createIndicesArray(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BandedSampleModel int[] createOffsetArray(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferStrategy BufferStrategy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferStrategy void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage boolean hasTileWriters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage boolean isAlphaPremultiplied()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage boolean isTileWritable(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getMinTileX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getMinTileY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getNumXTiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getNumYTiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage int getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.Point[] getWritableTileIndices()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.Raster getTile(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.WritableRaster getRaster()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.awt.image.WritableRaster getWritableTile(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.lang.String[] getPropertyNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage java.util.Vector&lt;java.awt.image.RenderedImage&gt; getSources()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage void addTileObserver(java.awt.image.TileObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage void releaseWritableTile(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImage void removeTileObserver(java.awt.image.TileObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImageFilter BufferedImageFilter(java.awt.image.BufferedImageOp)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.BufferedImageFilter java.awt.image.BufferedImageOp getBufferedImageOp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.BufferedImageFilter void setColorModel(java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.ByteLookupTable byte[][] getTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorConvertOp ColorConvertOp(java.awt.RenderingHints)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorConvertOp java.awt.color.ICC_Profile[] getICC_Profiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean hasAlpha()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean isAlphaPremultiplied()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean isCompatibleRaster(java.awt.image.Raster)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean isCompatibleSampleModel(java.awt.image.SampleModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean isLinearGRAYspace(java.awt.color.ColorSpace)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel boolean isLinearRGBspace(java.awt.color.ColorSpace)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getComponentSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getDataElement(int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getDefaultTransferType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getNumColorComponents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getNumComponents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getPixelSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getTransferType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int[] getComponents(int, int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel int[] getComponents(java.lang.Object, int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel java.awt.color.ColorSpace getColorSpace()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel java.awt.image.SampleModel createCompatibleSampleModel(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel java.awt.image.WritableRaster createCompatibleWritableRaster(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel java.awt.image.WritableRaster getAlphaRaster(java.awt.image.WritableRaster)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel java.lang.Object getDataElements(int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel java.lang.Object getDataElements(int[], int, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ColorModel void finalize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentColorModel int getAlpha(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getOffset(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getOffset(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel int[] orderBands(int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ComponentSampleModel long getBufferSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ConvolveOp ConvolveOp(java.awt.image.Kernel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.ConvolveOp ConvolveOp(java.awt.image.Kernel, int, java.awt.RenderingHints)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.ConvolveOp int getEdgeCondition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ConvolveOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.CropImageFilter CropImageFilter(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.CropImageFilter int addWithoutOverflow(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int getDataType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int getNumBanks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBuffer int[] toIntArray(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferByte int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferByte int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble double getElemDouble(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble double getElemDouble(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble float getElemFloat(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble float getElemFloat(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferDouble int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat double getElemDouble(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat double getElemDouble(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat float getElemFloat(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat float getElemFloat(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferFloat int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferInt int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferInt int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferShort int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferShort int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferUShort int getElem(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DataBufferUShort int getElem(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getAlpha(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getAlphaMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getBlueMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getDataElement(int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getGreenMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getRedMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getsRGBComponentFromLinearRGB(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel int getsRGBComponentFromsRGB(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.DirectColorModel void setFields()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.FilteredImageSource FilteredImageSource(java.awt.image.ImageProducer, java.awt.image.ImageFilter)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.ImageFilter ImageFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ImagingOpException ImagingOpException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.IndexColorModel boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int calcRealMapSize(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getAlpha(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getBlue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getGreen(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getMapSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getRGB(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getRed(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel int getTransparentPixel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel java.math.BigInteger getAllValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel java.math.BigInteger getValidPixels()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel void calculatePixelMask()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.IndexColorModel void finalize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.IndexColorModel void setTransparency(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.Kernel int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Kernel int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Kernel int getXOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Kernel int getYOrigin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.LookupOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.LookupOp java.awt.image.LookupTable getTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.LookupTable LookupTable(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.LookupTable int getNumComponents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.LookupTable int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MemoryImageSource void requestTopDownLeftRightResend(java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getBitOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getDataBitOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getNumDataElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getOffset(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getPixelBitStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getSampleSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int getTransferType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.MultiPixelPackedSampleModel int[] getSampleSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PackedColorModel int countBits(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PackedColorModel int getMask(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber int getStatus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber int status()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber java.lang.Object getPixels()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber void setColorModel(java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber void setHints(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelGrabber void setProperties(java.util.Hashtable&lt;?,?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.PixelInterleavedSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.RGBImageFilter RGBImageFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.RGBImageFilter void substituteColorModel(java.awt.image.ColorModel, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.Raster int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getMinX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getMinY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getNumBands()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getSampleModelTranslateX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getSampleModelTranslateY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster java.awt.image.DataBuffer getDataBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster java.awt.image.Raster getParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.Raster java.awt.image.SampleModel getSampleModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.RasterFormatException RasterFormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.RescaleOp int getNumFactors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.RescaleOp java.awt.RenderingHints getRenderingHints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getDataType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getNumBands()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getTransferType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SampleModel int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.ShortLookupTable short[][] getTable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getNumDataElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getOffset(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getSampleSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.SinglePixelPackedSampleModel long getBufferSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.VolatileImage VolatileImage()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.awt.image.VolatileImage int getTransparency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.awt.image.WritableRaster java.awt.image.WritableRaster getWritableParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
