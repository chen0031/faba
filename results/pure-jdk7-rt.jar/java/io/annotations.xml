<root>
  <item name="java.io.Bits Bits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Bits boolean getBoolean(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Bits char getChar(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Bits int getInt(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Bits long getLong(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Bits short getShort(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.BufferedInputStream BufferedInputStream(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedInputStream BufferedInputStream(java.io.InputStream, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedInputStream boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.BufferedInputStream byte[] getBufIfOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.BufferedInputStream java.io.InputStream getInIfOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.BufferedInputStream void mark(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedInputStream void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedOutputStream BufferedOutputStream(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedOutputStream BufferedOutputStream(java.io.OutputStream, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedReader BufferedReader(java.io.Reader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedReader BufferedReader(java.io.Reader, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedReader boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.BufferedReader void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.BufferedReader void mark(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedReader void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.BufferedWriter int min(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.BufferedWriter void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ByteArrayInputStream ByteArrayInputStream(byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ByteArrayInputStream ByteArrayInputStream(byte[], int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ByteArrayInputStream boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ByteArrayInputStream int available()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ByteArrayInputStream int read()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ByteArrayInputStream long skip(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ByteArrayInputStream void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ByteArrayInputStream void mark(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ByteArrayInputStream void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ByteArrayOutputStream byte[] toByteArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ByteArrayOutputStream int hugeCapacity(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ByteArrayOutputStream int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ByteArrayOutputStream void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ByteArrayOutputStream void ensureCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ByteArrayOutputStream void grow(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ByteArrayOutputStream void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharArrayReader CharArrayReader(char[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharArrayReader CharArrayReader(char[], int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharArrayReader boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.CharArrayReader boolean ready()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.CharArrayReader int read()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharArrayReader long skip(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharArrayReader void close()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharArrayReader void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.CharArrayReader void mark(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharArrayReader void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharArrayWriter char[] toCharArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.CharArrayWriter int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.CharArrayWriter void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.CharArrayWriter void flush()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.CharArrayWriter void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharConversionException CharConversionException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.CharConversionException CharConversionException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.Console java.io.PrintWriter writer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Console java.io.Reader reader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Console.LineReader LineReader(java.io.Console, java.io.Reader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.Console.LineReader void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.DataInputStream DataInputStream(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.DataOutputStream DataOutputStream(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.DataOutputStream int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.DataOutputStream void incCount(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.DeleteOnExitHook DeleteOnExitHook()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.EOFException EOFException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.EOFException EOFException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ExpiringCache.Entry Entry(long, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ExpiringCache.Entry java.lang.String val()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ExpiringCache.Entry long timestamp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ExpiringCache.Entry void setTimestamp(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ExpiringCache.Entry void setVal(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.File File(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.File boolean isInvalid()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.File int getPrefixLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.File java.lang.String getPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.File.PathStatus PathStatus(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.File.TempDirectory TempDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.File.TempDirectory java.io.File location()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FileDescriptor FileDescriptor()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.FileDescriptor FileDescriptor(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.FileDescriptor boolean valid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FileInputStream java.io.FileDescriptor getFD()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FileNotFoundException FileNotFoundException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.FileNotFoundException FileNotFoundException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.FileOutputStream java.io.FileDescriptor getFD()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FilePermission boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FilePermission boolean implies(java.security.Permission)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FilePermission boolean impliesIgnoreMask(java.io.FilePermission)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FilePermission int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FilePermission int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FilePermission java.security.PermissionCollection newPermissionCollection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FilePermissionCollection FilePermissionCollection()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.FileSystem FileSystem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.FilterInputStream FilterInputStream(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.FilterOutputStream FilterOutputStream(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.FilterReader FilterReader(java.io.Reader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.FilterWriter FilterWriter(java.io.Writer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.IOException IOException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.IOException IOException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.IOException IOException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.InputStream InputStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.InputStream boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.InputStream int available()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.InputStream void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.InputStream void mark(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.InputStream void reset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.InterruptedIOException InterruptedIOException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.InterruptedIOException InterruptedIOException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.InvalidClassException InvalidClassException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.InvalidClassException InvalidClassException(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.InvalidObjectException InvalidObjectException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.LineNumberInputStream LineNumberInputStream(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.LineNumberInputStream int getLineNumber()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.LineNumberInputStream void setLineNumber(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.LineNumberReader LineNumberReader(java.io.Reader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.LineNumberReader LineNumberReader(java.io.Reader, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.LineNumberReader int getLineNumber()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.LineNumberReader void mark(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.LineNumberReader void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.LineNumberReader void setLineNumber(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.NotActiveException NotActiveException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.NotActiveException NotActiveException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.NotSerializableException NotSerializableException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.NotSerializableException NotSerializableException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectInputStream java.lang.Object readObjectOverride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream java.lang.Object resolveObject(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.BlockDataInputStream BlockDataInputStream(java.io.ObjectInputStream, java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectInputStream.BlockDataInputStream boolean getBlockDataMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.BlockDataInputStream boolean setBlockDataMode(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectInputStream.BlockDataInputStream int currentBlockRemaining()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.Caches Caches()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.GetField GetField()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.GetFieldImpl java.io.ObjectStreamClass getObjectStreamClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.HandleTable HandleTable(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectInputStream.HandleTable int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.HandleTable java.lang.ClassNotFoundException lookupException(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.HandleTable java.lang.Object lookupObject(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.HandleTable void grow()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectInputStream.HandleTable.HandleList HandleList()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectInputStream.HandleTable.HandleList int get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.HandleTable.HandleList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.PeekInputStream PeekInputStream(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectInputStream.ValidationList ValidationList()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectInputStream.ValidationList void clear()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectInputStream.ValidationList.Callback Callback(java.io.ObjectInputValidation, int, java.io.ObjectInputStream.ValidationList.Callback, java.security.AccessControlContext)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectOutputStream int getProtocolVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream java.lang.Object replaceObject(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream void annotateClass(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream void annotateProxyClass(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream void writeObjectOverride(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream.BlockDataOutputStream BlockDataOutputStream(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectOutputStream.BlockDataOutputStream boolean getBlockDataMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream.Caches Caches()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream.DebugTraceInfoStack DebugTraceInfoStack()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectOutputStream.HandleTable int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream.HandleTable void growEntries()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectOutputStream.PutField PutField()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectOutputStream.ReplaceTable void grow()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectStreamClass ObjectStreamClass()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectStreamClass boolean hasBlockExternalData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean hasReadObjectMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean hasReadObjectNoDataMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean hasReadResolveMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean hasWriteObjectData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean hasWriteObjectMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean hasWriteReplaceMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean isEnum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean isExternalizable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean isInstantiable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean isProxy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass boolean isSerializable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass int getNumObjFields()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass int getPrimDataSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass java.io.ObjectStreamClass getLocalDesc()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass java.io.ObjectStreamClass getSuperDesc()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass java.lang.ClassNotFoundException getResolveException()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass.Caches Caches()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass.ClassDataSlot ClassDataSlot(java.io.ObjectStreamClass, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectStreamClass.EntryFuture java.lang.Thread getOwner()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass.ExceptionInfo ExceptionInfo(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectStreamClass.ExceptionInfo java.io.InvalidClassException newInvalidClassException()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass.FieldReflector java.io.ObjectStreamField[] getFields()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass.FieldReflectorKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamClass.WeakClassKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamException ObjectStreamException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectStreamException ObjectStreamException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.ObjectStreamField boolean isUnshared()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamField int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamField java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamField java.lang.String getSignature()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamField java.lang.reflect.Field getField()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.ObjectStreamField void setOffset(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.OptionalDataException OptionalDataException(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.OptionalDataException OptionalDataException(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.OutputStream OutputStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.OutputStream void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.OutputStream void flush()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PipedInputStream PipedInputStream()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PipedInputStream PipedInputStream(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PipedInputStream int available()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PipedInputStream void close()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PipedInputStream void initPipe(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PipedOutputStream PipedOutputStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PipedReader PipedReader()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PipedReader PipedReader(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PipedReader void close()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PipedReader void initPipe(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PipedWriter PipedWriter()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PrintStream T requireNonNull(T, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PrintStream void clearError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PrintStream void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PrintStream void setError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PrintWriter void clearError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PrintWriter void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PrintWriter void setError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PushbackInputStream PushbackInputStream(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PushbackInputStream PushbackInputStream(java.io.InputStream, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PushbackInputStream boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PushbackInputStream void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PushbackInputStream void mark(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PushbackInputStream void reset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PushbackReader PushbackReader(java.io.Reader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PushbackReader PushbackReader(java.io.Reader, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.PushbackReader boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PushbackReader void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PushbackReader void mark(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.PushbackReader void reset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.RandomAccessFile java.io.FileDescriptor getFD()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Reader Reader()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.Reader Reader(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.Reader boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Reader boolean ready()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Reader void mark(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Reader void reset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.SerialCallbackContext java.io.ObjectStreamClass getDesc()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.SerialCallbackContext void setUsed()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StreamCorruptedException StreamCorruptedException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StreamCorruptedException StreamCorruptedException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StreamTokenizer int lineno()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.StreamTokenizer void eolIsSignificant(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StreamTokenizer void lowerCaseMode(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StreamTokenizer void pushBack()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StreamTokenizer void slashSlashComments(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StreamTokenizer void slashStarComments(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringBufferInputStream StringBufferInputStream(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringBufferInputStream int available()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.StringBufferInputStream long skip(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringBufferInputStream void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringReader StringReader(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringReader boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.StringReader boolean ready()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.StringReader long skip(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringReader void close()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringReader void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.StringReader void mark(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringReader void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringWriter StringWriter()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringWriter StringWriter(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.StringWriter java.lang.StringBuffer getBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.StringWriter void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.StringWriter void flush()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.SyncFailedException SyncFailedException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.UTFDataFormatException UTFDataFormatException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.UTFDataFormatException UTFDataFormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.UnixFileSystem char getPathSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.UnixFileSystem char getSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.UnixFileSystem java.lang.String getDefaultParent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.UnsupportedEncodingException UnsupportedEncodingException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.UnsupportedEncodingException UnsupportedEncodingException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.WriteAbortedException java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.io.Writer Writer()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.io.Writer Writer(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
