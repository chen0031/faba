<root>
  <item name="java.nio.file.AccessDeniedException AccessDeniedException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.AccessDeniedException AccessDeniedException(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.AccessMode AccessMode(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.AtomicMoveNotSupportedException AtomicMoveNotSupportedException(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.ClosedDirectoryStreamException ClosedDirectoryStreamException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.ClosedFileSystemException ClosedFileSystemException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.ClosedWatchServiceException ClosedWatchServiceException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.CopyMoveHelper CopyMoveHelper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.CopyMoveHelper java.nio.file.CopyOption[] convertMoveToCopyOptions(java.nio.file.CopyOption...)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.CopyMoveHelper.CopyOptions CopyOptions()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.DirectoryNotEmptyException DirectoryNotEmptyException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileAlreadyExistsException FileAlreadyExistsException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileAlreadyExistsException FileAlreadyExistsException(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileStore FileStore()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileSystem FileSystem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileSystemAlreadyExistsException FileSystemAlreadyExistsException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileSystemAlreadyExistsException FileSystemAlreadyExistsException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileSystemException FileSystemException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileSystemException FileSystemException(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileSystemException java.lang.String getFile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileSystemException java.lang.String getOtherFile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileSystemLoopException FileSystemLoopException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileSystemNotFoundException FileSystemNotFoundException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileSystemNotFoundException FileSystemNotFoundException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileSystems FileSystems()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileSystems java.nio.file.FileSystem getDefault()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileSystems.DefaultFileSystemHolder DefaultFileSystemHolder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileTreeWalker.AncestorDirectory AncestorDirectory(java.nio.file.Path, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileTreeWalker.AncestorDirectory java.lang.Object fileKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileTreeWalker.AncestorDirectory java.nio.file.Path file()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.FileVisitOption FileVisitOption(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.FileVisitResult FileVisitResult(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.Files Files()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.Files.AcceptAllFilter AcceptAllFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.Files.AcceptAllFilter boolean accept(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.Files.FileTypeDetectors FileTypeDetectors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.InvalidPathException InvalidPathException(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.InvalidPathException InvalidPathException(java.lang.String, java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.InvalidPathException int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.InvalidPathException java.lang.String getInput()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.LinkOption LinkOption(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.NoSuchFileException NoSuchFileException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.NoSuchFileException NoSuchFileException(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.NotDirectoryException NotDirectoryException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.NotLinkException NotLinkException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.NotLinkException NotLinkException(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.Paths Paths()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.ProviderMismatchException ProviderMismatchException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.ProviderMismatchException ProviderMismatchException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.ProviderNotFoundException ProviderNotFoundException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.ProviderNotFoundException ProviderNotFoundException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.ReadOnlyFileSystemException ReadOnlyFileSystemException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.SimpleFileVisitor SimpleFileVisitor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.SimpleFileVisitor java.nio.file.FileVisitResult postVisitDirectory(T, java.io.IOException)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.SimpleFileVisitor java.nio.file.FileVisitResult preVisitDirectory(T, java.nio.file.attribute.BasicFileAttributes)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.SimpleFileVisitor java.nio.file.FileVisitResult visitFile(T, java.nio.file.attribute.BasicFileAttributes)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.SimpleFileVisitor java.nio.file.FileVisitResult visitFileFailed(T, java.io.IOException)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.StandardCopyOption StandardCopyOption(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.StandardOpenOption StandardOpenOption(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.StandardWatchEventKinds StandardWatchEventKinds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.StandardWatchEventKinds.StdWatchEventKind StdWatchEventKind(java.lang.String, java.lang.Class&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.file.StandardWatchEventKinds.StdWatchEventKind java.lang.Class&lt;T&gt; type()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.StandardWatchEventKinds.StdWatchEventKind java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.StandardWatchEventKinds.StdWatchEventKind java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.TempFileHelper TempFileHelper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.file.TempFileHelper.PosixPermissions PosixPermissions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
