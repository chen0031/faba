<root>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel AbstractInterruptibleChannel()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractInterruptibleChannel boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel AbstractSelectableChannel(java.nio.channels.spi.SelectorProvider)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel boolean isBlocking()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel boolean isRegistered()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel java.lang.Object blockingLock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectableChannel java.nio.channels.spi.SelectorProvider provider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectionKey AbstractSelectionKey()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectionKey boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractSelectionKey void invalidate()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector java.nio.channels.spi.SelectorProvider provider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AbstractSelector java.util.Set&lt;java.nio.channels.SelectionKey&gt; cancelledKeys()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AsynchronousChannelProvider AsynchronousChannelProvider(java.lang.Void)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AsynchronousChannelProvider java.nio.channels.spi.AsynchronousChannelProvider provider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.AsynchronousChannelProvider.ProviderHolder ProviderHolder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.nio.channels.spi.SelectorProvider java.nio.channels.Channel inheritedChannel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
