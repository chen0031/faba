<root>
  <item name="java.util.concurrent.atomic.AtomicBoolean AtomicBoolean()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicBoolean AtomicBoolean(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicBoolean boolean get()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicBoolean java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicBoolean void set(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger AtomicInteger()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger AtomicInteger(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger double doubleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger float floatValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger int get()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger int intValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger long longValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicInteger void set(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicIntegerArray AtomicIntegerArray(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicIntegerArray int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicIntegerArray long byteOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicIntegerFieldUpdater AtomicIntegerFieldUpdater()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong AtomicLong()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong AtomicLong(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong double doubleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong float floatValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong int intValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong long get()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong long longValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLong void set(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLongArray AtomicLongArray(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLongArray int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLongArray long byteOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicLongFieldUpdater AtomicLongFieldUpdater()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicMarkableReference AtomicMarkableReference(V, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicMarkableReference V getReference()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicMarkableReference boolean isMarked()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicMarkableReference void set(V, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicMarkableReference.Pair Pair(T, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicMarkableReference.Pair java.util.concurrent.atomic.AtomicMarkableReference.Pair&lt;T&gt; of(T, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicReference AtomicReference()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicReference AtomicReference(V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicReference V get()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicReference void set(V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicReferenceArray AtomicReferenceArray(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicReferenceArray int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicReferenceArray long byteOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicReferenceFieldUpdater AtomicReferenceFieldUpdater()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicStampedReference AtomicStampedReference(V, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicStampedReference V getReference()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicStampedReference int getStamp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.atomic.AtomicStampedReference void set(V, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicStampedReference.Pair Pair(T, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.concurrent.atomic.AtomicStampedReference.Pair java.util.concurrent.atomic.AtomicStampedReference.Pair&lt;T&gt; of(T, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
