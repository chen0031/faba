<root>
  <item name="java.util.AbstractCollection AbstractCollection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractCollection boolean add(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractCollection int hugeCapacity(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractList AbstractList()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractList E remove(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractList E set(int, E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractList java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractList void add(int, E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractList.Itr Itr(java.util.AbstractList)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractList.Itr void checkForComodification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractList.ListItr ListItr(java.util.AbstractList, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractList.ListItr boolean hasPrevious()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractList.ListItr int nextIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractList.ListItr int previousIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractMap AbstractMap()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractMap V put(K, V)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractMap.SimpleEntry K getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractMap.SimpleEntry SimpleEntry(K, V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractMap.SimpleEntry V getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractMap.SimpleEntry V setValue(V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractMap.SimpleImmutableEntry K getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractMap.SimpleImmutableEntry SimpleImmutableEntry(K, V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractMap.SimpleImmutableEntry V getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractMap.SimpleImmutableEntry V setValue(V)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractQueue AbstractQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.AbstractSequentialList AbstractSequentialList()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.AbstractSet AbstractSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque ArrayDeque()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayDeque ArrayDeque(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayDeque E getFirst()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque E getLast()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque E peekFirst()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque E peekLast()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque java.util.Iterator&lt;E&gt; descendingIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque void allocateElements(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayDeque void checkInvariants()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque void doubleCapacity()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayDeque.DeqIterator DeqIterator(java.util.ArrayDeque)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayDeque.DeqIterator E next()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayDeque.DeqIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayDeque.DescendingIterator DescendingIterator(java.util.ArrayDeque)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayDeque.DescendingIterator E next()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayDeque.DescendingIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList ArrayList()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayList E elementData(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList int hugeCapacity(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList java.util.ListIterator&lt;E&gt; listIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList.Itr E next()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayList.Itr Itr(java.util.ArrayList)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayList.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList.Itr void checkForComodification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList.ListItr ListItr(java.util.ArrayList, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayList.ListItr boolean hasPrevious()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList.ListItr int nextIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList.ListItr int previousIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList.SubList SubList(java.util.AbstractList&lt;E&gt;, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ArrayList.SubList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ArrayList.SubList void checkForComodification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays Arrays()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays boolean equals(boolean[], boolean[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays boolean equals(byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays boolean equals(char[], char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays boolean equals(int[], int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays boolean equals(long[], long[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays boolean equals(short[], short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays boolean[] copyOf(boolean[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays byte[] copyOf(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays char[] copyOf(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays double[] copyOf(double[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays float[] copyOf(float[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(byte[], byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(char[], char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(long[], long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch(short[], short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch0(byte[], int, int, byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch0(char[], int, int, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch0(int[], int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch0(long[], int, int, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int binarySearch0(short[], int, int, short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int hashCode(boolean[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int hashCode(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int hashCode(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int hashCode(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int hashCode(long[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int hashCode(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays int[] copyOf(int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays java.util.List&lt;T&gt; asList(T...)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays long[] copyOf(long[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays short[] copyOf(short[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays void fill(boolean[], boolean)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void fill(byte[], byte)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void fill(char[], char)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void fill(double[], double)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void fill(float[], float)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void fill(int[], int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void fill(java.lang.Object[], java.lang.Object)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void fill(long[], long)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void fill(short[], short)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void sort(byte[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays void swap(java.lang.Object[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Arrays.ArrayList ArrayList(E[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Arrays.ArrayList E get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays.ArrayList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Arrays.LegacyMergeSort LegacyMergeSort()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet BitSet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.BitSet BitSet(long[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.BitSet boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet boolean intersects(java.util.BitSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet int cardinality()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet int wordIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet java.util.BitSet valueOf(long[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet long[] toLongArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet void checkInvariants()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.BitSet void ensureCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.BitSet void expandTo(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.BitSet void initWords(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.BitSet void recalculateWordsInUse()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.BitSet void trimToSize()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Calendar boolean checkDisplayNameParams(int, int, int, int, java.util.Locale, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar boolean isExternallySet(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar boolean isFieldSet(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar boolean isFullyNormalized()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar boolean isLenient()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar boolean isPartiallyNormalized()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar boolean isSet(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar boolean isWeekDateSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar int aggregateStamp(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar int getFirstDayOfWeek()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar int getMinimalDaysInFirstWeek()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar int getSetStateFields()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar int getWeekYear()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar int getWeeksInWeekYear()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar int internalGet(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar int selectFields()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar java.lang.String getFieldName(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar java.util.TimeZone getZone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar void setLenient(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Calendar void setTimeZone(java.util.TimeZone)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Calendar void setUnnormalized()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Calendar void setWeekDate(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Calendar void setZoneShared(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Calendar.CalendarAccessControlContext CalendarAccessControlContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections Collections()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Collection&lt;E&gt; checkedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Collection&lt;T&gt; synchronizedCollection(java.util.Collection&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Collection&lt;T&gt; synchronizedCollection(java.util.Collection&lt;T&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Collection&lt;T&gt; unmodifiableCollection(java.util.Collection&lt;? extends T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Comparator&lt;T&gt; reverseOrder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Comparator&lt;T&gt; reverseOrder(java.util.Comparator&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Enumeration&lt;T&gt; emptyEnumeration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Iterator&lt;E&gt; singletonIterator(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Iterator&lt;T&gt; emptyIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;E&gt; checkedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; emptyList()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; singletonList(T)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; synchronizedList(java.util.List&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; synchronizedList(java.util.List&lt;T&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.List&lt;T&gt; unmodifiableList(java.util.List&lt;? extends T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.ListIterator&lt;T&gt; emptyListIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; checkedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; emptyMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; singletonMap(K, V)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; synchronizedMap(java.util.Map&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Map&lt;K,V&gt; unmodifiableMap(java.util.Map&lt;? extends K,? extends V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Queue&lt;T&gt; asLifoQueue(java.util.Deque&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;E&gt; checkedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; emptySet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; singleton(T)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; synchronizedSet(java.util.Set&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; synchronizedSet(java.util.Set&lt;T&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.Set&lt;T&gt; unmodifiableSet(java.util.Set&lt;? extends T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; checkedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; synchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedMap&lt;K,V&gt; unmodifiableSortedMap(java.util.SortedMap&lt;K,? extends V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;E&gt; checkedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;T&gt; synchronizedSortedSet(java.util.SortedSet&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections java.util.SortedSet&lt;T&gt; unmodifiableSortedSet(java.util.SortedSet&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections void swap(java.lang.Object[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Collections.AsLIFOQueue AsLIFOQueue(java.util.Deque&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedCollection CheckedCollection(java.util.Collection&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedList CheckedList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedMap CheckedMap(java.util.Map&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedMap.CheckedEntrySet CheckedEntrySet(java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt;, java.lang.Class&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedMap.CheckedEntrySet boolean add(java.util.Map.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.CheckedMap.CheckedEntrySet boolean addAll(java.util.Collection&lt;? extends java.util.Map.Entry&lt;K,V&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.CheckedMap.CheckedEntrySet java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntry&lt;K,V,T&gt; checkedEntry(java.util.Map.Entry&lt;K,V&gt;, java.lang.Class&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.CheckedMap.CheckedEntrySet.CheckedEntry CheckedEntry(java.util.Map.Entry&lt;K,V&gt;, java.lang.Class&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedRandomAccessList CheckedRandomAccessList(java.util.List&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedSet CheckedSet(java.util.Set&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedSortedMap CheckedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Class&lt;K&gt;, java.lang.Class&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CheckedSortedSet CheckedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Class&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CopiesList CopiesList(int, E)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.CopiesList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyEnumeration E nextElement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyEnumeration EmptyEnumeration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyEnumeration boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyIterator E next()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyIterator EmptyIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyIterator void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyList EmptyList()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.EmptyList T[] toArray(T[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Collections.EmptyList boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyList boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyList int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyList java.lang.Object readResolve()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyList java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyList java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyList java.util.ListIterator&lt;E&gt; listIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyListIterator E previous()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyListIterator EmptyListIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyListIterator boolean hasPrevious()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyListIterator int nextIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyListIterator int previousIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyListIterator void add(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyListIterator void set(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap EmptyMap()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.EmptyMap V get(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap boolean containsKey(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap boolean containsValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap java.lang.Object readResolve()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptyMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptySet EmptySet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptySet T[] toArray(T[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Collections.EmptySet boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptySet boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptySet java.lang.Object readResolve()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptySet java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.EmptySet java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.ReverseComparator ReverseComparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.ReverseComparator java.lang.Object readResolve()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.ReverseComparator2 ReverseComparator2(java.util.Comparator&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SingletonList SingletonList(E)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SingletonList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.SingletonList java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.SingletonMap SingletonMap(K, V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SingletonMap boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.SingletonMap int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.SingletonMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SingletonMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SingletonMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SingletonSet SingletonSet(E)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SingletonSet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.SingletonSet java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.SynchronizedCollection SynchronizedCollection(java.util.Collection&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedCollection SynchronizedCollection(java.util.Collection&lt;E&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedList SynchronizedList(java.util.List&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedList SynchronizedList(java.util.List&lt;E&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedList java.lang.Object readResolve()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.SynchronizedMap SynchronizedMap(java.util.Map&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedMap SynchronizedMap(java.util.Map&lt;K,V&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedRandomAccessList SynchronizedRandomAccessList(java.util.List&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedRandomAccessList SynchronizedRandomAccessList(java.util.List&lt;E&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedRandomAccessList java.lang.Object writeReplace()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.SynchronizedSet SynchronizedSet(java.util.Set&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedSet SynchronizedSet(java.util.Set&lt;E&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedSortedMap SynchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedSortedMap SynchronizedSortedMap(java.util.SortedMap&lt;K,V&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedSortedSet SynchronizedSortedSet(java.util.SortedSet&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.SynchronizedSortedSet SynchronizedSortedSet(java.util.SortedSet&lt;E&gt;, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableCollection UnmodifiableCollection(java.util.Collection&lt;? extends E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableCollection boolean add(E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableCollection boolean addAll(java.util.Collection&lt;? extends E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableCollection boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableCollection boolean removeAll(java.util.Collection&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableCollection boolean retainAll(java.util.Collection&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableCollection void clear()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableList E remove(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableList E set(int, E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableList UnmodifiableList(java.util.List&lt;? extends E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableList boolean addAll(int, java.util.Collection&lt;? extends E&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableList java.lang.Object readResolve()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableList void add(int, E)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableMap UnmodifiableMap(java.util.Map&lt;? extends K,? extends V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableMap V put(K, V)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableMap V remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableMap void clear()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet UnmodifiableEntrySet(java.util.Set&lt;? extends java.util.Map.Entry&lt;? extends K,? extends V&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry UnmodifiableEntry(java.util.Map.Entry&lt;? extends K,? extends V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry V setValue(V)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableRandomAccessList UnmodifiableRandomAccessList(java.util.List&lt;? extends E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableRandomAccessList java.lang.Object writeReplace()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Collections.UnmodifiableSet UnmodifiableSet(java.util.Set&lt;? extends E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableSortedMap UnmodifiableSortedMap(java.util.SortedMap&lt;K,? extends V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Collections.UnmodifiableSortedSet UnmodifiableSortedSet(java.util.SortedSet&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ComparableTimSort ComparableTimSort(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ComparableTimSort int minRunLength(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ComparableTimSort java.lang.Object[] ensureCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ComparableTimSort void reverseRange(java.lang.Object[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.ConcurrentModificationException ConcurrentModificationException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ConcurrentModificationException ConcurrentModificationException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ConcurrentModificationException ConcurrentModificationException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Currency Currency(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Currency int getDefaultFractionDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Currency int getMainTableEntry(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Currency int getNumericCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Currency java.lang.String getCurrencyCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Currency java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Currency.CurrencyNameGetter CurrencyNameGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Date Date(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Date void setTime(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Dictionary Dictionary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.DualPivotQuicksort DualPivotQuicksort()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.DualPivotQuicksort void sort(byte[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.DualPivotQuicksort void sort(byte[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.DuplicateFormatFlagsException DuplicateFormatFlagsException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.DuplicateFormatFlagsException java.lang.String getFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EmptyStackException EmptyStackException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap V unmaskNull(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap java.lang.Object maskNull(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.EntryIterator EntryIterator(java.util.EnumMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.EntryIterator.Entry Entry(java.util.EnumMap.EntryIterator, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.EntryIterator.Entry K getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.EntryIterator.Entry V getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.EntryIterator.Entry void checkIndexForEntryUse()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.EntrySet EntrySet(java.util.EnumMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.EntrySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.EntrySet java.lang.Object[] fillEntryArray(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.EnumMap.EntrySet java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.EnumMapIterator EnumMapIterator(java.util.EnumMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.EnumMapIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.EnumMapIterator void checkLastReturnedIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.KeyIterator KeyIterator(java.util.EnumMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.KeySet KeySet(java.util.EnumMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.KeySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.KeySet java.util.Iterator&lt;K&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.ValueIterator ValueIterator(java.util.EnumMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.Values Values(java.util.EnumMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumMap.Values int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumMap.Values java.util.Iterator&lt;V&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EnumSet EnumSet(java.lang.Class&lt;E&gt;, java.lang.Enum[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EnumSet void readObject(java.io.ObjectInputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EventListenerProxy EventListenerProxy(T)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EventListenerProxy T getListener()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.EventObject EventObject(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.EventObject java.lang.Object getSource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.FormatFlagsConversionMismatchException FormatFlagsConversionMismatchException(java.lang.String, char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.FormatFlagsConversionMismatchException char getConversion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.FormatFlagsConversionMismatchException java.lang.String getFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.FormattableFlags FormattableFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter java.io.IOException ioException()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter java.lang.Appendable nonNullAppendable(java.lang.Appendable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter java.lang.Appendable out()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter java.util.Locale locale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.BigDecimalLayoutForm BigDecimalLayoutForm(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Formatter.Conversion Conversion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Conversion boolean isCharacter(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Conversion boolean isFloat(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Conversion boolean isGeneral(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Conversion boolean isInteger(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Conversion boolean isText(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Conversion boolean isValid(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.DateTime DateTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.DateTime boolean isValid(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FixedString FixedString(java.util.Formatter, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Formatter.FixedString int index()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FixedString java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Flags Flags(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Formatter.Flags int valueOf()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Flags java.util.Formatter.Flags dup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.Flags java.util.Formatter.Flags parse(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier char conversion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier char[] addDot(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier char[] addZeros(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier char[] exponent(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier char[] mantissa(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier char[] trailingZeros(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier int index()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier int precision()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier int width()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier java.util.Formatter.Flags flags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier.BigDecimalLayout boolean hasDot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Formatter.FormatSpecifier.BigDecimalLayout int scale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.FormatterClosedException FormatterClosedException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.GregorianCalendar boolean isCutoverYear(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.GregorianCalendar boolean isWeekDateSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.GregorianCalendar int getMinimum(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.GregorianCalendar int getRolledValue(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.GregorianCalendar java.util.Date getGregorianChange()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap V getForNullKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap boolean containsNullValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap float loadFactor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap int capacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap int indexFor(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap int roundUpToPowerOf2(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap java.util.Iterator&lt;K&gt; newKeyIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap java.util.Iterator&lt;V&gt; newValueIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; newEntryIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet0()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap void init()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.Entry Entry(int, K, V, java.util.HashMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.Entry K getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.Entry V getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.Entry V setValue(V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.Entry void recordAccess(java.util.HashMap&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.Entry void recordRemoval(java.util.HashMap&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.EntryIterator EntryIterator(java.util.HashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.EntrySet EntrySet(java.util.HashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.EntrySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.HashIterator HashIterator(java.util.HashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.HashIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.HashIterator java.util.HashMap.Entry&lt;K,V&gt; nextEntry()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.Holder Holder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.KeyIterator KeyIterator(java.util.HashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.KeySet KeySet(java.util.HashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.KeySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.HashMap.ValueIterator ValueIterator(java.util.HashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.Values Values(java.util.HashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.HashMap.Values int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable java.util.Enumeration&lt;K&gt; keys()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable java.util.Enumeration&lt;T&gt; getEnumeration(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable java.util.Enumeration&lt;V&gt; elements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable java.util.Iterator&lt;T&gt; getIterator(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.Entry Entry(int, K, V, java.util.Hashtable.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.Entry K getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable.Entry V getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable.Entry V setValue(V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.EntrySet EntrySet(java.util.Hashtable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.EntrySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable.Enumerator Enumerator(java.util.Hashtable, int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.Enumerator T nextElement()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.Enumerator boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.Holder Holder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable.KeySet KeySet(java.util.Hashtable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.KeySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable.KeySet java.util.Iterator&lt;K&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable.ValueCollection ValueCollection(java.util.Hashtable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Hashtable.ValueCollection int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Hashtable.ValueCollection java.util.Iterator&lt;V&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap IdentityHashMap()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap boolean containsValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap int capacity(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap int nextKeyIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap java.lang.Object maskNull(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap java.lang.Object unmaskNull(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap void init(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.EntryIterator EntryIterator(java.util.IdentityHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.EntryIterator.Entry Entry(java.util.IdentityHashMap.EntryIterator, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.EntryIterator.Entry K getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap.EntryIterator.Entry V getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap.EntryIterator.Entry void checkIndexForEntryUse()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap.EntrySet EntrySet(java.util.IdentityHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.EntrySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap.IdentityHashMapIterator IdentityHashMapIterator(java.util.IdentityHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.IdentityHashMapIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.KeyIterator KeyIterator(java.util.IdentityHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.KeySet KeySet(java.util.IdentityHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.KeySet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap.KeySet java.util.Iterator&lt;K&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap.ValueIterator ValueIterator(java.util.IdentityHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.Values Values(java.util.IdentityHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IdentityHashMap.Values int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IdentityHashMap.Values java.util.Iterator&lt;V&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllegalFormatCodePointException IllegalFormatCodePointException(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IllegalFormatCodePointException int getCodePoint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllegalFormatConversionException IllegalFormatConversionException(char, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IllegalFormatConversionException char getConversion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllegalFormatConversionException java.lang.Class&lt;?&gt; getArgumentClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllegalFormatException IllegalFormatException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IllegalFormatFlagsException IllegalFormatFlagsException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IllegalFormatFlagsException java.lang.String getFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllegalFormatPrecisionException IllegalFormatPrecisionException(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IllegalFormatPrecisionException int getPrecision()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllegalFormatPrecisionException java.lang.String getMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllegalFormatWidthException IllegalFormatWidthException(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IllegalFormatWidthException int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllegalFormatWidthException java.lang.String getMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.IllformedLocaleException IllformedLocaleException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IllformedLocaleException IllformedLocaleException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.IllformedLocaleException int getErrorIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.InputMismatchException InputMismatchException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.InputMismatchException InputMismatchException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.InvalidPropertiesFormatException InvalidPropertiesFormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.InvalidPropertiesFormatException void readObject(java.io.ObjectInputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.InvalidPropertiesFormatException void writeObject(java.io.ObjectOutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.JapaneseImperialCalendar int getGreatestMinimum(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.JapaneseImperialCalendar int getMinimum(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.JapaneseImperialCalendar int getRolledValue(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.JapaneseImperialCalendar int monthLength(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.JumboEnumSet JumboEnumSet(java.lang.Class&lt;E&gt;, java.lang.Enum[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.JumboEnumSet boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.JumboEnumSet boolean recalculateSize()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.JumboEnumSet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.JumboEnumSet java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.JumboEnumSet.EnumSetIterator EnumSetIterator(java.util.JumboEnumSet)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.JumboEnumSet.EnumSetIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.LinkedHashMap boolean removeEldestEntry(java.util.Map.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedHashMap java.util.Iterator&lt;K&gt; newKeyIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedHashMap java.util.Iterator&lt;V&gt; newValueIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedHashMap java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; newEntryIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedHashMap.Entry Entry(int, K, V, java.util.HashMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.LinkedHashMap.EntryIterator EntryIterator(java.util.LinkedHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.LinkedHashMap.KeyIterator KeyIterator(java.util.LinkedHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.LinkedHashMap.LinkedHashIterator LinkedHashIterator(java.util.LinkedHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.LinkedHashMap.LinkedHashIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedHashMap.LinkedHashIterator java.util.LinkedHashMap.Entry&lt;K,V&gt; nextEntry()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.LinkedHashMap.ValueIterator ValueIterator(java.util.LinkedHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.LinkedList E getFirst()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList E getLast()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList E peek()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList E peekFirst()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList E peekLast()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList LinkedList()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.LinkedList boolean isElementIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList boolean isPositionIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList java.util.LinkedList.Node&lt;E&gt; node(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList.ListItr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList.ListItr boolean hasPrevious()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList.ListItr int nextIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList.ListItr int previousIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList.ListItr void checkForComodification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LinkedList.Node Node(java.util.LinkedList.Node&lt;E&gt;, E, java.util.LinkedList.Node&lt;E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ListResourceBundle ListResourceBundle()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Locale Locale(sun.util.locale.BaseLocale, sun.util.locale.LocaleExtensions)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Locale java.lang.String getCountry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Locale java.lang.String getLanguage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Locale java.lang.String getScript()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Locale java.lang.String getVariant()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Locale sun.util.locale.BaseLocale getBaseLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Locale sun.util.locale.LocaleExtensions getLocaleExtensions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Locale.Builder Builder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Locale.Cache java.util.Locale createObject(java.util.Locale.LocaleKey)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Locale.Category Category(java.lang.String, java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Locale.LocaleKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Locale.LocaleNameGetter LocaleNameGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.LocaleISOData LocaleISOData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.MissingFormatArgumentException MissingFormatArgumentException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.MissingFormatArgumentException java.lang.String getFormatSpecifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.MissingFormatWidthException MissingFormatWidthException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.MissingFormatWidthException java.lang.String getFormatSpecifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.MissingFormatWidthException java.lang.String getMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.MissingResourceException MissingResourceException(java.lang.String, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.MissingResourceException MissingResourceException(java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.MissingResourceException java.lang.String getClassName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.MissingResourceException java.lang.String getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.NoSuchElementException NoSuchElementException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.NoSuchElementException NoSuchElementException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Objects T requireNonNull(T)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Objects T requireNonNull(T, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Observable boolean hasChanged()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Observable void clearChanged()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Observable void setChanged()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.PriorityQueue E peek()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.PriorityQueue PriorityQueue()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.PriorityQueue PriorityQueue(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.PriorityQueue PriorityQueue(int, java.util.Comparator&lt;? super E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.PriorityQueue int hugeCapacity(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.PriorityQueue int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.PriorityQueue java.util.Comparator&lt;? super E&gt; comparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.PriorityQueue java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.PriorityQueue.Itr Itr(java.util.PriorityQueue)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Properties char toHex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Properties.LineReader LineReader(java.util.Properties, java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Properties.LineReader LineReader(java.util.Properties, java.io.Reader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.PropertyPermission int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Random long initialScramble(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.RegularEnumSet RegularEnumSet(java.lang.Class&lt;E&gt;, java.lang.Enum[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.RegularEnumSet boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.RegularEnumSet int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.RegularEnumSet java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.RegularEnumSet void addAll()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.RegularEnumSet void addRange(E, E)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.RegularEnumSet void clear()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.RegularEnumSet void complement()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.RegularEnumSet.EnumSetIterator E next()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.RegularEnumSet.EnumSetIterator EnumSetIterator(java.util.RegularEnumSet)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.RegularEnumSet.EnumSetIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle ResourceBundle()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ResourceBundle boolean isValidBundle(java.util.ResourceBundle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle void setParent(java.util.ResourceBundle)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ResourceBundle.BundleReference BundleReference(java.util.ResourceBundle, java.lang.ref.ReferenceQueue, java.util.ResourceBundle.CacheKey)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ResourceBundle.BundleReference java.util.ResourceBundle.CacheKey getCacheKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.CacheKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.CacheKey java.lang.String getFormat()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.CacheKey java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.CacheKey java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.CacheKey java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.CacheKey void setCause(java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ResourceBundle.CacheKey void setFormat(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ResourceBundle.Control Control()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.Control java.util.List&lt;java.lang.String&gt; getFormats(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.Control long getTimeToLive(java.lang.String, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.LoaderReference LoaderReference(java.lang.ClassLoader, java.lang.ref.ReferenceQueue, java.util.ResourceBundle.CacheKey)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ResourceBundle.LoaderReference java.util.ResourceBundle.CacheKey getCacheKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.NoFallbackControl NoFallbackControl(java.util.List&lt;java.lang.String&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ResourceBundle.NoFallbackControl java.util.Locale getFallbackLocale(java.lang.String, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.ResourceBundle.SingleFormatControl SingleFormatControl(java.util.List&lt;java.lang.String&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ResourceBundle.SingleFormatControl java.util.List&lt;java.lang.String&gt; getFormats(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Scanner boolean revertState(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner int radix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Scanner java.io.IOException ioException()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Scanner java.lang.String getCachedResult()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner java.util.Locale locale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Scanner java.util.Scanner useDelimiter(java.util.regex.Pattern)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner java.util.regex.Pattern delimiter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Scanner void cacheResult(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner void clearCaches()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner void ensureOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Scanner void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Scanner void revertState()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner void saveState()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner void setRadix(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner void translateSavedIndexes(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Scanner void useTypeCache()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ServiceConfigurationError ServiceConfigurationError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ServiceConfigurationError ServiceConfigurationError(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ServiceLoader.LazyIterator LazyIterator(java.lang.Class&lt;S&gt;, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.ServiceLoader.LazyIterator void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SimpleTimeZone boolean hasSameRules(java.util.TimeZone)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SimpleTimeZone boolean useDaylightTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SimpleTimeZone byte[] packRules()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SimpleTimeZone int getDSTSavings()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SimpleTimeZone int getRawOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SimpleTimeZone int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SimpleTimeZone int[] packTimes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SimpleTimeZone void invalidateCache()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.SimpleTimeZone void makeRulesCompatible()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.SimpleTimeZone void setRawOffset(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.SimpleTimeZone void setStartYear(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.SimpleTimeZone void unpackRules(byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.SimpleTimeZone void unpackTimes(int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.StringTokenizer boolean isDelimiter(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SubList int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.SubList void checkForComodification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TaskQueue TaskQueue()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TaskQueue boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TaskQueue int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TaskQueue java.util.TimerTask get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TaskQueue java.util.TimerTask getMin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TimSort T[] ensureCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TimSort TimSort(T[], java.util.Comparator&lt;? super T&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TimSort int minRunLength(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TimSort void reverseRange(java.lang.Object[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.TimeZone TimeZone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TimeZone java.lang.String getID()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TimeZone void setID(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TimeZone.DisplayNames DisplayNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TimerTask TimerTask()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TimerTask boolean cancel()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TimerTask long scheduledExecutionTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TooManyListenersException TooManyListenersException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TooManyListenersException TooManyListenersException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap K firstKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap K key(java.util.TreeMap.Entry&lt;K,?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap K keyOrNull(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap K lastKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap TreeMap()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap TreeMap(java.util.Comparator&lt;? super K&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap boolean colorOf(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap int computeRedLevel(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap java.util.Comparator&lt;? super K&gt; comparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.Iterator&lt;K&gt; descendingKeyIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.Iterator&lt;K&gt; keyIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.NavigableSet&lt;K&gt; navigableKeySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getFirstEntry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; getLastEntry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; leftOf(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; parentOf(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; predecessor(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; rightOf(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap java.util.TreeMap.Entry&lt;K,V&gt; successor(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap void clear()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap void setColor(java.util.TreeMap.Entry&lt;K,V&gt;, boolean)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.TreeMap.AscendingSubMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.AscendingSubMap.AscendingEntrySetView AscendingEntrySetView(java.util.TreeMap.AscendingSubMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.DescendingKeyIterator DescendingKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.DescendingSubMap java.util.Comparator&lt;? super K&gt; comparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.DescendingSubMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.DescendingSubMap.DescendingEntrySetView DescendingEntrySetView(java.util.TreeMap.DescendingSubMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.Entry Entry(K, V, java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.Entry K getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.Entry V getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.Entry V setValue(V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.EntryIterator EntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.EntrySet EntrySet(java.util.TreeMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.KeyIterator KeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.KeySet KeySet(java.util.NavigableMap&lt;E,java.lang.Object&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap java.util.NavigableSet&lt;K&gt; navigableKeySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.DescendingSubMapEntryIterator DescendingSubMapEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator DescendingSubMapKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.EntrySetView EntrySetView(java.util.TreeMap.NavigableSubMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.SubMapEntryIterator SubMapEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.SubMapIterator SubMapIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.SubMapIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.SubMapIterator java.util.TreeMap.Entry&lt;K,V&gt; nextEntry()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.SubMapIterator java.util.TreeMap.Entry&lt;K,V&gt; prevEntry()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.NavigableSubMap.SubMapKeyIterator SubMapKeyIterator(java.util.TreeMap.Entry&lt;K,V&gt;, java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.PrivateEntryIterator PrivateEntryIterator(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.PrivateEntryIterator boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.PrivateEntryIterator java.util.TreeMap.Entry&lt;K,V&gt; nextEntry()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.PrivateEntryIterator java.util.TreeMap.Entry&lt;K,V&gt; prevEntry()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.SubMap K firstKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.SubMap K lastKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.SubMap SubMap(java.util.TreeMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.SubMap java.util.Comparator&lt;? super K&gt; comparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.SubMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; headMap(K)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; subMap(K, K)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.SubMap java.util.SortedMap&lt;K,V&gt; tailMap(K)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeMap.ValueIterator ValueIterator(java.util.TreeMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.Values Values(java.util.TreeMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeMap.Values java.util.Iterator&lt;V&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.TreeSet TreeSet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeSet TreeSet(java.util.Comparator&lt;? super E&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.TreeSet TreeSet(java.util.NavigableMap&lt;E,java.lang.Object&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.UUID UUID(long, long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.UUID int clockSequence()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID int compareTo(java.util.UUID)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID int variant()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID int version()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID long getLeastSignificantBits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID long getMostSignificantBits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID long node()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID long timestamp()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UUID.Holder Holder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UnknownFormatConversionException UnknownFormatConversionException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.UnknownFormatConversionException java.lang.String getConversion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.UnknownFormatFlagsException UnknownFormatFlagsException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.UnknownFormatFlagsException java.lang.String getFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector E elementData(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector int capacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector int hugeCapacity(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector java.util.Enumeration&lt;E&gt; elements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector java.util.Iterator&lt;E&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector java.util.ListIterator&lt;E&gt; listIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector void copyInto(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.util.Vector.Itr Itr(java.util.Vector)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Vector.Itr boolean hasNext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector.Itr void checkForComodification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector.ListItr ListItr(java.util.Vector, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.Vector.ListItr boolean hasPrevious()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector.ListItr int nextIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.Vector.ListItr int previousIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.WeakHashMap int indexFor(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.WeakHashMap java.lang.Object maskNull(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.WeakHashMap java.lang.Object unmaskNull(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.WeakHashMap java.util.Collection&lt;V&gt; values()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.WeakHashMap java.util.Set&lt;K&gt; keySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.WeakHashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.WeakHashMap java.util.WeakHashMap.Entry&lt;K,V&gt;[] newTable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.WeakHashMap.Entry Entry(java.lang.Object, V, java.lang.ref.ReferenceQueue&lt;java.lang.Object&gt;, int, java.util.WeakHashMap.Entry&lt;K,V&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.WeakHashMap.Entry V getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.WeakHashMap.Entry V setValue(V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.WeakHashMap.EntrySet EntrySet(java.util.WeakHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.WeakHashMap.Holder Holder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.WeakHashMap.KeySet KeySet(java.util.WeakHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.WeakHashMap.Values Values(java.util.WeakHashMap)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.util.XMLUtils XMLUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.XMLUtils.EH EH()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.XMLUtils.EH void error(org.xml.sax.SAXParseException)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.XMLUtils.EH void fatalError(org.xml.sax.SAXParseException)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.XMLUtils.EH void warning(org.xml.sax.SAXParseException)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.util.XMLUtils.Resolver Resolver()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
