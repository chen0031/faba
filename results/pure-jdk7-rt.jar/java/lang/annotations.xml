<root>
  <item name="java.lang.AbstractMethodError AbstractMethodError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AbstractMethodError AbstractMethodError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AbstractStringBuilder AbstractStringBuilder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.AbstractStringBuilder AbstractStringBuilder(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AbstractStringBuilder char[] getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.AbstractStringBuilder int capacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.AbstractStringBuilder int codePointCount(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.AbstractStringBuilder int indexOf(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.AbstractStringBuilder int lastIndexOf(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.AbstractStringBuilder int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.AbstractStringBuilder int offsetByCodePoints(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder reverse()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AbstractStringBuilder void expandCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AbstractStringBuilder void trimToSize()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ApplicationShutdownHooks ApplicationShutdownHooks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ArithmeticException ArithmeticException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ArithmeticException ArithmeticException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ArrayIndexOutOfBoundsException ArrayIndexOutOfBoundsException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ArrayIndexOutOfBoundsException ArrayIndexOutOfBoundsException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ArrayStoreException ArrayStoreException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ArrayStoreException ArrayStoreException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AssertionError AssertionError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AssertionError AssertionError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AssertionError AssertionError(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.AssertionStatusDirectives AssertionStatusDirectives()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Boolean Boolean(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Boolean boolean booleanValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Boolean boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Boolean int compare(boolean, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Boolean int compareTo(java.lang.Boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Boolean int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Boolean java.lang.Boolean valueOf(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Boolean java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Boolean java.lang.String toString(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.BootstrapMethodError BootstrapMethodError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.BootstrapMethodError BootstrapMethodError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.BootstrapMethodError BootstrapMethodError(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Byte Byte(byte)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Byte boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte byte byteValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte double doubleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte float floatValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte int compare(byte, byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte int compareTo(java.lang.Byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte int intValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte java.lang.Byte valueOf(byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte long longValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte short shortValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Byte.ByteCache ByteCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character Character(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Character boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isBmpCodePoint(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isHighSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isISOControl(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isISOControl(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isLowSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isSpace(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isSupplementaryCodePoint(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isSurrogatePair(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character boolean isValidCodePoint(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character char charValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character char forDigit(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character char highSurrogate(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character char lowSurrogate(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character char reverseBytes(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character char[] toChars(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int charCount(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int codePointAt(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int codePointAt(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int codePointAtImpl(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int codePointBefore(char[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int codePointBefore(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int codePointBeforeImpl(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int codePointCount(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int codePointCountImpl(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int compare(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int compareTo(java.lang.Character)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int offsetByCodePoints(char[], int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int offsetByCodePointsImpl(char[], int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character int toChars(int, char[], int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="java.lang.Character int toCodePoint(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character java.lang.Character valueOf(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character java.lang.String toString(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character void toSurrogates(int, char[], int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="java.lang.Character.CharacterCache CharacterCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character.Subset Subset(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Character.Subset boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character.Subset java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character.UnicodeBlock java.lang.Character.UnicodeBlock of(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character.UnicodeBlock java.lang.Character.UnicodeBlock of(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Character.UnicodeScript UnicodeScript(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.CharacterData CharacterData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData boolean isIdeographic(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData boolean isOtherAlphabetic(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData boolean isOtherLowercase(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData boolean isOtherUppercase(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData char[] toUpperCaseCharArray(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData java.lang.CharacterData of(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData00 CharacterData00()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData00 int findInCharMap(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData00 int getProperties(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData00 int getPropertiesEx(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData01 CharacterData01()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData01 int getProperties(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData01 int getPropertiesEx(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData02 CharacterData02()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData02 int getProperties(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData02 int getPropertiesEx(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData0E CharacterData0E()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData0E int getProperties(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterData0E int getPropertiesEx(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataLatin1 CharacterDataLatin1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataLatin1 char[] toUpperCaseCharArray(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataLatin1 int getProperties(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataLatin1 int getPropertiesEx(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse CharacterDataPrivateUse()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse boolean isIdentifierIgnorable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse boolean isJavaIdentifierPart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse boolean isJavaIdentifierStart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse boolean isMirrored(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse boolean isUnicodeIdentifierPart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse boolean isUnicodeIdentifierStart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse boolean isWhitespace(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse byte getDirectionality(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse int digit(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse int getNumericValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse int getProperties(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse int getType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse int toLowerCase(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse int toTitleCase(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataPrivateUse int toUpperCase(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined CharacterDataUndefined()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined boolean isIdentifierIgnorable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined boolean isJavaIdentifierPart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined boolean isJavaIdentifierStart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined boolean isMirrored(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined boolean isUnicodeIdentifierPart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined boolean isUnicodeIdentifierStart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined boolean isWhitespace(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined byte getDirectionality(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined int digit(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined int getNumericValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined int getProperties(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined int getType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined int toLowerCase(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined int toTitleCase(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterDataUndefined int toUpperCase(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CharacterName CharacterName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class Class(java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Class boolean arrayContentsEq(java.lang.Object[], java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class boolean isAsciiDigit(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class java.lang.ClassLoader getClassLoader0()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class sun.reflect.annotation.AnnotationType getAnnotationType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class void clearAnnotationCachesOnClassRedefinition()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Class.Atomic Atomic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.EnclosingMethodInfo EnclosingMethodInfo(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Class.EnclosingMethodInfo boolean isConstructor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.EnclosingMethodInfo boolean isMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.EnclosingMethodInfo boolean isPartial()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.EnclosingMethodInfo java.lang.Class&lt;?&gt; getEnclosingClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.EnclosingMethodInfo java.lang.String getDescriptor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.EnclosingMethodInfo java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.MethodArray MethodArray()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Class.MethodArray int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.MethodArray java.lang.reflect.Method get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.MethodArray java.lang.reflect.Method[] getArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Class.ReflectionData ReflectionData(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassCastException ClassCastException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassCastException ClassCastException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassCircularityError ClassCircularityError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassCircularityError ClassCircularityError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassFormatError ClassFormatError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassFormatError ClassFormatError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassLoader boolean isAncestor(java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassLoader java.lang.Class&lt;?&gt; findClass(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassLoader java.lang.ClassLoader getClassLoader(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassLoader java.lang.String findLibrary(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassLoader java.net.URL findResource(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassLoader java.util.Enumeration&lt;java.net.URL&gt; findResources(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassLoader sun.misc.URLClassPath getBootstrapClassPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassLoader.NativeLibrary NativeLibrary(java.lang.Class, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassLoader.ParallelLoaders ParallelLoaders()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassLoaderHelper ClassLoaderHelper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassNotFoundException ClassNotFoundException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassNotFoundException ClassNotFoundException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassNotFoundException java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassNotFoundException java.lang.Throwable getException()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue java.lang.ClassValue.Entry&lt;T&gt; castEntry(java.lang.ClassValue.Entry&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue java.lang.ClassValue.Entry&lt;T&gt; makeEntry(java.lang.ClassValue.Version&lt;T&gt;, T)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue java.lang.ClassValue.Version&lt;T&gt; version()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue void bumpVersion()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassValue.ClassValueMap java.lang.ClassValue.Entry&lt;?&gt; loadFromCache(java.lang.ClassValue.Entry&lt;?&gt;[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue.ClassValueMap java.lang.ClassValue.Entry&lt;?&gt;[] getCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue.ClassValueMap void sizeCache(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassValue.Entry Entry(java.lang.ClassValue.Version&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassValue.Entry Entry(java.lang.ClassValue.Version&lt;T&gt;, T)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassValue.Entry boolean isPromise()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue.Identity Identity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue.Version Version(java.lang.ClassValue&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ClassValue.Version java.lang.ClassValue.Entry&lt;T&gt; promise()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ClassValue.Version java.lang.ClassValue&lt;T&gt; classValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.CloneNotSupportedException CloneNotSupportedException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.CloneNotSupportedException CloneNotSupportedException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Compiler Compiler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ConditionalSpecialCasing ConditionalSpecialCasing()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ConditionalSpecialCasing boolean isSoftDotted(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ConditionalSpecialCasing.Entry Entry(int, char[], char[], java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ConditionalSpecialCasing.Entry char[] getLowerCase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ConditionalSpecialCasing.Entry char[] getUpperCase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ConditionalSpecialCasing.Entry int getCodePoint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ConditionalSpecialCasing.Entry int getCondition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ConditionalSpecialCasing.Entry java.lang.String getLanguage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double Double(double)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Double boolean isInfinite()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double boolean isInfinite(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double boolean isNaN()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double boolean isNaN(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double byte byteValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double double doubleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double float floatValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double int intValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double java.lang.Double valueOf(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double long longValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Double short shortValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Enum Enum(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Enum boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Enum int ordinal()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Enum java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Enum java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Enum java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Enum void finalize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Enum void readObject(java.io.ObjectInputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Enum void readObjectNoData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.EnumConstantNotPresentException java.lang.Class&lt;? extends java.lang.Enum&gt; enumType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.EnumConstantNotPresentException java.lang.String constantName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Error Error()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Error Error(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Error Error(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Error Error(java.lang.String, java.lang.Throwable, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Exception Exception()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Exception Exception(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Exception Exception(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Exception Exception(java.lang.String, java.lang.Throwable, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ExceptionInInitializerError java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ExceptionInInitializerError java.lang.Throwable getException()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float Float(double)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Float Float(float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Float boolean isInfinite()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float boolean isInfinite(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float boolean isNaN()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float boolean isNaN(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float byte byteValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float double doubleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float float floatValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float int intValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float java.lang.Float valueOf(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float long longValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Float short shortValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.IllegalAccessError IllegalAccessError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalAccessError IllegalAccessError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalAccessException IllegalAccessException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalAccessException IllegalAccessException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalArgumentException IllegalArgumentException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalArgumentException IllegalArgumentException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalArgumentException IllegalArgumentException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalMonitorStateException IllegalMonitorStateException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalMonitorStateException IllegalMonitorStateException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalStateException IllegalStateException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalStateException IllegalStateException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalStateException IllegalStateException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalThreadStateException IllegalThreadStateException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IllegalThreadStateException IllegalThreadStateException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IncompatibleClassChangeError IncompatibleClassChangeError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IncompatibleClassChangeError IncompatibleClassChangeError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IndexOutOfBoundsException IndexOutOfBoundsException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.IndexOutOfBoundsException IndexOutOfBoundsException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.InheritableThreadLocal T childValue(T)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.InheritableThreadLocal java.lang.ThreadLocal.ThreadLocalMap getMap(java.lang.Thread)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.InstantiationError InstantiationError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.InstantiationError InstantiationError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.InstantiationException InstantiationException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.InstantiationException InstantiationException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Integer Integer(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Integer boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer byte byteValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer double doubleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer float floatValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int bitCount(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int compare(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int compareTo(java.lang.Integer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int highestOneBit(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int intValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int lowestOneBit(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int numberOfLeadingZeros(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int numberOfTrailingZeros(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int reverse(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int reverseBytes(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int rotateLeft(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int rotateRight(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int signum(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer int stringSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer java.lang.Integer valueOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer java.lang.String toString(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer long longValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer short shortValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Integer void getChars(int, int, char[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="2"/>
  </item>
  <item name="java.lang.Integer.IntegerCache IntegerCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.InternalError InternalError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.InternalError InternalError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.InterruptedException InterruptedException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.InterruptedException InterruptedException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.LinkageError LinkageError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.LinkageError LinkageError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.LinkageError LinkageError(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Long Long(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Long boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long byte byteValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long double doubleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long float floatValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int bitCount(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int compare(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int compareTo(java.lang.Long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int intValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int numberOfLeadingZeros(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int numberOfTrailingZeros(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int signum(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long int stringSize(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long java.lang.Long valueOf(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long java.lang.String toString(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long long highestOneBit(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long long longValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long long lowestOneBit(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long long reverse(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long long reverseBytes(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long long rotateLeft(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long long rotateRight(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long short shortValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Long void getChars(long, int, char[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="2"/>
  </item>
  <item name="java.lang.Long.LongCache LongCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math Math()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math double abs(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math double toDegrees(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math double toRadians(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math float abs(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math int abs(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math int max(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math int min(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math long abs(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math long max(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Math long min(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.NegativeArraySizeException NegativeArraySizeException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NegativeArraySizeException NegativeArraySizeException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoClassDefFoundError NoClassDefFoundError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoClassDefFoundError NoClassDefFoundError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoSuchFieldError NoSuchFieldError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoSuchFieldError NoSuchFieldError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoSuchFieldException NoSuchFieldException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoSuchFieldException NoSuchFieldException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoSuchMethodError NoSuchMethodError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoSuchMethodError NoSuchMethodError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoSuchMethodException NoSuchMethodException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NoSuchMethodException NoSuchMethodException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NullPointerException NullPointerException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NullPointerException NullPointerException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Number Number()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.NumberFormatException NumberFormatException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.NumberFormatException NumberFormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Object Object()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Object boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Object void finalize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.OutOfMemoryError OutOfMemoryError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.OutOfMemoryError OutOfMemoryError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Package Package(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.net.URL, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Package boolean isSealed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Package java.lang.String getImplementationTitle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Package java.lang.String getImplementationVendor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Package java.lang.String getImplementationVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Package java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Package java.lang.String getSpecificationTitle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Package java.lang.String getSpecificationVendor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Package java.lang.String getSpecificationVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Package.1PackageInfoProxy 1PackageInfoProxy(java.lang.Package)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Process Process()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder ProcessBuilder(java.util.List&lt;java.lang.String&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessBuilder boolean redirectErrorStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder java.io.File directory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder java.lang.ProcessBuilder command(java.util.List&lt;java.lang.String&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessBuilder java.lang.ProcessBuilder directory(java.io.File)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessBuilder java.lang.ProcessBuilder redirectErrorStream(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessBuilder java.lang.ProcessBuilder.Redirect redirectError()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder java.lang.ProcessBuilder.Redirect redirectInput()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder java.lang.ProcessBuilder.Redirect redirectOutput()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder java.lang.ProcessBuilder.Redirect[] redirects()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessBuilder java.util.List&lt;java.lang.String&gt; command()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.NullInputStream NullInputStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.NullInputStream int available()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.NullInputStream int read()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.NullOutputStream NullOutputStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.NullOutputStream void write(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.Redirect Redirect()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.Redirect boolean append()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.Redirect java.io.File file()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.Redirect java.lang.ProcessBuilder.Redirect appendTo(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.Redirect java.lang.ProcessBuilder.Redirect from(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.Redirect java.lang.ProcessBuilder.Redirect to(java.io.File)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessBuilder.Redirect.Type Type(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessEnvironment ProcessEnvironment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessEnvironment boolean arrayEquals(byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessEnvironment int arrayCompare(byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessEnvironment int arrayHash(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessEnvironment java.util.Map&lt;java.lang.String,java.lang.String&gt; getenv()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessEnvironment.ExternalData ExternalData(java.lang.String, byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessEnvironment.ExternalData byte[] getBytes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessEnvironment.ExternalData java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessEnvironment.StringEntry StringEntry(java.util.Map.Entry&lt;java.lang.ProcessEnvironment.Variable,java.lang.ProcessEnvironment.Value&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessEnvironment.StringEntrySet StringEntrySet(java.util.Set&lt;java.util.Map.Entry&lt;java.lang.ProcessEnvironment.Variable,java.lang.ProcessEnvironment.Value&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessEnvironment.StringEntrySet java.util.Map.Entry&lt;java.lang.ProcessEnvironment.Variable,java.lang.ProcessEnvironment.Value&gt; vvEntry(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ProcessEnvironment.StringEnvironment StringEnvironment(java.util.Map&lt;java.lang.ProcessEnvironment.Variable,java.lang.ProcessEnvironment.Value&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessEnvironment.StringKeySet StringKeySet(java.util.Set&lt;java.lang.ProcessEnvironment.Variable&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessEnvironment.StringValues StringValues(java.util.Collection&lt;java.lang.ProcessEnvironment.Value&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessEnvironment.Value Value(java.lang.String, byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessEnvironment.Variable Variable(java.lang.String, byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ProcessImpl ProcessImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ReflectiveOperationException ReflectiveOperationException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ReflectiveOperationException ReflectiveOperationException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ReflectiveOperationException ReflectiveOperationException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Runtime Runtime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Runtime java.io.InputStream getLocalizedInputStream(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Runtime java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Runtime java.lang.Runtime getRuntime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.RuntimeException RuntimeException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.RuntimeException RuntimeException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.RuntimeException RuntimeException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.RuntimeException RuntimeException(java.lang.String, java.lang.Throwable, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.SecurityException SecurityException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.SecurityException SecurityException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.SecurityException SecurityException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.SecurityManager boolean getInCheck()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short Short(short)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Short boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short byte byteValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short double doubleValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short float floatValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short int compare(short, short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short int compareTo(java.lang.Short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short int intValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short java.lang.Short valueOf(short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short long longValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short short reverseBytes(short)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short short shortValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Short.ShortCache ShortCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Shutdown Shutdown()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Shutdown.Lock Lock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StackOverflowError StackOverflowError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StackOverflowError StackOverflowError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StackTraceElement StackTraceElement(java.lang.String, java.lang.String, java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StackTraceElement boolean isNativeMethod()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StackTraceElement int getLineNumber()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StackTraceElement java.lang.String getClassName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StackTraceElement java.lang.String getFileName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StackTraceElement java.lang.String getMethodName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath StrictMath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath double abs(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath double toDegrees(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath double toRadians(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath float abs(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath int abs(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath int max(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath int min(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath long abs(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath long max(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StrictMath long min(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String String()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.String String(char[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.String String(char[], boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.String String(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.String boolean endsWith(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String boolean regionMatches(int, java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String boolean startsWith(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String boolean startsWith(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String char[] toCharArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int codePointCount(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int compareTo(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int hash32()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.String int hashCode()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.String int indexOf(char[], int, int, char[], int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int indexOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int indexOf(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int indexOf(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int indexOf(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int indexOfSupplementary(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int lastIndexOf(char[], int, int, char[], int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int lastIndexOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int lastIndexOf(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int lastIndexOf(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int lastIndexOf(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int lastIndexOfSupplementary(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String int offsetByCodePoints(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String java.lang.String copyValueOf(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String java.lang.String replace(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String java.lang.String valueOf(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String java.lang.String valueOf(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String java.lang.String valueOf(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String java.lang.String valueOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String java.lang.String valueOf(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.String void getChars(char[], int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.lang.String.CaseInsensitiveComparator CaseInsensitiveComparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer StringBuffer()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StringBuffer StringBuffer(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StringBuffer int capacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer int codePointCount(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer int indexOf(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer int indexOf(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer int lastIndexOf(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer int lastIndexOf(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer int offsetByCodePoints(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuffer java.lang.StringBuffer reverse()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StringBuffer void trimToSize()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StringBuilder StringBuilder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StringBuilder StringBuilder(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StringBuilder int indexOf(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuilder int indexOf(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuilder int lastIndexOf(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuilder int lastIndexOf(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringBuilder java.lang.StringBuilder reverse()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StringCoding StringCoding()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringCoding byte[] safeTrim(byte[], int, java.nio.charset.Charset, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringCoding char[] safeTrim(char[], int, java.nio.charset.Charset, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringCoding int scale(int, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringCoding.StringDecoder java.lang.String requestedCharsetName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringCoding.StringEncoder java.lang.String requestedCharsetName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.StringIndexOutOfBoundsException StringIndexOutOfBoundsException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.StringIndexOutOfBoundsException StringIndexOutOfBoundsException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.System System()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.System java.lang.SecurityManager getSecurityManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.System java.lang.String lineSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.System void arraycopy(java.lang.Object, int, java.lang.Object, int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="2"/>
  </item>
  <item name="java.lang.System void checkKey(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.SystemClassLoaderAction SystemClassLoaderAction(java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Terminator Terminator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Terminator void teardown()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread boolean isDaemon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread int getPriority()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread java.lang.Object clone()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread java.lang.Thread.State getState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread java.lang.Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread java.lang.ThreadGroup getThreadGroup()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread long getId()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread void blockedOn(sun.nio.ch.Interruptible)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Thread void destroy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread.Caches Caches()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Thread.State State(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Thread.WeakClassKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadDeath ThreadDeath()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ThreadGroup ThreadGroup()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ThreadGroup boolean allowThreadSuspension(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ThreadGroup boolean isDaemon()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadGroup boolean isDestroyed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadGroup boolean parentOf(java.lang.ThreadGroup)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadGroup int getMaxPriority()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadGroup java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadGroup void addUnstarted()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ThreadLocal T childValue(T)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadLocal T initialValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadLocal java.lang.ThreadLocal.ThreadLocalMap getMap(java.lang.Thread)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadLocal.ThreadLocalMap int nextIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadLocal.ThreadLocalMap int prevIndex(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.ThreadLocal.ThreadLocalMap void setThreshold(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.ThreadLocal.ThreadLocalMap.Entry Entry(java.lang.ThreadLocal, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable Throwable()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable Throwable(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable Throwable(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable Throwable(java.lang.String, java.lang.Throwable, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable java.lang.String getMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Throwable java.lang.Throwable fillInStackTrace()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable java.lang.Throwable fillInStackTrace(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Throwable.PrintStreamOrWriter PrintStreamOrWriter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Throwable.SentinelHolder SentinelHolder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Throwable.WrappedPrintStream WrappedPrintStream(java.io.PrintStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable.WrappedPrintStream java.lang.Object lock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.Throwable.WrappedPrintWriter WrappedPrintWriter(java.io.PrintWriter)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Throwable.WrappedPrintWriter java.lang.Object lock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.TypeNotPresentException java.lang.String typeName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.UNIXProcess int exitValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.UNIXProcess java.io.InputStream getErrorStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.UNIXProcess java.io.InputStream getInputStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.UNIXProcess java.io.OutputStream getOutputStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.UNIXProcess.LaunchMechanism LaunchMechanism(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UNIXProcess.ProcessReaperThreadFactory ProcessReaperThreadFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.UnknownError UnknownError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UnknownError UnknownError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UnsatisfiedLinkError UnsatisfiedLinkError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UnsatisfiedLinkError UnsatisfiedLinkError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UnsupportedClassVersionError UnsupportedClassVersionError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UnsupportedClassVersionError UnsupportedClassVersionError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UnsupportedOperationException UnsupportedOperationException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UnsupportedOperationException UnsupportedOperationException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.UnsupportedOperationException UnsupportedOperationException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.VerifyError VerifyError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.VerifyError VerifyError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.VirtualMachineError VirtualMachineError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.VirtualMachineError VirtualMachineError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.Void Void()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
