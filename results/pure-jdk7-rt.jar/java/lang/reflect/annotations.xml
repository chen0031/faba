<root>
  <item name="java.lang.reflect.AccessibleObject AccessibleObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.AccessibleObject boolean isAccessible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Array Array()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor Constructor(java.lang.Class&lt;T&gt;, java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;[], int, int, java.lang.String, byte[], byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.Constructor boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor boolean isSynthetic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor boolean isVarArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor byte[] getRawAnnotations()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor byte[] getRawParameterAnnotations()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor int getModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor int getSlot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.Class&lt;T&gt; getDeclaringClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.String getSignature()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.reflect.Constructor&lt;T&gt; copy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor sun.reflect.ConstructorAccessor getConstructorAccessor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field Field(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;, int, int, java.lang.String, byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.Field boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field boolean isEnumConstant()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field boolean isSynthetic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field int getModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.Class&lt;?&gt; getDeclaringClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.Class&lt;?&gt; getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.String getGenericSignature()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.reflect.Field copy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field sun.reflect.FieldAccessor getFieldAccessor(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.GenericSignatureFormatError GenericSignatureFormatError()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.InvocationTargetException InvocationTargetException(java.lang.Throwable, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.InvocationTargetException java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.InvocationTargetException java.lang.Throwable getTargetException()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.MalformedParameterizedTypeException MalformedParameterizedTypeException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.Method Method(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[], int, int, java.lang.String, byte[], byte[], byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.Method boolean isBridge()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method boolean isSynthetic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method boolean isVarArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method int getModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.Class&lt;?&gt; getDeclaringClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.Class&lt;?&gt; getReturnType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.String getGenericSignature()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.reflect.Method copy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method sun.reflect.MethodAccessor getMethodAccessor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier Modifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isAbstract(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isFinal(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isInterface(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isNative(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isPrivate(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isProtected(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isPublic(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isStatic(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isStrict(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isSynchronized(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isSynthetic(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isTransient(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isVolatile(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int classModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int constructorModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int fieldModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int interfaceModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int methodModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy Proxy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.Key1 int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.Key2 int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.KeyFactory KeyFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.KeyX int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyAccessHelper ProxyAccessHelper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyClassFactory ProxyClassFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess ReflectAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess byte[] getConstructorAnnotations(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess byte[] getConstructorParameterAnnotations(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess int getConstructorSlot(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.String getConstructorSignature(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Constructor&lt;T&gt; copyConstructor(java.lang.reflect.Constructor&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Constructor&lt;T&gt; newConstructor(java.lang.Class&lt;T&gt;, java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;[], int, int, java.lang.String, byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Field copyField(java.lang.reflect.Field)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Field newField(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;, int, int, java.lang.String, byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Method copyMethod(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Method newMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[], int, int, java.lang.String, byte[], byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess sun.reflect.ConstructorAccessor getConstructorAccessor(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess sun.reflect.MethodAccessor getMethodAccessor(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.UndeclaredThrowableException UndeclaredThrowableException(java.lang.Throwable, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.UndeclaredThrowableException java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.UndeclaredThrowableException java.lang.Throwable getUndeclaredThrowable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheValue int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache.Factory Factory(K, P, java.lang.Object, java.util.concurrent.ConcurrentMap&lt;java.lang.Object,java.lang.reflect.WeakCache.Supplier&lt;V&gt;&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.WeakCache.LookupValue LookupValue(V)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.lang.reflect.WeakCache.LookupValue V get()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
