<root>
  <item name="java.text.Annotation Annotation(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.Annotation java.lang.Object getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributeEntry AttributeEntry(java.text.AttributedCharacterIterator.Attribute, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributeEntry java.lang.Object getKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributeEntry java.lang.Object getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributeEntry java.lang.Object setValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedCharacterIterator.Attribute boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedCharacterIterator.Attribute java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString AttributedString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString char charAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString void createRunAttributeDataVectors()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString.AttributeMap AttributeMap(java.text.AttributedString, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator char current()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator char first()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator char internalSetIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator char last()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator char next()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator char previous()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator char setIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator int getBeginIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator int getEndIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator int getRunLimit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator int getRunStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator java.text.AttributedString getString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.AttributedString.AttributedStringIterator void updateRunInfo()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.BreakDictionary boolean cellIsPopulated(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.BreakDictionary short getNextState(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.BreakDictionary short internalAt(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.BreakIterator BreakIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.BreakIterator int getInt(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.BreakIterator long getLong(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.BreakIterator short getShort(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.BreakIterator.BreakIteratorCache java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.BreakIterator.BreakIteratorGetter BreakIteratorGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CalendarBuilder CalendarBuilder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.CalendarBuilder boolean isSet(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CalendarBuilder boolean isValidDayOfWeek(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CalendarBuilder int toCalendarDayOfWeek(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CalendarBuilder int toISODayOfWeek(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CharacterIteratorFieldDelegate CharacterIteratorFieldDelegate()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.ChoiceFormat double[] doubleArraySize(double[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ChoiceFormat double[] getLimits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ChoiceFormat java.lang.Number parse(java.lang.String, java.text.ParsePosition)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="java.text.ChoiceFormat java.lang.Object[] getFormats()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ChoiceFormat java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="java.text.ChoiceFormat java.lang.String[] doubleArraySize(java.lang.String[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ChoiceFormat void setChoices(double[], java.lang.String[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.CollationElementIterator boolean isIgnorable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationElementIterator boolean isLaoBaseConsonant(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationElementIterator boolean isLaoPreVowel(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationElementIterator boolean isThaiBaseConsonant(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationElementIterator boolean isThaiPreVowel(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationElementIterator int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationElementIterator int primaryOrder(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationElementIterator short secondaryOrder(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationElementIterator short tertiaryOrder(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationKey CollationKey(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.CollationKey java.lang.String getSourceString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.CollationRules CollationRules()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.Collator Collator()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.Collator int getDecomposition()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.Collator int getStrength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.Collator void setDecomposition(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.Collator void setStrength(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.Collator.CollatorGetter CollatorGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DateFormat DateFormat()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DateFormat java.text.NumberFormat getNumberFormat()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DateFormat java.util.Calendar getCalendar()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DateFormat void setCalendar(java.util.Calendar)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DateFormat void setNumberFormat(java.text.NumberFormat)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DateFormat.DateFormatGetter DateFormatGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DateFormat.Field int getCalendarField()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DateFormatSymbols java.lang.String getLocalPatternChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DateFormatSymbols java.lang.String[] toOneBasedArray(java.lang.String[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DateFormatSymbols void setLocalPatternChars(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DateFormatSymbols.DateFormatSymbolsGetter DateFormatSymbolsGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat boolean isDecimalSeparatorAlwaysShown()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat boolean isParseBigDecimal()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat int getGroupingSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat int getMaximumFractionDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat int getMaximumIntegerDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat int getMinimumFractionDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat int getMinimumIntegerDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat int getMultiplier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat java.lang.String getNegativePrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat java.lang.String getNegativeSuffix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat java.lang.String getPositivePrefix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat java.lang.String getPositiveSuffix()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat java.math.BigDecimal getBigDecimalMultiplier()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat java.math.RoundingMode getRoundingMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormat void setDecimalSeparatorAlwaysShown(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setGroupingSize(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setMaximumFractionDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setMaximumIntegerDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setMinimumFractionDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setMinimumIntegerDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setMultiplier(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setNegativePrefix(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setNegativeSuffix(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setParseBigDecimal(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setPositivePrefix(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormat void setPositiveSuffix(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols char getDecimalSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getDigit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getExponentialSymbol()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getGroupingSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getMinusSign()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getMonetaryDecimalSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getPatternSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getPerMill()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getPercent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols char getZeroDigit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols java.lang.String getCurrencySymbol()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols java.lang.String getExponentSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols java.lang.String getInfinity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols java.lang.String getInternationalCurrencySymbol()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols java.lang.String getNaN()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols java.util.Currency getCurrency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DecimalFormatSymbols void setCurrencySymbol(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setDecimalSeparator(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setDigit(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setExponentSeparator(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setExponentialSymbol(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setGroupingSeparator(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setInfinity(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setMinusSign(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setMonetaryDecimalSeparator(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setNaN(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setPatternSeparator(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setPerMill(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setPercent(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols void setZeroDigit(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DecimalFormatSymbols.DecimalFormatSymbolsGetter DecimalFormatSymbolsGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DigitList DigitList()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DigitList boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DigitList boolean fitsIntoLong(boolean, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DigitList boolean isLongMIN_VALUE()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DigitList boolean isZero()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DigitList char[] getDataChars(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DigitList int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DigitList int parseInt(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.DigitList void clear()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DigitList void extendDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DigitList void setRoundingMode(java.math.RoundingMode)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DontCareFieldPosition DontCareFieldPosition()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.DontCareFieldPosition java.text.Format.FieldDelegate getFieldDelegate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.EntryPair EntryPair(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.EntryPair EntryPair(java.lang.String, int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.FieldPosition FieldPosition(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.FieldPosition FieldPosition(java.text.Format.Field)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.FieldPosition FieldPosition(java.text.Format.Field, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.FieldPosition int getBeginIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.FieldPosition int getEndIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.FieldPosition int getField()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.FieldPosition int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.FieldPosition java.text.Format.Field getFieldAttribute()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.FieldPosition java.text.Format.FieldDelegate getFieldDelegate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.FieldPosition void setBeginIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.FieldPosition void setEndIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.FieldPosition.Delegate Delegate(java.text.FieldPosition)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.Format Format()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.MessageFormat java.text.Format[] getFormats()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.MessageFormat java.text.Format[] getFormatsByArgumentIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.MessageFormat java.util.Locale getLocale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.MessageFormat void copyAndFixQuotes(java.lang.String, int, int, java.lang.StringBuilder)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="3"/>
  </item>
  <item name="java.text.MessageFormat void setLocale(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.Normalizer Normalizer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.Normalizer.Form Form(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.NumberFormat NumberFormat()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.NumberFormat boolean isGroupingUsed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat boolean isParseIntegerOnly()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat int getMaximumFractionDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat int getMaximumIntegerDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat int getMinimumFractionDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat int getMinimumIntegerDigits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat java.math.RoundingMode getRoundingMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat java.util.Currency getCurrency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat void setCurrency(java.util.Currency)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat void setGroupingUsed(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.NumberFormat void setMaximumFractionDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.NumberFormat void setMaximumIntegerDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.NumberFormat void setMinimumFractionDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.NumberFormat void setMinimumIntegerDigits(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.NumberFormat void setParseIntegerOnly(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.NumberFormat void setRoundingMode(java.math.RoundingMode)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.NumberFormat.NumberFormatGetter NumberFormatGetter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ParseException ParseException(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.ParseException int getErrorOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ParsePosition ParsePosition(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.ParsePosition boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ParsePosition int getErrorIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ParsePosition int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ParsePosition int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.ParsePosition void setErrorIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.ParsePosition void setIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.PatternEntry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.PatternEntry boolean isSpecialChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.PatternEntry int getStrength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.PatternEntry java.lang.String getChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.PatternEntry java.lang.String getExtension()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.PatternEntry.Parser Parser(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.RBCollationTables boolean isFrenchSec()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RBCollationTables boolean isSEAsianSwapping()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RBCollationTables boolean usedInContractSeq(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RBCollationTables int getUnicodeOrder(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RBCollationTables java.lang.String getRules()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RBCollationTables short getMaxSecOrder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RBCollationTables short getMaxTerOrder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RBCollationTables.BuildAPI BuildAPI(java.text.RBCollationTables)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.RBTableBuilder int increment(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.RuleBasedBreakIterator byte[] getAdditionalData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedBreakIterator int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedBreakIterator int lookupBackwardState(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedBreakIterator int lookupState(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedBreakIterator java.text.CharacterIterator getText()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.RuleBasedBreakIterator void setAdditionalData(byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.RuleBasedBreakIterator.SafeCharIterator int getBeginIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedBreakIterator.SafeCharIterator int getEndIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedBreakIterator.SafeCharIterator int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedCollationKey RuleBasedCollationKey(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.RuleBasedCollationKey byte[] toByteArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedCollationKey int compareTo(java.text.CollationKey)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedCollator java.lang.String getRules()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.RuleBasedCollator java.text.RBCollationTables getTables()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.SimpleDateFormat boolean isDigit(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.SimpleDateFormat java.lang.String toPattern()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.StringCharacterIterator StringCharacterIterator(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.StringCharacterIterator StringCharacterIterator(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.StringCharacterIterator StringCharacterIterator(java.lang.String, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.StringCharacterIterator char current()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.StringCharacterIterator char first()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.StringCharacterIterator char last()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.StringCharacterIterator char next()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.StringCharacterIterator char previous()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.StringCharacterIterator char setIndex(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.text.StringCharacterIterator int getBeginIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.StringCharacterIterator int getEndIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.StringCharacterIterator int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.text.StringCharacterIterator void setText(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
