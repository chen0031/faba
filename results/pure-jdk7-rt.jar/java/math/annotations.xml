<root>
  <item name="java.math.BigDecimal BigDecimal(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigDecimal BigDecimal(java.math.BigInteger)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigDecimal BigDecimal(java.math.BigInteger, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigDecimal BigDecimal(java.math.BigInteger, long, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigDecimal int longCompareMagnitude(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigDecimal int longDigitLength(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigDecimal int saturateLong(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigDecimal int scale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigDecimal java.math.BigDecimal plus()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigDecimal long compactValFor(java.math.BigInteger)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigDecimal long longMultiplyPowerTen(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigDecimal.LongOverflow LongOverflow()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigDecimal.StringBuilderHelper StringBuilderHelper()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigDecimal.StringBuilderHelper char[] getCompactCharArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger BigInteger(byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger BigInteger(byte[], int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger BigInteger(int, byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger BigInteger(int[], int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger boolean testBit(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger byte[] magSerializedForm()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int addOne(int[], int, int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BigInteger int bitCount()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger int bitLength()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger int bitLength(int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int bitLengthForInt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int compareMagnitude(java.math.BigInteger)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int compareTo(java.math.BigInteger)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int firstNonzeroIntNum()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger int getInt(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger int getLowestSetBit()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int intArrayCmpToLen(int[], int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int intValue()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger int mulAdd(int[], int[], int, int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BigInteger int signBit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int signInt()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int signum()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int subN(int[], int[], int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BigInteger int[] add(int[], int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int[] javaIncrement(int[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BigInteger int[] leftShift(int[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BigInteger int[] makePositive(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int[] makePositive(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int[] montReduce(int[], int[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BigInteger int[] stripLeadingZeroBytes(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger int[] subtract(int[], int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger java.math.BigInteger negate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BigInteger long longValue()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.BigInteger void destructiveMulAdd(int[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BigInteger void primitiveLeftShift(int[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BigInteger void primitiveRightShift(int[], int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.BitSieve boolean get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BitSieve int sieveSearch(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BitSieve int unitIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.BitSieve long bit(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MathContext MathContext(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.MathContext MathContext(int, java.math.RoundingMode)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.MathContext boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MathContext int getPrecision()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MathContext java.math.RoundingMode getRoundingMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger MutableBigInteger()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.MutableBigInteger MutableBigInteger(int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.MutableBigInteger MutableBigInteger(java.math.BigInteger)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.MutableBigInteger boolean isEven()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger boolean isNormal()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger boolean isOne()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger boolean isZero()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger boolean unsignedLongCompare(long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger int binaryGcd(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger int compare(java.math.MutableBigInteger)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger int compareHalf(java.math.MutableBigInteger)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger int divadd(int[], int[], int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="java.math.MutableBigInteger int getInt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger int getLowestSetBit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger int inverseMod32(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger int mulsub(int[], int[], int, int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.MutableBigInteger int[] toIntArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger long getLong(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.MutableBigInteger void divWord(int[], long, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="java.math.MutableBigInteger void ensureCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.MutableBigInteger void normalize()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.MutableBigInteger void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.MutableBigInteger void setValue(int[], int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.RoundingMode RoundingMode(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="java.math.RoundingMode java.math.RoundingMode valueOf(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="java.math.SignedMutableBigInteger SignedMutableBigInteger()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
