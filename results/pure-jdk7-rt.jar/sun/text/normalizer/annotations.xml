<root>
  <item name="sun.text.normalizer.CharTrie int getInitialValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie int getValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie.FriendAgent FriendAgent(sun.text.normalizer.CharTrie)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.CharTrie.FriendAgent char[] getPrivateData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie.FriendAgent char[] getPrivateIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharTrie.FriendAgent int getPrivateInitialValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.CharacterIteratorWrapper CharacterIteratorWrapper(java.text.CharacterIterator)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.ICUBinary ICUBinary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ICUData ICUData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.IntTrie IntTrie(char[], int[], int, int, sun.text.normalizer.Trie.DataManipulate)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.IntTrie int getInitialValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.IntTrie int getValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.lang.String, sun.text.normalizer.NormalizerBase.Mode)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.lang.String, sun.text.normalizer.NormalizerBase.Mode, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int getBeginIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int getCodePointAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase sun.text.normalizer.NormalizerBase.Mode getMode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase void clearBuffer()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase void setMode(sun.text.normalizer.NormalizerBase.Mode)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase void setText(java.text.CharacterIterator)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextNFDSafe IsNextNFDSafe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextTrueStarter IsNextTrueStarter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevNFDSafe IsPrevNFDSafe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevTrueStarter IsPrevTrueStarter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode Mode(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode boolean isNFSkippable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode int normalize(char[], int, int, char[], int, int, sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="3"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode java.lang.String normalize(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.Mode sun.text.normalizer.NormalizerBase.QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode NFCMode(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFCMode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode NFDMode(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFDMode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode NFKCMode(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKCMode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode NFKDMode(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode int getMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode int getMinC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode sun.text.normalizer.NormalizerBase.IsNextBoundary getNextBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.NFKDMode sun.text.normalizer.NormalizerBase.IsPrevBoundary getPrevBoundary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.QuickCheckResult QuickCheckResult(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader boolean isDataVersionAcceptable(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader byte[] getDataFormatVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader byte[] getUnicodeVersion()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isHangulWithoutJamoT(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isJamoVTNorm32JamoV(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isNFDSafe(long, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isNorm32HangulOrJamo(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isNorm32LeadSurrogate(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean isNorm32Regular(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean needSingleQuotation(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int combine(char[], int, int, int[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="3"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(long, int, sun.text.normalizer.NormalizerImpl.DecomposeArgs)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="2"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(long, sun.text.normalizer.NormalizerImpl.DecomposeArgs)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="1"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getExtraDataIndex(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getFromIndexesArr(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int strCompare(char[], int, int, char[], int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.AuxTrieImpl AuxTrieImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.AuxTrieImpl int getFoldingOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.ComposePartArgs ComposePartArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.DecomposeArgs DecomposeArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.FCDTrieImpl FCDTrieImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.FCDTrieImpl int getFoldingOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NextCCArgs NextCCArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NextCombiningArgs NextCombiningArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NormTrieImpl NormTrieImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.NormTrieImpl int getFoldingOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.PrevArgs PrevArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl.RecomposeArgs RecomposeArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.RangeValueIterator.Element Element()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ReplaceableString ReplaceableString(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableString ReplaceableString(java.lang.StringBuffer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableString char charAt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ReplaceableString int length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.ReplaceableString void getChars(int, int, char[], int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="2"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator ReplaceableUCharacterIterator(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator ReplaceableUCharacterIterator(java.lang.StringBuffer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator int getIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator boolean inVariable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator boolean isEscaped()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie Trie(char[], int, sun.text.normalizer.Trie.DataManipulate)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.Trie boolean checkHeader(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie boolean isCharTrie()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie boolean isIntTrie()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie int getBMPOffset(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie int getLeadOffset(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie int getRawOffset(int, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie.DefaultGetFoldingOffset DefaultGetFoldingOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Trie.DefaultGetFoldingOffset int getFoldingOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.TrieIterator int extract(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.TrieIterator void setResult(sun.text.normalizer.RangeValueIterator.Element, int, int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.text.normalizer.UBiDiProps int getClassFromProps(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UBiDiProps.IsAcceptable IsAcceptable(sun.text.normalizer.UBiDiProps)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.UBiDiProps.IsAcceptable boolean isDataVersionAcceptable(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacter UCharacter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacter int getCodePoint(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacter int getEuropeanDigit(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacter int getNumericType(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator UCharacterIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.lang.StringBuffer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.text.CharacterIterator)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterProperty boolean isRuleWhiteSpace(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterProperty int getRawSupplementary(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterProperty int getUnsignedValue(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UCharacterPropertyReader boolean isDataVersionAcceptable(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 UTF16()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 boolean isLeadSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 boolean isSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 boolean isTrailSurrogate(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 char getLeadSurrogate(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 char getTrailSurrogate(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 int _charAt(java.lang.String, int, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 int charAt(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 int getCharCount(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UTF16 int moveCodePointOffset(char[], int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int findCodePoint(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getRangeCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getRangeEnd(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getRangeStart(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getSingleCP(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int max(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void ensureBufferCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void ensureCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet.VersionFilter VersionFilter(sun.text.normalizer.VersionInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.Utility Utility()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility boolean arrayRegionMatches(char[], int, char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility boolean escapeUnprintable(java.lang.StringBuffer, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.text.normalizer.Utility boolean isUnprintable(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility int skipWhitespace(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.Utility void getChars(java.lang.StringBuffer, int, int, char[], int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="3"/>
  </item>
  <item name="sun.text.normalizer.VersionInfo VersionInfo(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.text.normalizer.VersionInfo int compareTo(sun.text.normalizer.VersionInfo)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.text.normalizer.VersionInfo int getInt(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
