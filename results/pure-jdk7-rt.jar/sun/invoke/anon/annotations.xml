<root>
  <item name="sun.invoke.anon.AnonymousClassLoader AnonymousClassLoader(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.invoke.anon.AnonymousClassLoader java.lang.Class&lt;?&gt; fakeLoadClass(sun.invoke.anon.ConstantPoolPatch)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.AnonymousClassLoader sun.invoke.anon.AnonymousClassLoader make(sun.misc.Unsafe, java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.AnonymousClassLoader void noJVMSupport()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolParser char[] getCharArray(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.invoke.anon.ConstantPoolParser int getEndOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolParser int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolParser int getStartOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolParser void writePatchedHead(java.io.OutputStream, java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolPatch java.lang.Class&lt;?&gt; classForTag(byte)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolPatch sun.invoke.anon.ConstantPoolParser getParser()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolVisitor ConstantPoolVisitor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolVisitor void visitConstantString(int, byte, java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolVisitor void visitConstantValue(int, byte, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolVisitor void visitDescriptor(int, byte, java.lang.String, java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolVisitor void visitMemberRef(int, byte, java.lang.String, java.lang.String, java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.ConstantPoolVisitor void visitUTF8(int, byte, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.invoke.anon.InvalidConstantPoolFormatException InvalidConstantPoolFormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.invoke.anon.InvalidConstantPoolFormatException InvalidConstantPoolFormatException(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
