<root>
  <item name="sun.font.AttributeMap AttributeMap(sun.font.AttributeValues)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.AttributeMap sun.font.AttributeValues getValues()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues AttributeValues()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.AttributeValues boolean allDefined(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean anyDefined(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean anyNonDefault(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean getStrikethrough()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean getSwapColors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean isDefined(sun.font.EAttribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues boolean isNonDefault(sun.font.EAttribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getJustification()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getPosture()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getTracking()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getWeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues float getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getBidiEmbedding()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getInputMethodUnderline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getKerning()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getLigatures()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getMask(sun.font.EAttribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getMask(sun.font.EAttribute...)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getRunDirection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getSuperscript()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int getUnderline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.Paint getBackground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.Paint getForeground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.font.GraphicAttribute getCharReplacement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.font.NumericShaper getNumericShaping()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getBaselineTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getCharTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.awt.geom.AffineTransform getTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.lang.Object getInputMethodHighlight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues java.lang.String getFamily()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.AttributeValues void defineAll(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.AttributeValues void unsetDefault()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.BidiUtils BidiUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.BidiUtils int[] computeContiguousOrder(int[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.BidiUtils int[] createContiguousOrder(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.BidiUtils int[] createInverseMap(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.BidiUtils int[] createNormalizedMap(int[], byte[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.BidiUtils int[] createVisualToLogicalMap(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CCharToGlyphMapper.Cache.SparseBitShiftingTwoLayerArray SparseBitShiftingTwoLayerArray(sun.font.CCharToGlyphMapper.Cache, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CCharToGlyphMapper.Cache.SparseBitShiftingTwoLayerArray int get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFont float getGlyphAdvance(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFont java.awt.geom.GeneralPath getGlyphOutline(long, int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFont java.awt.geom.GeneralPath getGlyphVectorOutline(long, int[], int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFont java.awt.geom.Rectangle2D.Float getGlyphOutlineBounds(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFont long getGlyphImage(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFont sun.font.StrikeMetrics getFontMetrics(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFont void getGlyphMetrics(long, int, java.awt.geom.Point2D.Float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration int getNumberCoreFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getEncoding(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getFaceNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getFallbackFamilyName(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String getFileNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String mapFileName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration java.lang.String[] getPlatformFontNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontConfiguration sun.font.CompositeFontDescriptor[] get2DCompositeFontInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontManager javax.swing.plaf.FontUIResource getFontConfigFUIR(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap CMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap int getControlCodeGlyph(int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap.CMapFormat0 char getGlyph(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap.CMapFormat10 char getGlyph(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap.CMapFormat8 char getGlyph(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap.NullCMapClass NullCMapClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CMap.NullCMapClass char getGlyph(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CStrike java.awt.geom.GeneralPath getGlyphVectorOutline(int[], float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CStrike.GlyphAdvanceCache GlyphAdvanceCache()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CStrike.GlyphAdvanceCache.SparseBitShiftingTwoLayerArray SparseBitShiftingTwoLayerArray(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CStrike.GlyphAdvanceCache.SparseBitShiftingTwoLayerArray float get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CStrike.GlyphInfoCache GlyphInfoCache(sun.font.Font2D, sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CStrike.GlyphInfoCache.SparseBitShiftingTwoLayerArray SparseBitShiftingTwoLayerArray(int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CStrike.GlyphInfoCache.SparseBitShiftingTwoLayerArray long get(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CStrikeDisposer CStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CStrikeDisposer CStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CStrikeDisposer CStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long, int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CStrikeDisposer CStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long, long[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CharToGlyphMapper CharToGlyphMapper()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CharToGlyphMapper int getMissingGlyphCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFont boolean isExcludedChar(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFont boolean isStdComposite()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFont int getNumSlots()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFont sun.font.FontStrike createStrike(sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor CompositeFontDescriptor(java.lang.String, int, java.lang.String[], java.lang.String[], int[], int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CompositeFontDescriptor int getCoreComponentCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor int[] getExclusionRangeLimits()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor int[] getExclusionRanges()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor java.lang.String getFaceName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor java.lang.String[] getComponentFaceNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeFontDescriptor java.lang.String[] getComponentFileNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeGlyphMapper int compositeGlyphCode(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeGlyphMapper int getCachedGlyphCode(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CompositeStrike CompositeStrike(sun.font.CompositeFont, sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CoreMetrics CoreMetrics(float, float, float, float, int, float[], float, float, float, float, float, float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CoreMetrics boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CoreMetrics boolean equals(sun.font.CoreMetrics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CoreMetrics float effectiveBaselineOffset(float[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CoreMetrics sun.font.CoreMetrics get(java.awt.font.LineMetrics)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CreatedFontTracker CreatedFontTracker()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CreatedFontTracker int getNumBytes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.CreatedFontTracker void addBytes(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CreatedFontTracker void subBytes(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.CreatedFontTracker.TempFileDeletionHook TempFileDeletionHook()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Decoration Decoration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Decoration sun.font.Decoration getPlainDecoration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Decoration.DecorationImpl DecorationImpl(java.awt.Paint, java.awt.Paint, boolean, boolean, sun.font.Underline, sun.font.Underline)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.DelegatingShape DelegatingShape(java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.EAttribute sun.font.EAttribute forAttribute(java.text.AttributedCharacterIterator.Attribute)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ExtendedTextLabel ExtendedTextLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel boolean isSimple()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel java.awt.geom.AffineTransform getBaselineTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ExtendedTextSourceLabel sun.font.CoreMetrics getCoreMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration boolean needToSearchForFile(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration int getNumberCoreFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getEncoding(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getExtraFontPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFaceNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFileNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration java.lang.String getFileNameFromPlatformName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FcFontConfiguration sun.font.FontConfigManager.FontConfigFont[] getFcFontList(sun.font.FontConfigManager.FcCompFont[], java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FileFont boolean canDoStyle(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FileFont boolean checkUseNatives()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FileFont.CreatedFontFileDisposerRecord CreatedFontFileDisposerRecord(java.io.File, sun.font.CreatedFontTracker)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FileFontStrike long getCachedGlyphPtr(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D boolean canDoStyle(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D boolean hasSupplementaryChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D boolean supportsEncoding(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D boolean useAAForPtSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D byte getBaselineFor(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D byte[] getTableBytes(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D int getRank()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D int getStyle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D java.lang.String getFamilyName(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D java.lang.String getFontName(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D java.lang.String getPostscriptName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D long getUnitsPerEm()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Font2D void setRank(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.Font2DHandle Font2DHandle(sun.font.Font2D)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontAccess FontAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontAccess sun.font.FontAccess getFontAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager FontConfigManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager java.lang.String[] getFontConfigNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager sun.font.FontConfigManager.FcCompFont[] getFontConfigFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager void populateFontConfig(sun.font.FontConfigManager.FcCompFont[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontConfigManager.FcCompFont FcCompFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager.FontConfigFont FontConfigFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontConfigManager.FontConfigInfo FontConfigInfo()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontDesignMetrics int getAscent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics int getDescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics int getHeight()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontDesignMetrics int getLeading()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics int getMaxAdvance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics java.awt.font.FontRenderContext getFontRenderContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics.MetricsKey MetricsKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontDesignMetrics.MetricsKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontFamily FontFamily(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontFamily int getRank()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontFamily java.lang.String getFamilyName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontFamily java.lang.String[] getAllFamilyNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontFamily sun.font.Font2D getClosestStyle(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontFamily sun.font.Font2D getFontWithExactStyleMatch(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics FontLineMetrics(int, sun.font.CoreMetrics, java.awt.font.FontRenderContext)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontLineMetrics boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getAscent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getDescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getLeading()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getStrikethroughOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getStrikethroughThickness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getUnderlineOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics float getUnderlineThickness()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics int getBaselineIndex()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontLineMetrics int getNumChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerFactory FontManagerFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerNativeLibrary FontManagerNativeLibrary()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontManagerNativeLibrary void load()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontResolver FontResolver()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontRunIterator FontRunIterator()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontRunIterator int getGlyphMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontRunIterator int getPos()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontRunIterator int nextCodePoint()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontRunIterator int nextCodePoint(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontRunIterator void pushback(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontScaler FontScaler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontScaler void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontScalerException FontScalerException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontScalerException FontScalerException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontStrike FontStrike()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontStrikeDesc FontStrikeDesc()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontStrikeDesc FontStrikeDesc(java.awt.geom.AffineTransform, java.awt.geom.AffineTransform, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontStrikeDesc int getFMHintIntVal(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontStrikeDisposer FontStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontStrikeDisposer FontStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontStrikeDisposer FontStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long, int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontStrikeDisposer FontStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long, long[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FontUtilities FontUtilities()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean debugFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean isComplexCharCode(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean isComplexText(char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean isLogging()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities boolean isNonSimpleChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities java.lang.String mapFcName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FontUtilities sun.util.logging.PlatformLogger getLogger()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.FreetypeFontScaler void invalidateScaler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.FreetypeFontScaler void invalidateScalerContext(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.EngineRecord EngineRecord(sun.font.GlyphLayout)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.GlyphLayout.GVData GVData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.GVData void grow()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.GlyphLayout.GVData void grow(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.GlyphLayout.GVData void init(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey LayoutEngineKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey LayoutEngineKey(sun.font.Font2D, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey int lang()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey int script()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey sun.font.Font2D font()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey sun.font.GlyphLayout.LayoutEngineKey copy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphLayout.LayoutEngineKey void init(sun.font.Font2D, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.GlyphLayout.SDCache.SDKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList GlyphList()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.GlyphList boolean isRGBOrder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList boolean isSubPixPos()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList boolean usePositions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList float getX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList float getY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList float[] getPositions()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList int[] getMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList java.lang.Object getStrike()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList long[] getImages()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GlyphList void ensureCapacity(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.GraphicComponent boolean caretAtOffsetIsValid(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent boolean isSimple()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getAdvance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getAdvanceBetween(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getCharAdvance(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getCharX(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getCharY(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent float getItalicAngle()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent int getLineBreakIndex(int, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent int getNumCharacters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent int getNumJustificationInfos()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent java.awt.geom.AffineTransform getBaselineTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent sun.font.CoreMetrics getCoreMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent sun.font.TextLineComponent applyJustificationDeltas(float[], int, boolean[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.GraphicComponent void getJustificationInfos(java.awt.font.GlyphJustificationInfo[], int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl LayoutPathImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EmptyPath EmptyPath(java.awt.geom.AffineTransform)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.EmptyPath double end()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EmptyPath double length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EmptyPath double start()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EndType EndType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.EndType boolean isClosed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EndType boolean isExtended()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.EndType boolean isPinned()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath SegmentPath(double[], sun.font.LayoutPathImpl.EndType)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double end()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double getClosedAdvance(double, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double length()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath double start()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath int getSegmentIndexForAdvance(double, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.LineInfo LineInfo(sun.font.LayoutPathImpl.SegmentPath)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.LineInfo void set(double, double, double, double)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.LineInfo void set(sun.font.LayoutPathImpl.SegmentPath.LineInfo)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.Segment Segment(sun.font.LayoutPathImpl.SegmentPath, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.Segment void init()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPath.Segment void move()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder SegmentPathBuilder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder sun.font.LayoutPathImpl.SegmentPath complete()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder sun.font.LayoutPathImpl.SegmentPath complete(sun.font.LayoutPathImpl.EndType)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.LayoutPathImpl.SegmentPathBuilder void reset(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.GeneralPath getGlyphOutline(long, int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.GeneralPath getGlyphVectorOutline(long, int[], int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeFont java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeFont void getGlyphMetrics(long, int, java.awt.geom.Point2D.Float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeGlyphMapper int charToGlyph(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeGlyphMapper int charToGlyph(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeGlyphMapper int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeStrike java.awt.geom.GeneralPath getGlyphOutline(int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeStrike java.awt.geom.GeneralPath getGlyphVectorOutline(int[], float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeStrike void getGlyphImageBounds(int, java.awt.geom.Point2D.Float, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NativeStrikeDisposer NativeStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.NativeStrikeDisposer NativeStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.NativeStrikeDisposer NativeStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long, int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.NativeStrikeDisposer NativeStrikeDisposer(sun.font.Font2D, sun.font.FontStrikeDesc, long, long[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.NullFontScaler NullFontScaler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.NullFontScaler NullFontScaler(sun.font.Font2D, int, boolean, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.NullFontScaler float getGlyphAdvance(long, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler int getGlyphCode(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler int getMissingGlyphCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler java.awt.geom.GeneralPath getGlyphOutline(long, int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler java.awt.geom.GeneralPath getGlyphVectorOutline(long, int[], int, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler java.awt.geom.Point2D.Float getGlyphPoint(long, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler long getLayoutTableCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler long getUnitsPerEm()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler sun.font.StrikeMetrics getFontMetrics(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.NullFontScaler void invalidateScalerContext(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.PhysicalFont java.awt.geom.Point2D.Float getGlyphPoint(long, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.PhysicalStrike PhysicalStrike()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.PhysicalStrike PhysicalStrike(sun.font.PhysicalFont, sun.font.FontStrikeDesc)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.PhysicalStrike int getSlot0GlyphImagePtrs(int[], long[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.PhysicalStrike void adjustPoint(java.awt.geom.Point2D.Float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Script Script()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun ScriptRun()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun ScriptRun(char[], int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.ScriptRun boolean sameScript(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun byte highBit(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int getPairIndex(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int getScriptCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int getScriptLimit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int getScriptStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.ScriptRun int nextCodePoint()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.ScriptRun void init(char[], int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.ScriptRun void pushback(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.ScriptRunData ScriptRunData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector int getGlyphCode(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector int getLayoutFlags()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.StandardGlyphVector int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector java.awt.font.FontRenderContext getFontRenderContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector void clearCaches()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.StandardGlyphVector.ADL ADL()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphStrike GlyphStrike(sun.font.StandardGlyphVector, sun.font.FontStrike, float, float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo GlyphTransformInfo(sun.font.StandardGlyphVector)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo boolean equals(sun.font.StandardGlyphVector.GlyphTransformInfo)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardGlyphVector.GlyphTransformInfo int transformCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource char[] getChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getBidiLevel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getContextLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getContextStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getLayoutFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource int getStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource java.awt.font.FontRenderContext getFRC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StandardTextSource sun.font.CoreMetrics getCoreMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeCache StrikeCache()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeCache boolean longAddresses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeCache.SoftDisposerRef sun.font.FontStrikeDisposer getDisposer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeCache.WeakDisposerRef sun.font.FontStrikeDisposer getDisposer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics StrikeMetrics()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.StrikeMetrics StrikeMetrics(float, float, float, float, float, float, float, float, float, float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.StrikeMetrics float getAscent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics float getDescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics float getLeading()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics float getMaxAdvance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.StrikeMetrics void merge(sun.font.StrikeMetrics)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.SunFontManager boolean isOpenJDK()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean maybeUsingAlternateCompositeFonts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean useAbsoluteFontFileNames()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean usePlatformFontMetrics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager boolean usingPerAppContextComposites()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.io.FilenameFilter getTrueTypeFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.io.FilenameFilter getType1Filter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.lang.String dotStyleStr(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager java.lang.String[] getNativeNames(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager javax.swing.plaf.FontUIResource getFontConfigFUIR(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager sun.awt.FontConfiguration getFontConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager sun.font.TrueTypeFont getEUDCFont()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void addFontToPlatformFontPath(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void addNativeFontFamilyNames(java.util.TreeMap&lt;java.lang.String,java.lang.String&gt;, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void populateFontFileNameMap(java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.lang.String&gt;, java.util.HashMap&lt;java.lang.String,java.util.ArrayList&lt;java.lang.String&gt;&gt;, java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void registerFontDir(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void registerFontDirs(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager void registerPlatformFontsUsedByFontConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.FamilyDescription FamilyDescription()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.FontRegistrationInfo FontRegistrationInfo(java.lang.String, java.lang.String[], int, boolean, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.SunFontManager.T1Filter T1Filter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.T1Filter boolean accept(java.io.File, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTFilter TTFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTFilter boolean accept(java.io.File, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTorT1Filter TTorT1Filter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunFontManager.TTorT1Filter boolean accept(java.io.File, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.SunLayoutEngine SunLayoutEngine()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.SunLayoutEngine SunLayoutEngine(sun.font.GlyphLayout.LayoutEngineKey)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.T2KFontScaler void invalidateScaler()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.T2KFontScaler void invalidateScalerContext(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabel TextLabel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory TextLabelFactory(java.awt.font.FontRenderContext, char[], java.text.Bidi, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.TextLabelFactory char[] getText()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory int getLayoutFlags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory int getLineLimit()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory int getLineStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory java.awt.font.FontRenderContext getFontRenderContext()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory java.text.Bidi getLineBidi()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextLabelFactory java.text.Bidi getParagraphBidi()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextRecord TextRecord()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextRecord void init(char[], int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.TextSource TextSource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TextSourceLabel TextSourceLabel(sun.font.TextSource)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.TextSourceLabel TextSourceLabel(sun.font.TextSource, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, java.awt.font.GlyphVector)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.TextSourceLabel sun.font.TextSource getSource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont boolean supportsJA()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont int getFontCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont int getTableOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont int getTableSize(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont java.lang.String getFullName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont sun.font.TrueTypeFont.DirectoryEntry getDirectoryEntry(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeFont.DirectoryEntry DirectoryEntry(sun.font.TrueTypeFont)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.TrueTypeFont.TTDisposerRecord TTDisposerRecord()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper boolean hasSupplementaryChars()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper char remapJAChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper int getNumGlyphs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.TrueTypeGlyphMapper int remapJAIntChar(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Type1Font java.lang.String getPostscriptName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Type1Font void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Type1Font.T1DisposerRecord T1DisposerRecord(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.Type1GlyphMapper int getMissingGlyphCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline Underline()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline sun.font.Underline getUnderline(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline.IMGrayUnderline float getLowerDrawLimit(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline.StandardUnderline StandardUnderline(float, float, float[], boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.Underline.StandardUnderline float getLineThickness(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.Underline.StandardUnderline float getLowerDrawLimit(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.X11TextRenderer X11TextRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.X11TextRenderer sun.font.X11TextRenderer traceWrap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.X11TextRenderer.Tracer Tracer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry boolean isPinned()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry int getGlyphSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry int getLastUsed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry int getXOff()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry int getYOff()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry long getGlyphInfoPtr()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.font.XRGlyphCacheEntry void setGlyphSet(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.XRGlyphCacheEntry void setLastUsed(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.XRGlyphCacheEntry void setPinned()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.font.XRGlyphCacheEntry void setUnpinned()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
