<root>
  <item name="sun.reflect.annotation.AnnotationParser AnnotationParser()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationParser boolean contains(java.lang.Object[], java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationType boolean isInherited()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.lang.Class&lt;?&gt; invocationHandlerReturnType(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.lang.annotation.RetentionPolicy retention()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.util.Map&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt; memberTypes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.util.Map&lt;java.lang.String,java.lang.Object&gt; memberDefaults()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationType java.util.Map&lt;java.lang.String,java.lang.reflect.Method&gt; members()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy AnnotationTypeMismatchExceptionProxy(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy setMember(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.annotation.EnumConstantNotPresentExceptionProxy EnumConstantNotPresentExceptionProxy(java.lang.Class&lt;? extends java.lang.Enum&gt;, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.annotation.ExceptionProxy ExceptionProxy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.annotation.TypeNotPresentExceptionProxy TypeNotPresentExceptionProxy(java.lang.String, java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
</root>
