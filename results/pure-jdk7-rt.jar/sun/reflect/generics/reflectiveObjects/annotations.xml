<root>
  <item name="sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl GenericArrayTypeImpl(java.lang.reflect.Type)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl java.lang.reflect.Type getGenericComponentType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl make(java.lang.reflect.Type)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.LazyReflectiveObjectGenerator LazyReflectiveObjectGenerator(sun.reflect.generics.factory.GenericsFactory)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.LazyReflectiveObjectGenerator sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.LazyReflectiveObjectGenerator sun.reflect.generics.visitor.Reifier getReifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.NotImplementedException NotImplementedException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl java.lang.Class&lt;?&gt; getRawType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl java.lang.reflect.Type getOwnerType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.TypeVariableImpl TypeVariableImpl(D, java.lang.String, sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.factory.GenericsFactory)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.TypeVariableImpl java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.TypeVariableImpl sun.reflect.generics.tree.FieldTypeSignature[] getBoundASTs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.WildcardTypeImpl WildcardTypeImpl(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.factory.GenericsFactory)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.WildcardTypeImpl sun.reflect.generics.reflectiveObjects.WildcardTypeImpl make(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.factory.GenericsFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.WildcardTypeImpl sun.reflect.generics.tree.FieldTypeSignature[] getLowerBoundASTs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.reflect.generics.reflectiveObjects.WildcardTypeImpl sun.reflect.generics.tree.FieldTypeSignature[] getUpperBoundASTs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
