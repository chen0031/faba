<root>
  <item name="sun.java2d.pipe.AAShapePipe AAShapePipe(sun.java2d.pipe.CompositePipe)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.AATextRenderer AATextRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.AlphaColorPipe AlphaColorPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.AlphaColorPipe boolean needTile(java.lang.Object, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.AlphaColorPipe java.lang.Object startSequence(sun.java2d.SunGraphics2D, java.awt.Shape, java.awt.Rectangle, int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.AlphaColorPipe void endSequence(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.AlphaColorPipe void skipTile(java.lang.Object, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.AlphaPaintPipe AlphaPaintPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.AlphaPaintPipe boolean needTile(java.lang.Object, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.AlphaPaintPipe void skipTile(java.lang.Object, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.BufferedBufImgOps BufferedBufImgOps()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.BufferedContext BufferedContext(sun.java2d.pipe.RenderQueue)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.BufferedContext void invalidateSurfaces()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.BufferedMaskBlit BufferedMaskBlit(sun.java2d.pipe.RenderQueue, sun.java2d.loops.SurfaceType, sun.java2d.loops.CompositeType, sun.java2d.loops.SurfaceType)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.BufferedMaskFill BufferedMaskFill(sun.java2d.pipe.RenderQueue, sun.java2d.loops.SurfaceType, sun.java2d.loops.CompositeType, sun.java2d.loops.SurfaceType)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.BufferedOpCodes BufferedOpCodes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.BufferedPaints BufferedPaints()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.BufferedRenderPipe sun.java2d.pipe.ParallelogramPipe getAAParallelogramPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.BufferedRenderPipe.AAParallelogramPipe AAParallelogramPipe(sun.java2d.pipe.BufferedRenderPipe)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.BufferedTextPipe BufferedTextPipe(sun.java2d.pipe.RenderQueue)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.BufferedTextPipe int createPackedParams(sun.java2d.SunGraphics2D, sun.font.GlyphList)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.DrawImage DrawImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.DrawImage boolean closeToInteger(int, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.DrawImage boolean isSimpleTranslate(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.GeneralCompositePipe GeneralCompositePipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.GeneralCompositePipe boolean needTile(java.lang.Object, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.GeneralCompositePipe void skipTile(java.lang.Object, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.GeneralCompositePipe.TileContext TileContext(sun.java2d.pipe.GeneralCompositePipe, sun.java2d.SunGraphics2D, java.awt.PaintContext, java.awt.CompositeContext, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.GlyphListLoopPipe GlyphListLoopPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.GlyphListPipe GlyphListPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.LCDTextRenderer LCDTextRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.LoopPipe LoopPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe NullPipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe boolean copyImage(sun.java2d.SunGraphics2D, java.awt.Image, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe boolean copyImage(sun.java2d.SunGraphics2D, java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe boolean scaleImage(sun.java2d.SunGraphics2D, java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe boolean scaleImage(sun.java2d.SunGraphics2D, java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe boolean transformImage(sun.java2d.SunGraphics2D, java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void draw(sun.java2d.SunGraphics2D, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawArc(sun.java2d.SunGraphics2D, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawChars(sun.java2d.SunGraphics2D, char[], int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawGlyphVector(sun.java2d.SunGraphics2D, java.awt.font.GlyphVector, float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawLine(sun.java2d.SunGraphics2D, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawOval(sun.java2d.SunGraphics2D, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawPolygon(sun.java2d.SunGraphics2D, int[], int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawPolyline(sun.java2d.SunGraphics2D, int[], int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawRect(sun.java2d.SunGraphics2D, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawRoundRect(sun.java2d.SunGraphics2D, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void drawString(sun.java2d.SunGraphics2D, java.lang.String, double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void fill(sun.java2d.SunGraphics2D, java.awt.Shape)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void fillArc(sun.java2d.SunGraphics2D, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void fillOval(sun.java2d.SunGraphics2D, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void fillPolygon(sun.java2d.SunGraphics2D, int[], int[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void fillRect(sun.java2d.SunGraphics2D, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void fillRoundRect(sun.java2d.SunGraphics2D, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.NullPipe void transformImage(sun.java2d.SunGraphics2D, java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.OutlineTextRenderer OutlineTextRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.PixelToParallelogramConverter PixelToParallelogramConverter(sun.java2d.pipe.ShapeDrawPipe, sun.java2d.pipe.ParallelogramPipe, double, double, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.PixelToShapeConverter PixelToShapeConverter(sun.java2d.pipe.ShapeDrawPipe)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.Region Region(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.Region boolean contains(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region boolean encompasses(sun.java2d.pipe.Region)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region boolean encompassesXYXY(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region boolean intersectsQuickCheck(sun.java2d.pipe.Region)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region boolean intersectsQuickCheckXYXY(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region boolean isInsideQuickCheck(sun.java2d.pipe.Region)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region boolean isInsideXYXY(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region boolean isRectangular()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region int clipAdd(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region int dimAdd(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region int getHiX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region int getHiY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region int getLoX()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region int getLoY()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region sun.java2d.pipe.Region getBoundsIntersectionXYXY(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region sun.java2d.pipe.Region getInstance(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region sun.java2d.pipe.Region getInstance(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region sun.java2d.pipe.Region getInstanceXYWH(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region sun.java2d.pipe.Region getInstanceXYXY(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region sun.java2d.pipe.Region getSafeTranslatedRegion(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region sun.java2d.pipe.Region getTranslatedRegion(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region sun.java2d.pipe.RegionIterator getIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region void calcBBox()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.Region void clipBoxToBounds(int[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.java2d.pipe.Region void getBounds(int[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.java2d.pipe.Region void needSpace(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.Region void setOutputArea(int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.Region void setOutputAreaXYXY(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.Region.ImmutableRegion ImmutableRegion(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.Region.ImmutableRegion void appendSpans(sun.java2d.pipe.SpanIterator)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region.ImmutableRegion void setOutputArea(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region.ImmutableRegion void setOutputArea(java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region.ImmutableRegion void setOutputAreaXYWH(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.Region.ImmutableRegion void setOutputAreaXYXY(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RegionClipSpanIterator long getNativeIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RegionClipSpanIterator void finalize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RegionIterator RegionIterator(sun.java2d.pipe.Region)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.RegionIterator boolean nextXBand(int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.java2d.pipe.RegionIterator boolean nextYRange(int[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.java2d.pipe.RegionIterator sun.java2d.pipe.RegionIterator createCopy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RegionIterator void copyStateFrom(sun.java2d.pipe.RegionIterator)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.RegionSpanIterator long getNativeIterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RegionSpanIterator void getPathBox(int[])">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.java2d.pipe.RegionSpanIterator void intersectClipBox(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.RegionSpanIterator void skipDownTo(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.RenderBuffer int capacity()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RenderBuffer int position()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RenderBuffer int remaining()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RenderBuffer long getAddress()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RenderBuffer sun.java2d.pipe.RenderBuffer skip(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.RenderBuffer void clear()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.RenderBuffer void position(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.RenderQueue sun.java2d.pipe.RenderBuffer getBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.RenderingEngine RenderingEngine()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.SolidTextRenderer SolidTextRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.SpanClipRenderer SpanClipRenderer(sun.java2d.pipe.CompositePipe)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.SpanClipRenderer.SCRcontext SCRcontext(sun.java2d.pipe.SpanClipRenderer, sun.java2d.pipe.RegionIterator, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.SpanShapeRenderer SpanShapeRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.SpanShapeRenderer.Composite Composite(sun.java2d.pipe.CompositePipe)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.SpanShapeRenderer.Simple Simple()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.SpanShapeRenderer.Simple java.lang.Object startSequence(sun.java2d.SunGraphics2D, java.awt.Shape, java.awt.Rectangle, int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.SpanShapeRenderer.Simple void endSequence(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.pipe.TextRenderer TextRenderer(sun.java2d.pipe.CompositePipe)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.pipe.ValidatePipe ValidatePipe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
