<root>
  <item name="sun.java2d.CRenderer CRenderer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.CRenderer sun.java2d.CRenderer traceWrap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.CRenderer.Tracer Tracer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.DataBufferNIOInt int[] getData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.DataBufferNIOInt int[] getData(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.DataBufferNIOInt int[][] getBankData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.DataBufferNIOInt java.nio.IntBuffer getBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.DataBufferNIOInt java.nio.IntBuffer getBuffer(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.DefaultDisposerRecord DefaultDisposerRecord(long, long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.DefaultDisposerRecord long getDataPointer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.DefaultDisposerRecord long getDisposerMethodPointer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.Disposer Disposer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.Disposer java.lang.ref.ReferenceQueue getQueue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.HeadlessGraphicsEnvironment HeadlessGraphicsEnvironment(java.awt.GraphicsEnvironment)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.HeadlessGraphicsEnvironment java.awt.GraphicsDevice getDefaultScreenDevice()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.HeadlessGraphicsEnvironment java.awt.GraphicsDevice[] getScreenDevices()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.HeadlessGraphicsEnvironment java.awt.GraphicsEnvironment getSunGraphicsEnvironment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.HeadlessGraphicsEnvironment java.awt.Point getCenterPoint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.HeadlessGraphicsEnvironment java.awt.Rectangle getMaximumWindowBounds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.IntegerNIORaster java.nio.IntBuffer getBuffer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.InvalidPipeException InvalidPipeException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.InvalidPipeException InvalidPipeException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.MacosxSurfaceManagerFactory MacosxSurfaceManagerFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData boolean copyArea(sun.java2d.SunGraphics2D, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData boolean useTightBBoxes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData int pixelFor(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData int rgbFor(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData java.awt.GraphicsConfiguration getDeviceConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData java.awt.image.Raster getRaster(int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData java.lang.Object getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData sun.java2d.SurfaceData getReplacement()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData void checkCustomComposite()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData void invalidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.NullSurfaceData void validatePipe(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.java2d.OSXOffScreenSurfaceData java.lang.Object getLockObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXOffScreenSurfaceData sun.java2d.SurfaceData createData(java.awt.image.Raster, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXSurfaceData boolean IsSimpleColor(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXSurfaceData boolean canRenderLCDText(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXSurfaceData boolean isCustomPaint(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXSurfaceData int getRendererTypeForPrimitive(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXSurfaceData java.awt.GraphicsConfiguration getDeviceConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXSurfaceData java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXSurfaceData void invalidate()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.OSXSurfaceData void markDirty(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.Spans void addInfinite()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.Spans.Span Span(float, float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.Spans.Span boolean contains(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.Spans.Span float getEnd()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.Spans.Span float getStart()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.Spans.Span int compareTo(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.Spans.Span void setEnd(float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.Spans.Span void setStart(float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.Spans.SpanIntersection SpanIntersection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.Spans.SpanIntersection int compare(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.StateTrackable.State State(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.StateTrackableDelegate StateTrackableDelegate(sun.java2d.StateTrackable.State)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.StateTrackableDelegate sun.java2d.StateTrackable.State getState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.StateTrackableDelegate void addDynamicAgent()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.StateTrackableDelegate void markDirty()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.StateTrackableDelegate void removeDynamicAgent()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.StateTrackableDelegate void setImmutable()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.StateTrackableDelegate void setUntrackable()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SunCompositeContext SunCompositeContext(java.awt.AlphaComposite, java.awt.image.ColorModel, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SunCompositeContext SunCompositeContext(sun.java2d.loops.XORComposite, java.awt.image.ColorModel, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SunCompositeContext void dispose()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D boolean clipTo(java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.java2d.SunGraphics2D boolean isRotated(double[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D int getTileIndex(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D java.awt.Color getBackground()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D java.awt.Color getColor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D java.awt.Composite getComposite()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D java.awt.Font getFont()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SunGraphics2D java.awt.Paint getPaint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D java.awt.Stroke getStroke()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D java.awt.geom.AffineTransform cloneTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D java.awt.image.ColorModel getDeviceColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D sun.java2d.Surface getDestSurface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D sun.java2d.SurfaceData getSurfaceData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D void dispose()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SunGraphics2D void finalize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SunGraphics2D void invalidatePipe()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SunGraphics2D void setBackground(java.awt.Color)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SunGraphicsEnvironment boolean isFlipStrategyPreferred(java.awt.peer.ComponentPeer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData SurfaceData(sun.java2d.StateTrackableDelegate, sun.java2d.loops.SurfaceType, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceData boolean copyArea(sun.java2d.SunGraphics2D, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData boolean isNull(sun.java2d.SurfaceData)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData boolean isSurfaceLost()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData boolean useTightBBoxes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData int getDefaultScale()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData java.lang.Object getDisposerReferent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData long getNativeOps()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData sun.java2d.StateTrackable.State getState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData sun.java2d.SurfaceDataProxy makeProxyFor(sun.java2d.SurfaceData)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData sun.java2d.loops.CompositeType getFillCompositeType(sun.java2d.SunGraphics2D)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData sun.java2d.loops.SurfaceType getSurfaceType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData sun.java2d.pipe.PixelToParallelogramConverter makeConverter(sun.java2d.pipe.AAShapePipe)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData sun.java2d.pipe.PixelToParallelogramConverter makeConverter(sun.java2d.pipe.AAShapePipe, sun.java2d.pipe.ParallelogramPipe)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData void flush()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceData void setBlitProxyKey(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceData.PixelToPgramLoopConverter PixelToPgramLoopConverter(sun.java2d.pipe.ShapeDrawPipe, sun.java2d.pipe.ParallelogramPipe, double, double, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceData.PixelToShapeLoopConverter PixelToShapeLoopConverter(sun.java2d.pipe.ShapeDrawPipe)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceDataProxy SurfaceDataProxy()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceDataProxy SurfaceDataProxy(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceDataProxy boolean isCachingAllowed()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceDataProxy boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceDataProxy sun.java2d.StateTracker getRetryTracker(sun.java2d.SurfaceData)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceDataProxy void invalidate()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceDataProxy void paletteChanged()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceDataProxy.CountdownTracker CountdownTracker(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceDataProxy.CountdownTracker boolean isCurrent()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.java2d.SurfaceManagerFactory SurfaceManagerFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.SurfaceManagerFactory sun.java2d.SurfaceManagerFactory getInstance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.java2d.UnixSurfaceManagerFactory UnixSurfaceManagerFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
