<root>
  <item name="sun.misc.ASCIICaseInsensitiveComparator ASCIICaseInsensitiveComparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ASCIICaseInsensitiveComparator boolean isLower(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ASCIICaseInsensitiveComparator boolean isUpper(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ASCIICaseInsensitiveComparator int toLower(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ASCIICaseInsensitiveComparator int toUpper(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.BASE64Decoder BASE64Decoder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.BASE64Decoder int bytesPerAtom()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.BASE64Decoder int bytesPerLine()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.BASE64Encoder BASE64Encoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.BASE64Encoder int bytesPerAtom()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.BASE64Encoder int bytesPerLine()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CEFormatException CEFormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.CEStreamExhausted CEStreamExhausted()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.CRC16 CRC16()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.CRC16 void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.CRC16 void update(byte)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Cache Cache()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Cache Cache(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Cache Cache(int, float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Cache boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Cache int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Cache java.util.Enumeration elements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Cache java.util.Enumeration keys()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Cache void init(int, float)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.CacheEntry CacheEntry()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.CacheEntry java.lang.Object reconstitute()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CacheEnumerator CacheEnumerator(sun.misc.CacheEntry[], boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.CharacterDecoder CharacterDecoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CharacterDecoder void decodeAtom(java.io.PushbackInputStream, java.io.OutputStream, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CharacterDecoder void decodeBufferPrefix(java.io.PushbackInputStream, java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CharacterDecoder void decodeBufferSuffix(java.io.PushbackInputStream, java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CharacterDecoder void decodeLineSuffix(java.io.PushbackInputStream, java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CharacterEncoder CharacterEncoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CharacterEncoder void encodeBufferSuffix(java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.CharacterEncoder void encodeLinePrefix(java.io.OutputStream, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ClassFileTransformer ClassFileTransformer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ClassFileTransformer sun.misc.ClassFileTransformer[] getTransformers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ClassLoaderUtil ClassLoaderUtil()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Cleaner Cleaner(java.lang.Object, java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.CompoundEnumeration CompoundEnumeration(java.util.Enumeration[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.ConditionLock ConditionLock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.ConditionLock ConditionLock(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.DoubleConsts DoubleConsts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.DoubleConsts void &lt;clinit&gt;()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ExtensionDependency ExtensionDependency()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ExtensionDependency void debug(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ExtensionDependency void debugException(java.lang.Throwable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ExtensionInfo ExtensionInfo()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ExtensionInstallationException ExtensionInstallationException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.FDBigInt FDBigInt(int[], int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.FDBigInt boolean dataInRangeIsZero(int, int, sun.misc.FDBigInt)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FDBigInt int cmp(sun.misc.FDBigInt)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FDBigInt sun.misc.FDBigInt add(sun.misc.FDBigInt)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FDBigInt sun.misc.FDBigInt mult(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FDBigInt sun.misc.FDBigInt mult(sun.misc.FDBigInt)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FIFOQueueEnumerator FIFOQueueEnumerator(sun.misc.Queue)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.FIFOQueueEnumerator boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FIFOQueueEnumerator java.lang.Object nextElement()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.FileURLMapper FileURLMapper(java.net.URL)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.FloatConsts FloatConsts()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FloatConsts void &lt;clinit&gt;()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FloatingDecimal FloatingDecimal(boolean, int, char[], int, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.FloatingDecimal int countBits(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FormattedFloatingDecimal FormattedFloatingDecimal(boolean, int, char[], int, boolean, int, sun.misc.FormattedFloatingDecimal.Form)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.FormattedFloatingDecimal char[] applyPrecision(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FormattedFloatingDecimal int checkExponent(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FormattedFloatingDecimal int countBits(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FormattedFloatingDecimal int getExponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FormattedFloatingDecimal int getExponentRounded()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FormattedFloatingDecimal.Form Form(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.FpUtils FpUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FpUtils boolean isFinite(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FpUtils boolean isFinite(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FpUtils boolean isInfinite(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FpUtils boolean isInfinite(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FpUtils boolean isNaN(double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FpUtils boolean isNaN(float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FpUtils boolean isUnordered(double, double)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.FpUtils boolean isUnordered(float, float)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.GC GC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.GC long currentLatencyTarget()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.GC.LatencyLock LatencyLock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.GC.LatencyRequest int compareTo(sun.misc.GC.LatencyRequest)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing Hashing()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(int, byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(int, byte[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(int, char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(int, char[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(int, int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(int, int[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing int murmur3_32(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Hashing.Holder Holder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.HexDumpEncoder HexDumpEncoder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.HexDumpEncoder int bytesPerAtom()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.HexDumpEncoder int bytesPerLine()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IOUtils IOUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.InnocuousThread void setContextClassLoader(java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.InnocuousThread void setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.InvalidJarIndexException InvalidJarIndexException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.InvalidJarIndexException InvalidJarIndexException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.IoTrace IoTrace()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IoTrace java.lang.Object fileReadBegin(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IoTrace java.lang.Object fileWriteBegin(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IoTrace java.lang.Object socketReadBegin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IoTrace java.lang.Object socketWriteBegin()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IoTrace void fileReadEnd(java.lang.Object, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IoTrace void fileWriteEnd(java.lang.Object, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IoTrace void socketReadEnd(java.lang.Object, java.net.InetAddress, int, int, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.IoTrace void socketWriteEnd(java.lang.Object, java.net.InetAddress, int, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.JarFilter JarFilter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.JarIndex java.lang.String[] getJarFiles()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.LIFOQueueEnumerator LIFOQueueEnumerator(sun.misc.Queue)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.LIFOQueueEnumerator boolean hasMoreElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.LIFOQueueEnumerator java.lang.Object nextElement()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.LRUCache LRUCache(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Launcher java.lang.ClassLoader getClassLoader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Launcher sun.misc.Launcher getLauncher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Launcher sun.misc.URLClassPath getBootstrapClassPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Launcher.BootClassPathHolder BootClassPathHolder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Launcher.Factory Factory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Lock Lock()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.MessageUtils MessageUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.MetaIndex boolean mayContain(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.NativeSignalHandler NativeSignalHandler(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.NativeSignalHandler long getHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.OSEnvironment OSEnvironment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.OSEnvironment void initialize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PathPermissions PathPermissions(java.io.File[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.PathPermissions java.net.URL getCodeBase()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PathPermissions void add(java.security.Permission)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Perf Perf()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Perf.GetPerfAction GetPerfAction()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter sun.misc.PerfCounter getD3DAvailable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter sun.misc.PerfCounter getFindClassTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter sun.misc.PerfCounter getFindClasses()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter sun.misc.PerfCounter getParentDelegationTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter sun.misc.PerfCounter getReadClassBytesTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter sun.misc.PerfCounter getZipFileCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter sun.misc.PerfCounter getZipFileOpenTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter.CoreCounters CoreCounters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerfCounter.WindowsClientCounters WindowsClientCounters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerformanceLogger PerformanceLogger()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerformanceLogger boolean loggingEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerformanceLogger.TimeData TimeData(java.lang.String, long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.PerformanceLogger.TimeData java.lang.String getMessage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PerformanceLogger.TimeData long getTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.PostVMInitHook PostVMInitHook()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ProxyGenerator int getWordsPerType(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ProxyGenerator java.lang.String dotToSlash(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ProxyGenerator.ConstantPool void setReadOnly()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.ProxyGenerator.ConstantPool.Entry Entry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ProxyGenerator.ConstantPool.IndirectEntry IndirectEntry(int, short)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.ProxyGenerator.ConstantPool.IndirectEntry IndirectEntry(int, short, short)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.ProxyGenerator.ConstantPool.IndirectEntry boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ProxyGenerator.ConstantPool.IndirectEntry int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ProxyGenerator.ConstantPool.ValueEntry ValueEntry(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.ProxyGenerator.ExceptionTableEntry ExceptionTableEntry(short, short, short, short)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Queue Queue()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Queue boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Queue java.util.Enumeration elements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Queue java.util.Enumeration reverseElements()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.QueueElement QueueElement(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.REException REException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Ref Ref()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.RegexpNode RegexpNode()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.RegexpNode RegexpNode(char, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.RegexpNode sun.misc.RegexpNode add(char)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.RegexpNode sun.misc.RegexpNode find(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.RegexpPool RegexpPool()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.RegexpPool void reset()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Request Request()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.RequestProcessor RequestProcessor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Resource Resource()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Resource java.security.CodeSigner[] getCodeSigners()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Resource java.security.cert.Certificate[] getCertificates()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Resource java.util.jar.Manifest getManifest()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Service Service()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Service java.util.Iterator providers(java.lang.Class, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Service.LazyIterator LazyIterator(java.lang.Class, java.lang.ClassLoader)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Service.LazyIterator void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ServiceConfigurationError ServiceConfigurationError(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.SharedSecrets SharedSecrets()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.SharedSecrets sun.misc.JavaAWTAccess getJavaAWTAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.SharedSecrets sun.misc.JavaLangAccess getJavaLangAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.SharedSecrets sun.misc.JavaNetAccess getJavaNetAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Signal boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Signal int getNumber()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Signal int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Signal java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.SoftCache java.lang.Object fill(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.SoftCache.Entry Entry(sun.misc.SoftCache, java.util.Map.Entry, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.SoftCache.Entry java.lang.Object getValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.SoftCache.ValueCell ValueCell(java.lang.Object, java.lang.Object, java.lang.ref.ReferenceQueue)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.SoftCache.ValueCell boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.SoftCache.ValueCell sun.misc.SoftCache.ValueCell create(java.lang.Object, java.lang.Object, java.lang.ref.ReferenceQueue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Sort Sort()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.ThreadGroupUtils ThreadGroupUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Timer boolean isStopped()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Timer java.lang.Thread getTimerThread()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Timer long getInterval()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Timer long getRemainingTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Timer long getStopTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Timer void setInterval(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.Timer void setRegular(boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.UCDecoder int bytesPerAtom()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.UCDecoder int bytesPerLine()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.UCDecoder void decodeBufferPrefix(java.io.PushbackInputStream, java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.UCEncoder UCEncoder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.UCEncoder int bytesPerAtom()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.UCEncoder int bytesPerLine()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.URLClassPath java.util.Enumeration&lt;java.net.URL&gt; findResources(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.URLClassPath java.util.Enumeration&lt;sun.misc.Resource&gt; getResources(java.lang.String, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.URLClassPath.JarLoader boolean isOptimizable(java.net.URL)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.URLClassPath.JarLoader java.util.jar.JarFile getJarFile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.URLClassPath.Loader Loader(java.net.URL)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.URLClassPath.Loader java.net.URL getBaseURL()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.URLClassPath.Loader java.net.URL[] getClassPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.UUDecoder UUDecoder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.UUDecoder int bytesPerAtom()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.UUDecoder int bytesPerLine()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.UUEncoder UUEncoder()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.UUEncoder UUEncoder(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.UUEncoder UUEncoder(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.misc.UUEncoder int bytesPerAtom()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.UUEncoder int bytesPerLine()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Unsafe Unsafe()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM VM()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM boolean allowArraySyntax()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM boolean allowGetCallerClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM boolean isBooted()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM boolean isDirectMemoryPageAligned()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM boolean threadsSuspended()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM int getFinalRefCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM int getPeakFinalRefCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM int getState()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM java.lang.Thread.State toThreadState(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM long maxDirectMemory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM void asChange(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM void asChange_otherthread(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM void initializeOSEnvironment()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM void registerVMNotification(sun.misc.VMNotification)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VM void unsuspendSomeThreads()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.VMSupport VMSupport()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.misc.Version Version()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
