<root>
  <item name="sun.nio.fs.AbstractAclFileAttributeView AbstractAclFileAttributeView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractAclFileAttributeView java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView AbstractBasicFileAttributeView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder java.util.Map&lt;java.lang.String,java.lang.Object&gt; unmodifiableMap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractFileTypeDetector boolean isTokenChar(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractFileTypeDetector boolean isValidToken(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractPath AbstractPath()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractPath java.util.Iterator&lt;java.nio.file.Path&gt; iterator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractPoller AbstractPoller()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.AbstractPoller.Request Request(sun.nio.fs.AbstractPoller.RequestType, java.lang.Object...)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.AbstractPoller.Request java.lang.Object[] parameters()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractPoller.Request sun.nio.fs.AbstractPoller.RequestType type()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractPoller.RequestType RequestType(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.AbstractUserDefinedFileAttributeView AbstractUserDefinedFileAttributeView()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractUserDefinedFileAttributeView java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey java.nio.file.Path watchable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey sun.nio.fs.AbstractWatchService watcher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.Event Event(java.nio.file.WatchEvent.Kind&lt;T&gt;, T)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.Event T context()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.Event int count()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.Event java.nio.file.WatchEvent.Kind&lt;T&gt; kind()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.Event void increment()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchKey.State State(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.AbstractWatchService boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractWatchService java.lang.Object closeLock()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.AbstractWatchService void checkOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.BsdFileSystem java.util.Set&lt;java.lang.String&gt; supportedFileAttributeViews()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.BsdFileSystem void copyNonPosixAttributes(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.BsdFileSystem.SupportedFileFileAttributeViewsHolder SupportedFileFileAttributeViewsHolder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.BsdNativeDispatcher BsdNativeDispatcher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.Cancellable int cancelValue()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.Cancellable java.lang.Throwable exception()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.Cancellable long addressToPollForCancel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.DefaultFileSystemProvider DefaultFileSystemProvider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.DefaultFileTypeDetector DefaultFileTypeDetector()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.FileOwnerAttributeViewImpl FileOwnerAttributeViewImpl(java.nio.file.attribute.AclFileAttributeView)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.FileOwnerAttributeViewImpl FileOwnerAttributeViewImpl(java.nio.file.attribute.PosixFileAttributeView)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.FileOwnerAttributeViewImpl java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.Globs Globs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.Globs boolean isGlobMeta(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.Globs boolean isRegexMeta(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.Globs char next(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.MacOSXNativeDispatcher MacOSXNativeDispatcher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.NativeBuffer int size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.NativeBuffer java.lang.Object owner()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.NativeBuffer long address()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.NativeBuffer sun.misc.Cleaner cleaner()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.NativeBuffer void setOwner(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.NativeBuffer.Deallocator Deallocator(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.NativeBuffers NativeBuffers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.PollingWatchService.CacheEntry CacheEntry(long, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.CacheEntry int lastTickCount()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.PollingWatchService.CacheEntry long lastModified()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.PollingWatchService.CacheEntry void update(long, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.PollingWatchService.PollingWatchKey boolean isValid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.PollingWatchService.PollingWatchKey java.lang.Object fileKey()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.PollingWatchService.PollingWatchKey void invalidate()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.Reflect Reflect()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory UnixChannelFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixChannelFactory.Flags Flags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixConstants UnixConstants()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixCopyFile UnixCopyFile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixCopyFile.Flags Flags()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixCopyFile.Flags sun.nio.fs.UnixCopyFile.Flags fromCopyOptions(java.nio.file.CopyOption...)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixCopyFile.Flags sun.nio.fs.UnixCopyFile.Flags fromMoveOptions(java.nio.file.CopyOption...)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream java.util.Iterator&lt;java.nio.file.Path&gt; iterator()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream java.util.Iterator&lt;java.nio.file.Path&gt; iterator(java.nio.file.DirectoryStream&lt;java.nio.file.Path&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream sun.nio.fs.UnixPath directory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream.UnixDirectoryIterator UnixDirectoryIterator(java.nio.file.DirectoryStream&lt;java.nio.file.Path&gt;)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream.UnixDirectoryIterator boolean isSelfOrParent(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixDirectoryStream.UnixDirectoryIterator void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixException UnixException(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixException UnixException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixException int errno()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixException void setError(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews UnixFileAttributeViews()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews sun.nio.fs.FileOwnerAttributeViewImpl createOwnerView(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews sun.nio.fs.UnixFileAttributeViews.Basic createBasicView(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews sun.nio.fs.UnixFileAttributeViews.Posix createPosixView(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews sun.nio.fs.UnixFileAttributeViews.Unix createUnixView(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Basic Basic(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix Posix(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Posix java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Unix Unix(sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributeViews.Unix java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes UnixFileAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isDevice()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isOther()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isRegularFile()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isSameFile(sun.nio.fs.UnixFileAttributes)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes boolean isSymbolicLink()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes int gid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes int mode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes int nlink()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes int uid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.nio.file.attribute.BasicFileAttributes asBasicFileAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.nio.file.attribute.FileTime ctime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.nio.file.attribute.FileTime lastAccessTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes java.nio.file.attribute.FileTime lastModifiedTime()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes long dev()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes long ino()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes long rdev()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes long size()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes sun.nio.fs.UnixFileKey fileKey()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes.UnixAsBasicFileAttributes UnixAsBasicFileAttributes(sun.nio.fs.UnixFileAttributes)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes.UnixAsBasicFileAttributes sun.nio.fs.UnixFileAttributes unwrap()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileAttributes.UnixAsBasicFileAttributes sun.nio.fs.UnixFileAttributes.UnixAsBasicFileAttributes wrap(sun.nio.fs.UnixFileAttributes)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileKey UnixFileKey(long, long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixFileKey boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileModeAttribute UnixFileModeAttribute()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStore V getFileStoreAttributeView(java.lang.Class&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStore long dev()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStore sun.nio.fs.UnixMountEntry entry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStore sun.nio.fs.UnixPath file()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStore.FeatureStatus FeatureStatus(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes UnixFileStoreAttributes()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes long availableBlocks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes long blockSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes long freeBlocks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileStoreAttributes long totalBlocks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem boolean isOpen()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem boolean isReadOnly()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem boolean isSolaris()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem boolean needToResolveAgainstDefaultDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem byte[] defaultDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem char[] normalizeNativePath(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.lang.Iterable&lt;java.nio.file.Path&gt; getRootDirectories()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.lang.String getSeparator()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.lang.String normalizeJavaPath(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.nio.file.spi.FileSystemProvider provider()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem java.util.List&lt;java.lang.String&gt; standardFileAttributeViews()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem sun.nio.fs.UnixPath rootDirectory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem void copyNonPosixAttributes(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.FileStoreIterator void remove()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystem.LookupService LookupService()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider java.lang.String getScheme()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixFileSystemProvider sun.nio.fs.UnixPath checkPath(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixMountEntry UnixMountEntry()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixMountEntry byte[] dir()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixMountEntry long dev()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher UnixNativeDispatcher()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher boolean supportsAtSysCalls()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixNativeDispatcher boolean supportsNoFollowLinks()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath UnixPath(sun.nio.fs.UnixFileSystem, byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixPath boolean isAbsolute()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath boolean isEmpty()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath byte[] asByteArray()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath byte[] resolve(byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath int compareTo(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath int getNameCount()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixPath int hashCode()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixFileSystem getFileSystem()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath sun.nio.fs.UnixPath toUnixPath(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath void checkNotNul(java.lang.String, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixPath void initOffsets()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream V getFileAttributeView(java.lang.Class&lt;V&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream V getFileAttributeViewImpl(sun.nio.fs.UnixPath, java.lang.Class&lt;V&gt;, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream sun.nio.fs.UnixPath getName(java.nio.file.Path)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.BasicFileAttributeViewImpl BasicFileAttributeViewImpl(sun.nio.fs.UnixSecureDirectoryStream, sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.BasicFileAttributeViewImpl java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.PosixFileAttributeViewImpl PosixFileAttributeViewImpl(sun.nio.fs.UnixSecureDirectoryStream, sun.nio.fs.UnixPath, boolean)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixSecureDirectoryStream.PosixFileAttributeViewImpl java.lang.String name()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUriUtils UnixUriUtils()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUriUtils boolean match(char, long, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUriUtils int decode(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUriUtils long highMask(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUriUtils long highMask(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUriUtils long lowMask(char, char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUriUtils long lowMask(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals UnixUserPrincipals()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals sun.nio.fs.UnixUserPrincipals.User createSpecial(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.Group Group(int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User User(int, boolean, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User User(int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User boolean isSpecial()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User int gid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User int uid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.UnixUserPrincipals.User java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.nio.fs.Util Util()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
