<root>
  <item name="sun.rmi.transport.tcp.ConnectionAcceptor ConnectionAcceptor(sun.rmi.transport.tcp.TCPTransport)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.MultiplexConnectionInfo MultiplexConnectionInfo(int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.MultiplexInputStream MultiplexInputStream(sun.rmi.transport.tcp.ConnectionMultiplexer, sun.rmi.transport.tcp.MultiplexConnectionInfo, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.MultiplexInputStream int available()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.MultiplexOutputStream MultiplexOutputStream(sun.rmi.transport.tcp.ConnectionMultiplexer, sun.rmi.transport.tcp.MultiplexConnectionInfo, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPChannel TCPChannel(sun.rmi.transport.tcp.TCPTransport, sun.rmi.transport.tcp.TCPEndpoint)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPChannel sun.rmi.transport.Endpoint getEndpoint()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPChannel void useMultiplexer(sun.rmi.transport.tcp.ConnectionMultiplexer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPConnection TCPConnection(sun.rmi.transport.tcp.TCPChannel, java.io.InputStream, java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPConnection TCPConnection(sun.rmi.transport.tcp.TCPChannel, java.net.Socket)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPConnection TCPConnection(sun.rmi.transport.tcp.TCPChannel, java.net.Socket, java.io.InputStream, java.io.OutputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPConnection boolean expired(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPConnection sun.rmi.transport.Channel getChannel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPConnection void releaseInputStream()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPConnection void setExpiration(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPConnection void setLastUseTime(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint TCPEndpoint(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint TCPEndpoint(java.lang.String, int, java.rmi.server.RMIClientSocketFactory, java.rmi.server.RMIServerSocketFactory)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint int getListenPort()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint int getPort()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint java.lang.String getHost()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint java.rmi.server.RMIClientSocketFactory getClientSocketFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint java.rmi.server.RMIServerSocketFactory getServerSocketFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint java.rmi.server.RMISocketFactory chooseFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint sun.rmi.transport.Transport getInboundTransport()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint.FQDN FQDN(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPEndpoint.FQDN java.lang.String getHost()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.rmi.transport.tcp.TCPTransport.AcceptLoop AcceptLoop(sun.rmi.transport.tcp.TCPTransport, java.net.ServerSocket)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPTransport.ConnectionHandler ConnectionHandler(sun.rmi.transport.tcp.TCPTransport, java.net.Socket, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.rmi.transport.tcp.TCPTransport.ConnectionHandler java.lang.String getClientHost()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
