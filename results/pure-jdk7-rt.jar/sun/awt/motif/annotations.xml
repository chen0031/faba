<root>
  <item name="sun.awt.motif.AWTLockAccess AWTLockAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MFontConfiguration java.lang.String getFaceNameFromComponentFontName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MFontPeer char getMissingGlyphCharacter()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit T createDragGestureRecognizer(java.lang.Class&lt;T&gt;, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit boolean isDesktopSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit boolean isDynamicLayoutSet()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit boolean isTraySupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit boolean needsXEmbedImpl()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit boolean useMotifDnD()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit int getMaximumCursorColors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.Dimension getBestCursorSize(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.Insets getScreenInsets(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.datatransfer.Clipboard getSystemClipboard()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.datatransfer.Clipboard getSystemSelection()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.dnd.peer.DragSourceContextPeer createDragSourceContextPeer(java.awt.dnd.DragGestureEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.im.spi.InputMethodDescriptor getInputMethodAdapterDescriptor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.ButtonPeer createButton(java.awt.Button)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.CanvasPeer createCanvas(java.awt.Canvas)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.CheckboxMenuItemPeer createCheckboxMenuItem(java.awt.CheckboxMenuItem)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.CheckboxPeer createCheckbox(java.awt.Checkbox)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.ChoicePeer createChoice(java.awt.Choice)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.DesktopPeer createDesktopPeer(java.awt.Desktop)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.DialogPeer createDialog(java.awt.Dialog)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.FileDialogPeer createFileDialog(java.awt.FileDialog)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.FramePeer createFrame(java.awt.Frame)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.KeyboardFocusManagerPeer getKeyboardFocusManagerPeer()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.LabelPeer createLabel(java.awt.Label)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.ListPeer createList(java.awt.List)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.MenuBarPeer createMenuBar(java.awt.MenuBar)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.MenuItemPeer createMenuItem(java.awt.MenuItem)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.MenuPeer createMenu(java.awt.Menu)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.PanelPeer createPanel(java.awt.Panel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.PopupMenuPeer createPopupMenu(java.awt.PopupMenu)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.ScrollPanePeer createScrollPane(java.awt.ScrollPane)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.ScrollbarPeer createScrollbar(java.awt.Scrollbar)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.SystemTrayPeer createSystemTray(java.awt.SystemTray)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.TextAreaPeer createTextArea(java.awt.TextArea)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.TextFieldPeer createTextField(java.awt.TextField)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.TrayIconPeer createTrayIcon(java.awt.TrayIcon)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.awt.peer.WindowPeer createWindow(java.awt.Window)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkit java.util.Map mapInputMethodHighlight(java.awt.im.InputMethodHighlight)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkitThreadBlockedHandler MToolkitThreadBlockedHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MToolkitThreadBlockedHandler sun.awt.datatransfer.ToolkitThreadBlockedHandler getToolkitThreadBlockedHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.MWindowAttributes MWindowAttributes()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.motif.X11CNS11643 boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11CNS11643.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11Dingbats boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11Dingbats java.nio.charset.CharsetDecoder newDecoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11Dingbats.Encoder boolean canEncode(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11Dingbats.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11FontMetrics int getAscent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11FontMetrics int getDescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11FontMetrics int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11FontMetrics int getLeading()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11FontMetrics int getMaxAdvance()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11FontMetrics int getMaxAscent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11FontMetrics int getMaxDescent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11FontMetrics int[] getWidths()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11GB18030_0 boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11GB18030_0 java.nio.charset.CharsetDecoder newDecoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11GB18030_0.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11GB18030_0.Encoder int encodeSingle(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11GB18030_1 boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11GB18030_1 java.nio.charset.CharsetDecoder newDecoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11GB18030_1.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11GB18030_1.Encoder int encodeSingle(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11JIS0201 boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11JIS0201.Encoder boolean canEncode(char)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11JIS0208 boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11JIS0212 boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11Johab boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11Johab java.nio.charset.CharsetDecoder newDecoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11Johab.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11SunUnicode_0 boolean contains(java.nio.charset.Charset)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11SunUnicode_0 java.nio.charset.CharsetDecoder newDecoder()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.motif.X11SunUnicode_0.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
