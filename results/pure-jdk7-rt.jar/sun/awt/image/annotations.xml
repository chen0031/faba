<root>
  <item name="sun.awt.image.BadDepthException BadDepthException()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.BufImgSurfaceData java.lang.Object getDestination()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufImgSurfaceData sun.java2d.SurfaceData createData(java.awt.image.Raster, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufImgSurfaceData void checkCustomComposite()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufImgSurfaceData.ICMColorData ICMColorData(long)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.BufImgSurfaceManager sun.java2d.SurfaceData getPrimarySurfaceData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufImgSurfaceManager sun.java2d.SurfaceData restoreContents()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufImgVolatileSurfaceManager boolean isAccelerationEnabled()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufImgVolatileSurfaceManager sun.java2d.SurfaceData initAcceleratedSurface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageDevice BufferedImageDevice(sun.awt.image.BufferedImageGraphicsConfig)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.BufferedImageDevice int getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageDevice java.awt.GraphicsConfiguration getDefaultConfiguration()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageDevice java.awt.GraphicsConfiguration[] getConfigurations()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageDevice java.lang.String getIDstring()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageGraphicsConfig java.awt.GraphicsDevice getDevice()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageGraphicsConfig java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageGraphicsConfig java.awt.geom.AffineTransform getDefaultTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageGraphicsConfig java.awt.geom.AffineTransform getNormalizingTransform()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BufferedImageGraphicsConfig java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteArrayImageSource ByteArrayImageSource(byte[])">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ByteArrayImageSource ByteArrayImageSource(byte[], int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ByteArrayImageSource boolean checkSecurity(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteBandedRaster byte[] getDataStorage(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteBandedRaster byte[][] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteBandedRaster int getDataOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteBandedRaster int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteBandedRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteComponentRaster byte[] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteComponentRaster int getDataOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteComponentRaster int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteComponentRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteInterleavedRaster byte[] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteInterleavedRaster int getDataOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteInterleavedRaster int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteInterleavedRaster int getSample(int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ByteInterleavedRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BytePackedRaster byte[] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BytePackedRaster int getDataBitOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BytePackedRaster int getPixelBitStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.BytePackedRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.FileImageSource boolean checkSecurity(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.GifFrame GifFrame(sun.awt.image.GifImageDecoder, int, int, boolean, java.awt.image.IndexColorModel, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.GifImageDecoder byte[] grow_colormap(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.GifImageDecoder int ExtractByte(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.GifImageDecoder int ExtractWord(byte[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.GifImageDecoder void error(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageAccessException ImageAccessException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ImageConsumerQueue boolean isConsumer(sun.awt.image.ImageConsumerQueue, java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageDecoder boolean isConsumer(java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageDecoder sun.awt.image.ImageConsumerQueue nextConsumer(sun.awt.image.ImageConsumerQueue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageFormatException ImageFormatException(java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ImageRepresentation int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageRepresentation int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageRepresentation java.awt.image.BufferedImage getBufferedImage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageRepresentation java.awt.image.ColorModel getColorModel()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageWatched ImageWatched()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ImageWatched.Link Link()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageWatched.Link boolean isWatcher(java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageWatched.Link boolean newInfo(java.awt.Image, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageWatched.Link sun.awt.image.ImageWatched.Link removeWatcher(java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImageWatched.WeakLink WeakLink(java.awt.image.ImageObserver, sun.awt.image.ImageWatched.Link)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ImagingLib ImagingLib()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ImagingLib int getNativeOpIndex(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.InputStreamImageSource InputStreamImageSource()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.InputStreamImageSource int countConsumers(sun.awt.image.ImageConsumerQueue)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.InputStreamImageSource sun.awt.image.ImageDecoder decoderForType(java.io.InputStream, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.InputStreamImageSource void flush()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.InputStreamImageSource void requestTopDownLeftRightResend(java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.IntegerComponentRaster int getDataOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.IntegerComponentRaster int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.IntegerComponentRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.IntegerComponentRaster int[] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.IntegerInterleavedRaster int getDataOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.IntegerInterleavedRaster int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.IntegerInterleavedRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.IntegerInterleavedRaster int[] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.JPEGImageDecoder void error(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.NativeLibLoader NativeLibLoader()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.OffScreenImageSource boolean isConsumer(java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.OffScreenImageSource void removeConsumer(java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.OffScreenImageSource void requestTopDownLeftRightResend(java.awt.image.ImageConsumer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PNGFilterInputStream PNGFilterInputStream(sun.awt.image.PNGImageDecoder, java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PNGFilterInputStream boolean markSupported()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PNGImageDecoder boolean getCheckCRC()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PNGImageDecoder int crc(byte[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PNGImageDecoder int getByte(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PNGImageDecoder int getInt(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PNGImageDecoder int getShort(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PNGImageDecoder int update_crc(int, byte[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PNGImageDecoder void filterRow(byte[], byte[], int, int, int)">
    <annotation name="org.jetbrains.annotations.ParamChange" params="0"/>
  </item>
  <item name="sun.awt.image.PNGImageDecoder.Chromaticities Chromaticities(int, int, int, int, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PNGImageDecoder.PNGException PNGException(sun.awt.image.PNGImageDecoder, java.lang.String)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter PixelConverter()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter int getAlphaMask()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Argb Argb()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Argb int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Argb int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.ArgbBm ArgbBm()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.ArgbBm int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.ArgbBm int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.ArgbPre ArgbPre()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.ArgbPre int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.ArgbPre int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Bgrx Bgrx()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Bgrx int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Bgrx int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.ByteGray ByteGray()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.ByteGray int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.ByteGray int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Rgba Rgba()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Rgba int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Rgba int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.RgbaPre RgbaPre()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.RgbaPre int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.RgbaPre int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Rgbx Rgbx()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Rgbx int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Rgbx int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort4444Argb Ushort4444Argb()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort4444Argb int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort4444Argb int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort555Rgb Ushort555Rgb()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort555Rgb int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort555Rgb int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort555Rgbx Ushort555Rgbx()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort555Rgbx int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort555Rgbx int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort565Rgb Ushort565Rgb()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort565Rgb int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Ushort565Rgb int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.UshortGray UshortGray()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.UshortGray int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.UshortGray int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Xbgr Xbgr()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Xbgr int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Xbgr int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Xrgb Xrgb()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.PixelConverter.Xrgb int pixelToRgb(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.PixelConverter.Xrgb int rgbToPixel(int, java.awt.image.ColorModel)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortBandedRaster int getDataOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortBandedRaster int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortBandedRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortBandedRaster short[] getDataStorage(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortBandedRaster short[][] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortComponentRaster int getDataOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortComponentRaster int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortComponentRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortComponentRaster short[] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortInterleavedRaster int getDataOffset(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortInterleavedRaster int getPixelStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortInterleavedRaster int getScanlineStride()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.ShortInterleavedRaster short[] getDataStorage()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SunVolatileImage int getForcedAccelSurfaceType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SunVolatileImage int getHeight()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SunVolatileImage int getWidth()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SunVolatileImage java.awt.Component getComponent()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SunVolatileImage java.awt.GraphicsConfiguration getGraphicsConfig()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SunVolatileImage java.lang.Object getProperty(java.lang.String, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SurfaceManager SurfaceManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SurfaceManager java.awt.ImageCapabilities getCapabilities(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SurfaceManager void acceleratedSurfaceLost()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SurfaceManager.ImageAccessor ImageAccessor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.SurfaceManager.ImageCapabilitiesGc ImageCapabilitiesGc(sun.awt.image.SurfaceManager, java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ToolkitImage ToolkitImage()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ToolkitImage ToolkitImage(java.awt.image.ImageProducer)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.ToolkitImage java.awt.Graphics getGraphics()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VSyncedBSManager VSyncedBSManager()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VSyncedBSManager.NoLimitVSyncBSMgr NoLimitVSyncBSMgr()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VSyncedBSManager.NoLimitVSyncBSMgr boolean checkAllowed(java.awt.image.BufferStrategy)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VSyncedBSManager.NoLimitVSyncBSMgr void relinquishVsync(java.awt.image.BufferStrategy)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VSyncedBSManager.SingleVSyncedBSMgr SingleVSyncedBSMgr()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VolatileSurfaceManager boolean contentsLost()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VolatileSurfaceManager sun.java2d.SurfaceData getPrimarySurfaceData()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VolatileSurfaceManager void paletteChanged()">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.VolatileSurfaceManager void restoreAcceleratedSurface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.VolatileSurfaceManager.AcceleratedImageCapabilities AcceleratedImageCapabilities(sun.awt.image.VolatileSurfaceManager)">
    <annotation name="org.jetbrains.annotations.LocalEffect"/>
  </item>
  <item name="sun.awt.image.VolatileSurfaceManager.AcceleratedImageCapabilities boolean isAccelerated()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
  <item name="sun.awt.image.XbmImageDecoder void error(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val name="pure" val="true"/>
    </annotation>
  </item>
</root>
