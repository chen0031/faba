<root>
  <item name="javax.lang.model.type.MirroredTypeException MirroredTypeException(javax.lang.model.type.TypeMirror) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.lang.model.type.MirroredTypeException javax.lang.model.type.TypeMirror getTypeMirror()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="virtual javax.lang.model.type.MirroredTypeException javax.lang.model.type.TypeMirror getTypeMirror()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.lang.model.type.MirroredTypeException void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.lang.model.type.MirroredTypesException MirroredTypesException(java.util.List&lt;? extends javax.lang.model.type.TypeMirror&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual javax.lang.model.type.MirroredTypesException java.util.List&lt;? extends javax.lang.model.type.TypeMirror&gt; getTypeMirrors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.lang.model.type.MirroredTypesException java.util.List&lt;? extends javax.lang.model.type.TypeMirror&gt; getTypeMirrors()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.lang.model.type.MirroredTypesException void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.lang.model.type.TypeKind boolean isPrimitive()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visit(javax.lang.model.type.TypeMirror) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visit(javax.lang.model.type.TypeMirror, P) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitArray(javax.lang.model.type.ArrayType, P) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitArray(javax.lang.model.type.ArrayType, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitArray(javax.lang.model.type.ArrayType, P)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitDeclared(javax.lang.model.type.DeclaredType, P) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitDeclared(javax.lang.model.type.DeclaredType, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitDeclared(javax.lang.model.type.DeclaredType, P)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitError(javax.lang.model.type.ErrorType, P) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitError(javax.lang.model.type.ErrorType, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitError(javax.lang.model.type.ErrorType, P)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitExecutable(javax.lang.model.type.ExecutableType, P) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitExecutable(javax.lang.model.type.ExecutableType, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitExecutable(javax.lang.model.type.ExecutableType, P)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitNoType(javax.lang.model.type.NoType, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitNull(javax.lang.model.type.NullType, P) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitNull(javax.lang.model.type.NullType, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitNull(javax.lang.model.type.NullType, P)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitPrimitive(javax.lang.model.type.PrimitiveType, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitTypeVariable(javax.lang.model.type.TypeVariable, P) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitTypeVariable(javax.lang.model.type.TypeVariable, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitTypeVariable(javax.lang.model.type.TypeVariable, P)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitWildcard(javax.lang.model.type.WildcardType, P) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitWildcard(javax.lang.model.type.WildcardType, P) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="abstract virtual javax.lang.model.type.TypeVisitor R visitWildcard(javax.lang.model.type.WildcardType, P)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.lang.model.type.UnknownTypeException java.lang.Object getArgument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="virtual javax.lang.model.type.UnknownTypeException java.lang.Object getArgument()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="javax.lang.model.type.UnknownTypeException javax.lang.model.type.TypeMirror getUnknownType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="virtual javax.lang.model.type.UnknownTypeException javax.lang.model.type.TypeMirror getUnknownType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
</root>
