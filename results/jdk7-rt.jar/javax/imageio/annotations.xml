<root>
  <item name="javax.imageio.IIOImage IIOImage(java.awt.image.Raster, java.util.List&lt;? extends java.awt.image.BufferedImage&gt;, javax.imageio.metadata.IIOMetadata) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.IIOImage IIOImage(java.awt.image.RenderedImage, java.util.List&lt;? extends java.awt.image.BufferedImage&gt;, javax.imageio.metadata.IIOMetadata) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.IIOImage void setRaster(java.awt.image.Raster) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.IIOImage void setRenderedImage(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.IIOParam void setDestinationOffset(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean access$200(java.lang.String[], java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean contains(java.lang.String[], java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean doWrite(java.awt.image.RenderedImage, javax.imageio.ImageWriter, javax.imageio.stream.ImageOutputStream)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_-&gt;true;_,null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, java.io.File) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, java.io.File) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, java.io.File) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, java.io.OutputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, java.io.OutputStream) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, javax.imageio.stream.ImageOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, javax.imageio.stream.ImageOutputStream) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO boolean write(java.awt.image.RenderedImage, java.lang.String, javax.imageio.stream.ImageOutputStream) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.awt.image.BufferedImage read(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.awt.image.BufferedImage read(java.io.InputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.awt.image.BufferedImage read(java.net.URL) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.awt.image.BufferedImage read(javax.imageio.stream.ImageInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageReader&gt; getImageReaders(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageReader&gt; getImageReadersByFormatName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageReader&gt; getImageReadersByMIMEType(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageReader&gt; getImageReadersBySuffix(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageTranscoder&gt; getImageTranscoders(javax.imageio.ImageReader, javax.imageio.ImageWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageTranscoder&gt; getImageTranscoders(javax.imageio.ImageReader, javax.imageio.ImageWriter) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageWriter&gt; getImageWriters(javax.imageio.ImageTypeSpecifier, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageWriter&gt; getImageWriters(javax.imageio.ImageTypeSpecifier, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageWriter&gt; getImageWritersByFormatName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageWriter&gt; getImageWritersByMIMEType(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO java.util.Iterator&lt;javax.imageio.ImageWriter&gt; getImageWritersBySuffix(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO javax.imageio.ImageReader getImageReader(javax.imageio.ImageWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO javax.imageio.ImageWriter getImageWriter(javax.imageio.ImageReader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO javax.imageio.ImageWriter getWriter(java.awt.image.RenderedImage, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO javax.imageio.ImageWriter getWriter(java.awt.image.RenderedImage, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO javax.imageio.stream.ImageOutputStream createImageOutputStream(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO.CanEncodeImageAndFormatFilter boolean filter(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO.SpiInfo.1 java.lang.String[] info(javax.imageio.spi.ImageReaderWriterSpi) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO.SpiInfo.2 java.lang.String[] info(javax.imageio.spi.ImageReaderWriterSpi) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO.SpiInfo.3 java.lang.String[] info(javax.imageio.spi.ImageReaderWriterSpi) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO.TranscoderFilter TranscoderFilter(javax.imageio.spi.ImageReaderSpi, javax.imageio.spi.ImageWriterSpi) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO.TranscoderFilter TranscoderFilter(javax.imageio.spi.ImageReaderSpi, javax.imageio.spi.ImageWriterSpi) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageIO.TranscoderFilter boolean filter(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader java.awt.Rectangle getSourceRegion(javax.imageio.ImageReadParam, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader java.awt.image.BufferedImage getDestination(javax.imageio.ImageReadParam, java.util.Iterator&lt;javax.imageio.ImageTypeSpecifier&gt;, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader java.util.List addToList(java.util.List, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader java.util.List removeFromList(java.util.List, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.IIOImage readAll(int, javax.imageio.ImageReadParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.ImageReadParam getDefaultReadParam()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.metadata.IIOMetadata getImageMetadata(int, java.lang.String, java.util.Set&lt;java.lang.String&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.metadata.IIOMetadata getImageMetadata(int, java.lang.String, java.util.Set&lt;java.lang.String&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.metadata.IIOMetadata getMetadata(java.lang.String, java.util.Set, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.metadata.IIOMetadata getMetadata(java.lang.String, java.util.Set, boolean, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.metadata.IIOMetadata getStreamMetadata(java.lang.String, java.util.Set&lt;java.lang.String&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader javax.imageio.metadata.IIOMetadata getStreamMetadata(java.lang.String, java.util.Set&lt;java.lang.String&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader void computeRegions(javax.imageio.ImageReadParam, int, int, java.awt.image.BufferedImage, java.awt.Rectangle, java.awt.Rectangle) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageReader void computeRegions(javax.imageio.ImageReadParam, int, int, java.awt.image.BufferedImage, java.awt.Rectangle, java.awt.Rectangle) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier ImageTypeSpecifier(java.awt.image.ColorModel, java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier ImageTypeSpecifier(java.awt.image.ColorModel, java.awt.image.SampleModel) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier ImageTypeSpecifier(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier java.awt.image.BufferedImage createBufferedImage(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier java.awt.image.ColorModel createComponentCM(java.awt.color.ColorSpace, int, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier java.awt.image.ColorModel createComponentCM(java.awt.color.ColorSpace, int, int, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;!null;_,_,_,_,false-&gt;!null;_,_,_,_,true-&gt;!null;_,_,_,false,_-&gt;!null;_,_,_,true,_-&gt;!null;null,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createBanded(java.awt.color.ColorSpace, int[], int[], int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createBanded(java.awt.color.ColorSpace, int[], int[], int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createBanded(java.awt.color.ColorSpace, int[], int[], int, boolean, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createBanded(java.awt.color.ColorSpace, int[], int[], int, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_-&gt;!null;_,!null,_,_,_,_-&gt;!null;_,_,!null,_,_,_-&gt;!null;_,_,_,_,_,false-&gt;!null;_,_,_,_,_,true-&gt;!null;_,_,_,_,false,_-&gt;!null;_,_,_,_,true,_-&gt;!null;_,_,null,_,_,_-&gt;!null;_,null,_,_,_,_-&gt;!null;null,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createFromRenderedImage(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createGrayscale(int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,false-&gt;!null;_,_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createGrayscale(int, int, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,false-&gt;!null;_,_,_,true-&gt;!null;_,_,false,_-&gt;!null;_,_,true,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createIndexed(byte[], byte[], byte[], byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createIndexed(byte[], byte[], byte[], byte[], int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createIndexed(byte[], byte[], byte[], byte[], int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createIndexed(byte[], byte[], byte[], byte[], int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_-&gt;!null;_,!null,_,_,_,_-&gt;!null;_,_,!null,_,_,_-&gt;!null;_,_,_,!null,_,_-&gt;!null;_,_,_,null,_,_-&gt;!null;_,_,null,_,_,_-&gt;!null;_,null,_,_,_,_-&gt;!null;null,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createInterleaved(java.awt.color.ColorSpace, int[], int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createInterleaved(java.awt.color.ColorSpace, int[], int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createInterleaved(java.awt.color.ColorSpace, int[], int, boolean, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;!null;_,!null,_,_,_-&gt;!null;_,_,_,_,false-&gt;!null;_,_,_,_,true-&gt;!null;_,_,_,false,_-&gt;!null;_,_,_,true,_-&gt;!null;_,null,_,_,_-&gt;!null;null,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createPacked(java.awt.color.ColorSpace, int, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createPacked(java.awt.color.ColorSpace, int, int, int, int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_,_-&gt;!null;_,_,_,_,_,_,false-&gt;!null;_,_,_,_,_,_,true-&gt;!null;null,_,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier javax.imageio.ImageTypeSpecifier createSpecifier(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Banded Banded(java.awt.color.ColorSpace, int[], int[], int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Banded Banded(java.awt.color.ColorSpace, int[], int[], int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Banded Banded(java.awt.color.ColorSpace, int[], int[], int, boolean, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Banded boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Indexed Indexed(byte[], byte[], byte[], byte[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Indexed Indexed(byte[], byte[], byte[], byte[], int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Indexed Indexed(byte[], byte[], byte[], byte[], int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Interleaved Interleaved(java.awt.color.ColorSpace, int[], int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Interleaved Interleaved(java.awt.color.ColorSpace, int[], int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Interleaved boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageTypeSpecifier.Packed Packed(java.awt.color.ColorSpace, int, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageWriteParam java.awt.Dimension[] clonePreferredTileSizes(java.awt.Dimension[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter java.awt.Dimension[] getPreferredThumbnailSizes(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam, javax.imageio.metadata.IIOMetadata, javax.imageio.metadata.IIOMetadata)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;null;_,!null,_,_-&gt;null;_,_,!null,_-&gt;null;_,_,_,!null-&gt;null;_,_,_,null-&gt;null;_,_,null,_-&gt;null;_,null,_,_-&gt;null;null,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="javax.imageio.ImageWriter javax.imageio.ImageWriteParam getDefaultWriteParam()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="javax.imageio.ImageWriter void write(java.awt.image.RenderedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
