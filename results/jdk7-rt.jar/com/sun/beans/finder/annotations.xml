<root>
  <item name="com.sun.beans.finder.AbstractFinder boolean isValid(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.AbstractFinder java.lang.reflect.Member find(java.lang.reflect.Member[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.BeanInfoFinder boolean isValid(java.lang.Class, java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder boolean isVarArgs(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder boolean isVarArgs(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.Class[] getParameters(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.Class[] getParameters(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.reflect.Constructor findConstructor(java.lang.Class, java.lang.Class[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.reflect.Constructor findConstructor(java.lang.Class, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findField(java.lang.Class, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findField(java.lang.Class, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findInstanceField(java.lang.Class, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findInstanceField(java.lang.Class, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findStaticField(java.lang.Class, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findStaticField(java.lang.Class, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder InstanceFinder(java.lang.Class, boolean, java.lang.String, java.lang.String[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder java.lang.Object find(java.lang.Class)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder java.lang.Object instantiate(java.lang.Class, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isValid(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isValid(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isVarArgs(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isVarArgs(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.Class[] getParameters(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.Class[] getParameters(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method, java.lang.reflect.Type) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method, java.lang.reflect.Type) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findInstanceMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findInstanceMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findStaticMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findStaticMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.PrimitiveWrapperMap void replacePrimitivesWithWrappers(java.lang.Class[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
