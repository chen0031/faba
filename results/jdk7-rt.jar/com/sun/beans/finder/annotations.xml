<root>
  <item name="com.sun.beans.finder.AbstractFinder T find(T[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.AbstractFinder boolean isValid(T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual com.sun.beans.finder.AbstractFinder boolean isValid(T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="abstract virtual com.sun.beans.finder.AbstractFinder boolean isVarArgs(T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="abstract virtual com.sun.beans.finder.AbstractFinder java.lang.Class&lt;?&gt;[] getParameters(T) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder boolean isVarArgs(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder boolean isVarArgs(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.Class&lt;?&gt;[] getParameters(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.Class[] getParameters(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.reflect.Constructor&lt;?&gt; findConstructor(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.ConstructorFinder java.lang.reflect.Constructor&lt;?&gt; findConstructor(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findField(java.lang.Class&lt;?&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findField(java.lang.Class&lt;?&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findInstanceField(java.lang.Class&lt;?&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findInstanceField(java.lang.Class&lt;?&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findStaticField(java.lang.Class&lt;?&gt;, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.FieldFinder java.lang.reflect.Field findStaticField(java.lang.Class&lt;?&gt;, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.InstanceFinder InstanceFinder(java.lang.Class&lt;? extends T&gt;, boolean, java.lang.String, java.lang.String...) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isValid(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isValid(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isVarArgs(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder boolean isVarArgs(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.Class&lt;?&gt;[] getParameters(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.Class[] getParameters(java.lang.reflect.Member) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method, java.lang.reflect.Type) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method, java.lang.reflect.Type) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findInstanceMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findInstanceMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findStaticMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.MethodFinder java.lang.reflect.Method findStaticMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.beans.finder.PrimitiveWrapperMap void replacePrimitivesWithWrappers(java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
