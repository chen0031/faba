<root>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader java.awt.image.BufferedImage readEmbedded(int, java.awt.image.BufferedImage, javax.imageio.ImageReadParam) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader java.awt.image.BufferedImage readEmbedded(int, java.awt.image.BufferedImage, javax.imageio.ImageReadParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader javax.imageio.ImageReadParam getDefaultReadParam()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader void access$100(com.sun.imageio.plugins.bmp.BMPImageReader, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader void access$200(com.sun.imageio.plugins.bmp.BMPImageReader, java.awt.image.BufferedImage, int, int, int, int, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader void access$300(com.sun.imageio.plugins.bmp.BMPImageReader, java.awt.image.BufferedImage) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader void access$400(com.sun.imageio.plugins.bmp.BMPImageReader, java.awt.image.BufferedImage, int, int, int, int, int, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReader void access$500(com.sun.imageio.plugins.bmp.BMPImageReader, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReaderSpi boolean canDecodeInput(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReaderSpi java.lang.String getDescription(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageReaderSpi javax.imageio.ImageReader createReaderInstance(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter boolean canEncodeImage(int, java.awt.image.ColorModel, java.awt.image.SampleModel) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter boolean canEncodeImage(int, java.awt.image.ColorModel, java.awt.image.SampleModel) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter int getPreferredCompressionType(java.awt.image.ColorModel, java.awt.image.SampleModel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter int getPreferredCompressionType(java.awt.image.ColorModel, java.awt.image.SampleModel) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter int getPreferredCompressionType(javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.ImageWriteParam getDefaultWriteParam()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;null;_,!null,_-&gt;null;_,_,!null-&gt;null;_,_,null-&gt;null;_,null,_-&gt;null;null,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void access$100(com.sun.imageio.plugins.bmp.BMPImageWriter, float) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void access$200(com.sun.imageio.plugins.bmp.BMPImageWriter, int, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void encodeRLE4(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void encodeRLE8(byte[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void write(javax.imageio.metadata.IIOMetadata, javax.imageio.IIOImage, javax.imageio.ImageWriteParam) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void writeEmbedded(javax.imageio.IIOImage, javax.imageio.ImageWriteParam) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void writeMaskToPalette(int, int, byte[], byte[], byte[], byte[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void writeMaskToPalette(int, int, byte[], byte[], byte[], byte[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void writeMaskToPalette(int, int, byte[], byte[], byte[], byte[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriter void writeMaskToPalette(int, int, byte[], byte[], byte[], byte[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriterSpi boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriterSpi java.lang.String getDescription(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPImageWriterSpi javax.imageio.ImageWriter createWriterInstance(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadata java.lang.String toISO8859(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadata javax.imageio.metadata.IIOMetadataNode addChildNode(javax.imageio.metadata.IIOMetadataNode, java.lang.String, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadata javax.imageio.metadata.IIOMetadataNode addChildNode(javax.imageio.metadata.IIOMetadataNode, java.lang.String, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null;_,!null,_-&gt;!null;_,_,!null-&gt;!null;_,_,null-&gt;!null;_,null,_-&gt;!null;null,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadata javax.imageio.metadata.IIOMetadataNode getStandardCompressionNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadata javax.imageio.metadata.IIOMetadataNode getStandardDataNode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadata org.w3c.dom.Node getAsTree(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadata void addXYZPoints(javax.imageio.metadata.IIOMetadataNode, java.lang.String, double, double, double) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadataFormat boolean canNodeAppear(java.lang.String, javax.imageio.ImageTypeSpecifier)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="com.sun.imageio.plugins.bmp.BMPMetadataFormatResources java.lang.Object[][] getContents()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
