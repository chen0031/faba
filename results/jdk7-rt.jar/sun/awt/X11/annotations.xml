<root>
  <item name="sun.awt.X11.FileDialogFilter boolean accept(java.io.File, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.FileDialogFilter boolean matches(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer java.awt.FileDialog access$100(sun.awt.X11.GtkFileDialogPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.GtkFileDialogPeer void access$000(sun.awt.X11.GtkFileDialogPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow void access$101(sun.awt.X11.InfoWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow void show(java.awt.Point, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.awt.Image access$1100(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.awt.Panel access$700(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon java.lang.Object access$1200(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.InfoWindow.Balloon.Displayer access$900(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.InfoWindow.Balloon.LiveArguments access$1000(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon sun.awt.X11.XTrayIconPeer.IconCanvas access$800(sun.awt.X11.InfoWindow.Balloon) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon void access$1300(sun.awt.X11.InfoWindow.Balloon, java.lang.String, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Balloon.ActionPerformer void mouseClicked(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip boolean access$500(sun.awt.X11.InfoWindow.Tooltip, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip boolean access$500(sun.awt.X11.InfoWindow.Tooltip, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip boolean isPointerOverTrayIcon(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip java.awt.Label access$400(sun.awt.X11.InfoWindow.Tooltip) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip sun.awt.X11.InfoWindow.Tooltip.LiveArguments access$300(sun.awt.X11.InfoWindow.Tooltip) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.InfoWindow.Tooltip void access$200(sun.awt.X11.InfoWindow.Tooltip) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void handleVSBEvent(java.awt.event.MouseEvent, java.awt.Rectangle, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void handleVSBEvent(java.awt.event.MouseEvent, java.awt.Rectangle, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintAllItems(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItem(java.awt.Graphics, java.awt.Color[], java.lang.String, int, int, int, int, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItem(java.awt.Graphics, java.awt.Color[], java.lang.String, int, int, int, int, boolean, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintItems(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle, int, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintVSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintVSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.ListHelper void paintVSB(java.awt.Graphics, java.awt.Color[], java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifColorUtilities void loadMotifDefaultColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifColorUtilities void loadSystemColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifColorUtilities void loadSystemColorsForCDE(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants int getIndexForTargetList(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDConstants void putTargetListTable(long, long[][]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol MotifDnDDragSourceProtocol(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol boolean processClientMessage(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol sun.awt.X11.XDragSourceProtocol createInstance(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDragSourceProtocol void initializeDragImpl(int, java.awt.datatransfer.Transferable, java.util.Map, long[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol MotifDnDDropTargetProtocol(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processClientMessageImpl(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processDragMotion(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processDropStart(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol boolean processTopLevelLeave(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol int getMessageType(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol sun.awt.X11.XDropTargetProtocol createInstance(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.MotifDnDDropTargetProtocol void notifyProtocolListener(sun.awt.X11.XWindow, int, int, int, int, sun.awt.X11.XClientMessageEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Native void put(long, long[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Native void putLong(long, java.util.Vector) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Native void putLongReverse(long, java.util.Vector) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.Separator void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(java.awt.Point, java.awt.Dimension, java.awt.Insets, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(java.awt.Point, java.awt.Dimension, java.awt.Insets, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(java.awt.Rectangle, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(java.awt.Rectangle, java.awt.Insets, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions WindowDimensions(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowDimensions void setClientSize(java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter WindowPropertyGetter(long, sun.awt.X11.XAtom, long, long, boolean, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter WindowPropertyGetter(long, sun.awt.X11.XAtom, long, long, boolean, sun.awt.X11.XAtom) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.WindowPropertyGetter WindowPropertyGetter(long, sun.awt.X11.XAtom, long, long, boolean, sun.awt.X11.XAtom) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAWTFormatter java.lang.String format(java.util.logging.LogRecord) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAWTLookAndFeel void initComponentDefaults(javax.swing.UIDefaults) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom long getCard32Property(sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom long toData(sun.awt.X11.XAtom[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom sun.awt.X11.XAtomList getAtomListPropertyList(sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom sun.awt.X11.XAtom[] getAtomListProperty(sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void DeleteProperty(sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomData(long, long, byte[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(long, sun.awt.X11.XAtomList) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(long, sun.awt.X11.XAtom[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XAtomList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XAtomList) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XAtom[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setAtomListProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XAtom[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setCard32Property(sun.awt.X11.XBaseWindow, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setWindowProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtom void setWindowProperty(sun.awt.X11.XBaseWindow, sun.awt.X11.XBaseWindow) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList XAtomList(sun.awt.X11.XAtom[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList sun.awt.X11.XAtomList subset(int, java.util.Map&lt;java.lang.Integer,sun.awt.X11.XAtom&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList void addAll(sun.awt.X11.XAtomList) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XAtomList void init(sun.awt.X11.XAtom[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowAbove(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowAbove(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowAbove(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowBelow(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowBelow(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowBelow(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowLeft(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowLeft(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowLeft(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowRight(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowRight(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowRight(java.awt.Rectangle, java.awt.Dimension, java.awt.Dimension) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowToScreen(java.awt.Dimension, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow java.awt.Rectangle fitWindowToScreen(java.awt.Dimension, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void access$000(sun.awt.X11.XBaseMenuWindow, sun.awt.X11.XMenuPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void addItem(java.awt.MenuItem) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void doHandleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void doHandleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void doHandleJavaPaintEvent(java.awt.event.PaintEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseMenuWindow void reloadItems(java.util.Vector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow boolean isGrabbedEvent(sun.awt.X11.XEvent, sun.awt.X11.XBaseWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Point toGlobal(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Point toLocal(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow java.awt.Rectangle toGlobal(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void checkParams(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void create(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void dispatchToWindow(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleCreateNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handleDestroyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void setWMClass(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void setWMHints(sun.awt.X11.XWMHints) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XBaseWindow void xSetBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer XButtonPeer(java.awt.Button) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintBorder(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintButtonPressed(java.awt.Graphics, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintFocus(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintText(java.awt.Graphics, java.awt.Component, java.awt.Rectangle, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void paintText(java.awt.Graphics, java.awt.Component, java.awt.Rectangle, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XButtonPeer void setBackground(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCanvasPeer XCanvasPeer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCanvasPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxMenuItemPeer void access$000(sun.awt.X11.XCheckboxMenuItemPeer, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer XCheckboxPeer(java.awt.Checkbox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer int getCheckboxSize(java.awt.FontMetrics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void keyPressed(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void mouseReleased(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintFocus(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintRadioButton(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintText(java.awt.Graphics, java.awt.Rectangle, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void paintText(java.awt.Graphics, java.awt.Rectangle, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCheckboxPeer void setBackground(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer XChoicePeer(java.awt.Choice) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean access$500(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean access$502(sun.awt.X11.XChoicePeer, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer boolean isMouseEventInChoice(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer java.awt.Component access$300(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.ListHelper access$200(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.XChoicePeer.UnfurledChoice access$700(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer sun.awt.X11.XChoicePeerListener access$400(sun.awt.X11.XChoicePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void keyPressed(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void mouseDragged(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void paintFocus(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer void setBackground(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice UnfurledChoice(sun.awt.X11.XChoicePeer, java.awt.Component) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean access$000(sun.awt.X11.XChoicePeer.UnfurledChoice, java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean access$000(sun.awt.X11.XChoicePeer.UnfurledChoice, java.awt.event.MouseEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean access$100(sun.awt.X11.XChoicePeer.UnfurledChoice, java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean access$100(sun.awt.X11.XChoicePeer.UnfurledChoice, java.awt.event.MouseEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean isMouseEventInside(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice boolean isMouseInListArea(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice java.awt.Point toLocalCoords(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XChoicePeer.UnfurledChoice void trackMouse(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard void access$300(sun.awt.X11.XClipboard) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard void access$600(sun.awt.X11.XClipboard, sun.awt.X11.XSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard void access$600(sun.awt.X11.XClipboard, sun.awt.X11.XSelectionEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard void checkChange(sun.awt.X11.XSelectionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard void setContentsNative(java.awt.datatransfer.Transferable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XClipboard.SelectionNotifyHandler void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer XComponentPeer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer int[] getRGBvals(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void addTree(java.util.Collection, java.util.Set, java.awt.Container) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void coalescePaintEvent(java.awt.event.PaintEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void createBuffers(int, java.awt.BufferCapabilities) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DOval(java.awt.Graphics, java.awt.Color, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DOval(java.awt.Graphics, java.awt.Color, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DOval(java.awt.Graphics, java.awt.Color[], int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DOval(java.awt.Graphics, java.awt.Color[], int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DRect(java.awt.Graphics, java.awt.Color, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DRect(java.awt.Graphics, java.awt.Color, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DRect(java.awt.Graphics, java.awt.Color[], int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void draw3DRect(java.awt.Graphics, java.awt.Color[], int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void drawMotif3DRect(java.awt.Graphics, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void drawScrollbar(java.awt.Graphics, java.awt.Color, int, int, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void drawScrollbar(java.awt.Graphics, java.awt.Color, int, int, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleF10JavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaFocusEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void reparent(java.awt.peer.ContainerPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XComponentPeer void updateMotifColors(java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow XContentWindow(sun.awt.X11.XDecoratedPeer, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow sun.awt.X11.XContentWindow createContent(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow void handleResize(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XContentWindow void setContentBounds(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams XCreateWindowParams(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCreateWindowParams void init(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCustomCursor XCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XCustomCursor XCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer byte[] imageToPlatformBytes(java.awt.Image, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.io.ByteArrayOutputStream convertFileListToBytes(java.util.ArrayList&lt;java.lang.String&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.lang.String getCharsetForTextFormat(java.lang.Long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDataTransferer java.net.URI[] dragQueryURIs(java.io.InputStream, byte[], long, java.awt.datatransfer.Transferable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer XDecoratedPeer(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets copy(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets difference(java.awt.Insets, java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer java.awt.Insets difference(java.awt.Insets, java.awt.Insets) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void checkShellRect(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void checkShellRectSize(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleCorrectInsets(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleFocusEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleMoved(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleReparentNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void handleWmTakeFocus(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void reshape(sun.awt.X11.WindowDimensions, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void setShellBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void setShellPosition(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void setShellSize(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDecoratedPeer void updateSizeHints(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void browse(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void launch(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void mail(java.net.URI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDesktopPeer void open(java.io.File) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDialogPeer void blockWindows(java.util.List&lt;java.awt.Window&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDialogPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol XDnDDragSourceProtocol(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processClientMessage(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processProxyModeEvent(sun.awt.X11.XClientMessageEvent, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processXdndFinished(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol boolean processXdndStatus(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol sun.awt.X11.XDragSourceProtocol createInstance(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol void initializeDragImpl(int, java.awt.datatransfer.Transferable, java.util.Map, long[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDragSourceProtocol void sendEnterMessage(long[], int, int, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol XDnDDropTargetProtocol(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processClientMessageImpl(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processXdndDrop(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processXdndLeave(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol boolean processXdndPosition(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol int getMessageType(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol sun.awt.X11.XDropTargetProtocol createInstance(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void adjustEventForForwarding(sun.awt.X11.XClientMessageEvent, sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void adjustEventForForwarding(sun.awt.X11.XClientMessageEvent, sun.awt.X11.XDropTargetProtocol.EmbedderRegistryEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void notifyProtocolListener(sun.awt.X11.XWindow, int, int, int, sun.awt.X11.XClientMessageEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void sendEnterMessageToToplevel(long, sun.awt.X11.XClientMessageEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDnDDropTargetProtocol void sendLeaveMessageToToplevel(long, sun.awt.X11.XClientMessageEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer void processDrop(sun.awt.X11.XButtonEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDragSourceContextPeer void updateTargetWindow(sun.awt.X11.XMotionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDragSourceProtocol XDragSourceProtocol(sun.awt.X11.XDragSourceProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer boolean processSunDropTargetEvent(sun.awt.dnd.SunDropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer int access$000(sun.awt.X11.XDropTargetContextPeer, java.awt.Component, int, int, int, int, long[], long, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer int access$000(sun.awt.X11.XDropTargetContextPeer, java.awt.Component, int, int, int, int, long[], long, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer sun.awt.X11.XDropTargetContextPeer getPeer(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void processDropMessage(sun.awt.dnd.SunDropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void processEnterMessage(sun.awt.dnd.SunDropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void processExitMessage(sun.awt.dnd.SunDropTargetEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer void processMotionMessage(sun.awt.dnd.SunDropTargetEvent, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetContextPeer.XDropTargetProtocolListenerImpl void handleDropTargetNotification(sun.awt.X11.XWindow, int, int, int, int, long[], long, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetEventProcessor boolean doProcessEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol XDropTargetProtocol(sun.awt.X11.XDropTargetProtocolListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol boolean processClientMessage(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetProtocol void postProcessClientMessage(sun.awt.X11.XClientMessageEvent, boolean, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry void access$000(sun.awt.X11.XDropTargetRegistry, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry void registerProtocols(long, boolean, java.util.List&lt;sun.awt.X11.XDropTargetProtocol&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry void unregisterEmbedderDropSite(long, sun.awt.X11.XDropTargetRegistry.EmbeddedDropSiteEntry) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XDropTargetRegistry.EmbeddedDropSiteEntry EmbeddedDropSiteEntry(long, long, java.util.List&lt;sun.awt.X11.XDropTargetProtocol&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer XEmbedCanvasPeer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedCanvasPeer.XEmbedServer void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer XEmbedChildProxyPeer(sun.awt.X11.XEmbedChildProxy) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedChildProxyPeer void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper long getEmbedder(sun.awt.X11.XWindowPeer, sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper long getX11KeySym(java.awt.AWTKeyStroke) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper long getX11Mods(java.awt.AWTKeyStroke) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper sun.awt.X11.XEmbeddedFramePeer access$000(sun.awt.X11.XEmbedClientHelper) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedClientHelper void handleReparentNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedHelper java.lang.String XEmbedMessageToString(sun.awt.X11.XClientMessageEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedServerTester XEmbedServerTester(java.awt.Rectangle[], long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedServerTester sun.awt.X11.XEmbedServerTester getTester(java.awt.Rectangle[], long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbedServerTester void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer boolean isEventDisabled(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleFocusEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleMotionNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleMoved(sun.awt.X11.WindowDimensions) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleReparentNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleVisibilityEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void handleXCrossingEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void reshape(sun.awt.X11.WindowDimensions, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void setModalBlocked(java.awt.Dialog, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void setModalBlocked(java.awt.Dialog, boolean, java.util.Vector) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void setShellBounds(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void setShellPosition(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddedFramePeer void setShellSize(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void forwardKeyEvent(long, java.awt.event.KeyEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void handleClientMessage(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XEmbeddingContainer void install(sun.awt.X11.XWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.IgnoreBadWindowHandler int handleError(long, sun.awt.X11.XErrorEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XErrorHandler.VerifyChangePropertyHandler int handleError(long, sun.awt.X11.XErrorEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer boolean dispatchKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer boolean updateDirectoryByUserAction(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer java.lang.String[] getDirList(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void addComponent(java.awt.Component, java.awt.GridBagLayout, java.awt.GridBagConstraints, int, int, int, int, java.awt.Container, int, int, int, java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void addComponent(java.awt.Component, java.awt.GridBagLayout, java.awt.GridBagConstraints, int, int, int, int, java.awt.Container, int, int, int, java.awt.Insets) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void addComponent(java.awt.Component, java.awt.GridBagLayout, java.awt.GridBagConstraints, int, int, int, int, java.awt.Container, int, int, int, java.awt.Insets) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void addComponent(java.awt.Component, java.awt.GridBagLayout, java.awt.GridBagConstraints, int, int, int, int, java.awt.Container, int, int, int, java.awt.Insets) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void addItemsToPathChoice(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void handleSelection(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void init(java.awt.FileDialog) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void itemStateChanged(java.awt.event.ItemEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void setFilterEntry(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFileDialogPeer void unfurledChoiceOpening(sun.awt.X11.ListHelper) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow XFocusProxyWindow(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow void handleFocusEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow void handleKeyPress(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFocusProxyWindow void handleKeyRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer XFramePeer(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer int access$000(sun.awt.X11.XFramePeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer int access$002(sun.awt.X11.XFramePeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XFramePeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGlobalCursorManager java.awt.Component findComponentAt(java.awt.Container, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XGlobalCursorManager java.awt.Point getLocationOnScreen(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XIconWindow void instantPreInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XInputMethod java.awt.Container getParent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XInputMethod void setInputMethodContext(java.awt.im.spi.InputMethodContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym boolean isKPEvent(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym int getJavaKeycodeOnly(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym int getLegacyJavaKeycodeOnly(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long getKeypadKeysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long getKeysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long xkeycode2keysym(sun.awt.X11.XKeyEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long xkeycode2keysym_noxkb(sun.awt.X11.XKeyEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long xkeycode2keysym_xkb(sun.awt.X11.XKeyEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym long xkeycode2primary_keysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XKeysym sun.awt.X11.XKeysym.Keysym2JavaKeycode getJavaKeycode(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XLabelPeer XLabelPeer(java.awt.Label) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XLabelPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XLabelPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer XListPeer(java.awt.List) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer int stringLength(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void keyPressed(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void notifyValue(sun.awt.X11.XScrollbar, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer void trackMouseDraggedScroll(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void access$000(sun.awt.X11.XListPeer.ListPainter, java.awt.Graphics, int, int, int, java.awt.Rectangle, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void access$000(sun.awt.X11.XListPeer.ListPainter, java.awt.Graphics, int, int, int, java.awt.Rectangle, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void access$100(sun.awt.X11.XListPeer.ListPainter, java.awt.Graphics, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void access$100(sun.awt.X11.XListPeer.ListPainter, java.awt.Graphics, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paint(java.awt.Graphics, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paint(java.awt.Graphics, int, int, int, java.awt.Rectangle, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintBackground(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintFocus(java.awt.Graphics, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintHorScrollbar(java.awt.Graphics, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintScrollBar(sun.awt.X11.XScrollbar, java.awt.Graphics, int, int, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintScrollBar(sun.awt.X11.XScrollbar, java.awt.Graphics, int, int, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XListPeer.ListPainter void paintVerScrollbar(java.awt.Graphics, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection boolean processClientMessage(sun.awt.X11.XEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection boolean processRootEvent(sun.awt.X11.XEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection void dispatchSelectionEvent(sun.awt.X11.XEvent, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection.1 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection.2 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMSelection.3 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer java.awt.Rectangle getSubmenuBounds(java.awt.Rectangle, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer java.awt.Rectangle getSubmenuBounds(java.awt.Rectangle, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void addHelpMenu(java.awt.Menu) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void addMenu(java.awt.Menu) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void handleF10KeyPress(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void handleKeyPress(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void init(java.awt.Frame) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuBarPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow java.awt.Rectangle getSubmenuBounds(java.awt.Rectangle, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow java.awt.Rectangle getSubmenuBounds(java.awt.Rectangle, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMenuWindow void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer XMouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer int mapDragOperationFromModifiers(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseDragGestureRecognizer void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XMouseInfoPeer boolean isWindowUnderMouse(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol int getState(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol int getStateImpl(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void requestState(sun.awt.X11.XWindow, sun.awt.X11.XAtom, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void requestState(sun.awt.X11.XWindow, sun.awt.X11.XAtom, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void requestState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setInitialState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setLayer(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void setStateHelper(sun.awt.X11.XWindowPeer, sun.awt.X11.XAtom, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XNETProtocol void unshadeKludge(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPanelPeer XPanelPeer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPanelPeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPanelPeer void setForegroundForHierarchy(java.awt.Container, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer java.awt.Rectangle getWindowBounds(java.awt.Point, java.awt.Dimension) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer java.awt.Rectangle getWindowBounds(java.awt.Point, java.awt.Dimension) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer void handleKeyPress(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XPopupMenuPeer void show(java.awt.Event) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XProtocol long checkAnchor(sun.awt.X11.XAtom, sun.awt.X11.XAtom) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XProtocol long checkAnchorImpl(sun.awt.X11.XAtom, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XRobotPeer int[] getRGBPixels(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer XScrollPanePeer(java.awt.ScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void handleEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void paintComponent(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void setUnitIncrement(java.awt.Adjustable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer void setValue(java.awt.Adjustable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollPanePeer.XScrollPaneContentWindow XScrollPaneContentWindow(java.awt.ScrollPane, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbar void paint(java.awt.Graphics, java.awt.Color[], boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbar void paintArrows(java.awt.Graphics2D, java.awt.Color, java.awt.Color, java.awt.Color) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer XScrollbarPeer(java.awt.Scrollbar) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void handleJavaKeyEvent(java.awt.event.KeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void paint(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XScrollbarPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection XSelection(sun.awt.X11.XAtom) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection long[] getFormats(sun.awt.X11.WindowPropertyGetter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection sun.awt.X11.XSelection getSelection(sun.awt.X11.XAtom) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void access$500(sun.awt.X11.XSelection, sun.awt.X11.XSelectionRequestEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void access$500(sun.awt.X11.XSelection, sun.awt.X11.XSelectionRequestEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void access$600(sun.awt.X11.XSelection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void handleSelectionRequest(sun.awt.X11.XSelectionRequestEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection void validateDataGetter(sun.awt.X11.WindowPropertyGetter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection.IncrementalDataProvider void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection.IncrementalTransferHandler void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSelection.SelectionEventHandler void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XSystemTrayPeer void addTrayIcon(sun.awt.X11.XTrayIconPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer XTextAreaPeer(java.awt.TextArea) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextArea void processInputMethodEventPublic(java.awt.event.InputMethodEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextAreaUI void installUI(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.AWTTextPane AWTTextPane(sun.awt.X11.XTextAreaPeer, javax.swing.JTextArea, sun.awt.X11.XWindow, java.awt.Container) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder java.awt.Insets getBorderInsets(java.awt.Component, java.awt.Insets) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.BevelBorder void paintBorder(java.awt.Component, java.awt.Graphics, int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler boolean setPointerIfPointOverButton(javax.swing.JButton, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler boolean setPointerIfPointOverButton(javax.swing.JButton, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler boolean setPointerIfPointOverScrollbar(javax.swing.JScrollBar, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler boolean setPointerIfPointOverScrollbar(javax.swing.JScrollBar, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toLocalSpace(java.awt.Component, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toLocalSpace(java.awt.Component, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toViewportChildLocalSpace(javax.swing.JViewport, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.Point toViewportChildLocalSpace(javax.swing.JViewport, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.event.MouseEvent newMouseEvent(java.awt.Component, java.awt.Point, java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.event.MouseEvent newMouseEvent(java.awt.Component, java.awt.Point, java.awt.event.MouseEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler java.awt.event.MouseEvent newMouseEvent(java.awt.Component, java.awt.Point, java.awt.event.MouseEvent) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void access$000(sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler, java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void access$000(sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler, java.awt.Point) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void access$100(sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void grabbed_update(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void handle(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.JavaMouseEventHandler void setPointerToUnderPoint(java.awt.Point) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollBarUI void paint(java.awt.Graphics, javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI boolean isLeftToRight(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI javax.swing.border.Border access$200(sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI javax.swing.border.Border access$202(sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI, javax.swing.border.Border) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI void installDefaults(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI void installListeners(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI void uninstallListeners(javax.swing.JScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextAreaPeer.XAWTScrollPaneUI.1 void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer XTextFieldPeer(java.awt.TextField) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer void handleJavaMouseEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.AWTTextFieldUI void installUI(javax.swing.JComponent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField XAWTTextField(sun.awt.X11.XTextFieldPeer, java.lang.String, sun.awt.X11.XComponentPeer, java.awt.Container) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField void actionPerformed(java.awt.event.ActionEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTextFieldPeer.XAWTTextField void processInputMethodEventImpl(java.awt.event.InputMethodEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isLeftMouseButton(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit boolean isRightMouseButton(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ButtonPeer createButton(java.awt.Button) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.CanvasPeer createCanvas(java.awt.Canvas) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.CheckboxPeer createCheckbox(java.awt.Checkbox) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ChoicePeer createChoice(java.awt.Choice) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.LabelPeer createLabel(java.awt.Label) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ListPeer createList(java.awt.List) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.PanelPeer createPanel(java.awt.Panel) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ScrollPanePeer createScrollPane(java.awt.ScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.ScrollbarPeer createScrollbar(java.awt.Scrollbar) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.TextAreaPeer createTextArea(java.awt.TextArea) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.awt.peer.TextFieldPeer createTextField(java.awt.TextField) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.lang.Object lazilyLoadDesktopProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit java.util.Map mapInputMethodHighlight(java.awt.im.InputMethodHighlight) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.X11.XAtom access$400(sun.awt.X11.XToolkit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.X11.XEmbedChildProxyPeer createEmbedProxy(sun.awt.X11.XEmbedChildProxy) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit sun.awt.XSettings access$000(sun.awt.X11.XToolkit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void grab(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void loadSystemColors(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void processGlobalMotionEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void processXkbChanges(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void remove(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void schedule(java.lang.Runnable, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit void ungrab(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit.1.1 1(sun.awt.X11.XToolkit.1, java.lang.ThreadGroup, java.lang.String) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit.3 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XToolkit.4 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer void access$100(sun.awt.X11.XTrayIconPeer, long, sun.awt.X11.XEventDispatcher, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer void access$200(sun.awt.X11.XTrayIconPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void handleEvent(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void mouseClicked(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void mouseDragged(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void mouseEntered(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void mouseExited(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void mouseMoved(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void mousePressed(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XTrayIconPeer.TrayIconEventProxy void mouseReleased(java.awt.event.MouseEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWINProtocol int getState(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWINProtocol void setLayer(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWINProtocol void setState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWINProtocol void unshadeKludge(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM boolean isStateChange(sun.awt.X11.XDecoratedPeer, sun.awt.X11.XPropertyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM boolean needRemap(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM boolean syncTopLevelPos(long, sun.awt.X11.XWindowAttributes) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM int getState(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM java.awt.Insets guessInsets(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM java.awt.Insets normalize(java.awt.Insets) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void removeSizeHints(sun.awt.X11.XDecoratedPeer, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setExtendedState(sun.awt.X11.XWindowPeer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setMotifDecor(sun.awt.X11.XWindow, boolean, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setShellDecor(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setShellNotResizable(sun.awt.X11.XDecoratedPeer, sun.awt.X11.WindowDimensions, java.awt.Rectangle, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM void setShellResizable(sun.awt.X11.XDecoratedPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWM.1 int handleError(long, sun.awt.X11.XErrorEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow int access$300(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow int access$310(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.awt.Window access$000(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.lang.Runnable access$400(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow java.lang.ref.WeakReference access$200(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow void access$100(sun.awt.X11.XWarningWindow) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow void handleExposeEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow void paint(java.awt.Graphics, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWarningWindow void postInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow XWindow(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow XWindow(java.awt.Component, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow int getXModifiers(java.awt.AWTKeyStroke) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow long getParentWindowID(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow long xkeycodeToKeysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow long xkeycodeToPrimaryKeysym(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void dumpKeysymArray(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleExposeEvent(java.awt.Component, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleExposeEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleKeyPress(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleKeyPress(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleKeyRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleKeyRelease(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleMotionNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handlePropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void handleXCrossingEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void logIncomingKeyEvent(sun.awt.X11.XKeyEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void postEventStatic(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void reshape(java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindow void sendEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer XWindowPeer(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer java.util.List&lt;sun.awt.IconInfo&gt; normalizeIconImages(java.util.List&lt;sun.awt.IconInfo&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void addToTransientFors(sun.awt.X11.XDialogPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void addToTransientFors(sun.awt.X11.XDialogPeer, java.util.Vector&lt;sun.awt.X11.XWindowPeer&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleButtonPressRelease(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleConfigureNotifyEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleFocusEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleMotionNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleRootPropertyNotify(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleVisibilityEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void handleXCrossingEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void preInit(sun.awt.X11.XCreateWindowParams) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void print(java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void removeTransientForHint(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void restoreTransientFor(sun.awt.X11.XWindowPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setModalBlocked(java.awt.Dialog, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer void setModalBlocked(java.awt.Dialog, boolean, java.util.Vector&lt;sun.awt.X11.XWindowPeer&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XWindowPeer.3 void dispatchEvent(sun.awt.X11.XEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XlibUtil java.awt.Point translateCoordinates(long, long, java.awt.Point) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11.XlibUtil java.awt.Rectangle translateCoordinates(long, long, java.awt.Rectangle) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
