<root>
  <item name="sun.awt.AWTAutoShutdown java.awt.AWTEvent getShutdownEvent()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTAutoShutdown void dumpPeers(sun.util.logging.PlatformLogger) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTAutoShutdown.1 1(java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset AWTCharset(java.lang.String, java.nio.charset.Charset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset java.nio.charset.CharsetDecoder newDecoder()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset java.nio.charset.CharsetEncoder newEncoder()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder Decoder(sun.awt.AWTCharset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder Decoder(sun.awt.AWTCharset, java.nio.charset.CharsetDecoder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder Decoder(sun.awt.AWTCharset, java.nio.charset.CharsetDecoder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder void implOnMalformedInput(java.nio.charset.CodingErrorAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Decoder void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder Encoder(sun.awt.AWTCharset) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder Encoder(sun.awt.AWTCharset, java.nio.charset.CharsetEncoder) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder Encoder(sun.awt.AWTCharset, java.nio.charset.CharsetEncoder) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.AWTCharset.Encoder void implOnMalformedInput(java.nio.charset.CodingErrorAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTCharset.Encoder void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTPermissionFactory java.awt.AWTPermission newPermission(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AWTPermissionFactory java.awt.AWTPermission newPermission(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext boolean isMainContext(sun.awt.AppContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext java.util.Set getAppContexts()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext sun.awt.AppContext access$002(sun.awt.AppContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.AppContext.6 java.lang.Object get(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext.6 void put(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext.6 void remove(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.AppContext.CreateThreadAction java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsConfig java.awt.geom.AffineTransform getDefaultTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsConfig java.awt.geom.AffineTransform getNormalizingTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsDevice java.lang.String getIDstring()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsDevice void enterFullScreenExclusive(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsDevice void exitFullScreenExclusive(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CGraphicsDevice void setDisplayMode(java.awt.DisplayMode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CausedFocusEvent CausedFocusEvent(java.awt.Component, int, boolean, java.awt.Component, sun.awt.CausedFocusEvent.Cause) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CausedFocusEvent java.awt.event.FocusEvent retarget(java.awt.event.FocusEvent, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.CausedFocusEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CustomCursor CustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.CustomCursor CustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings void access$000(sun.awt.DebugSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings void access$100(sun.awt.DebugSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings void access$200(sun.awt.DebugSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.DebugSettings void access$300(sun.awt.DebugSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame boolean traverseOut(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.EmbeddedFrame java.applet.Applet getAppletIfAncestorOf(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame java.awt.Point getLocationPrivate()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void addTraversingOutListeners(java.awt.KeyboardFocusManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void propertyChange(java.beans.PropertyChangeEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EmbeddedFrame void removeTraversingOutListeners(java.awt.KeyboardFocusManager) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.EventListenerAggregate EventListenerAggregate(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FocusingTextField boolean gotFocus(java.awt.Event, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FocusingTextField boolean lostFocus(java.awt.Event, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;true;_,!null-&gt;true;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration boolean isEmpty(short[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration boolean isLogicalFontFaceName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration boolean isLogicalFontFaceNameLC(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration boolean isLogicalFontFamilyName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration char[] access$1902(char[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration int getArrayIndex(java.lang.String[], java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getCompatibilityFamilyName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getLogicalFontFaceName(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String getLogicalFontFaceName(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String makeAWTFontName(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String mapFileName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String[] access$2102(java.lang.String[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration java.lang.String[] split(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.nio.charset.CharsetEncoder getFontCharsetEncoder(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.util.Vector access$2600(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration java.util.Vector splitSequence(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short access$1500(short[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short getShortArrayID(short[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$002(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$102(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1102(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1202(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1402(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$1602(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$200(java.util.HashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$302(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$402(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$502(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$602(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$702(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$802(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] access$902(short[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontConfiguration short[] toList(java.util.HashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration sun.awt.FontDescriptor[] getFontDescriptors(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration void printTable(short[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration void saveBinary(java.io.OutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration void writeShortTable(java.io.DataOutputStream, short[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler java.lang.Short getID(java.util.HashMap, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler void access$2400(sun.awt.FontConfiguration.PropertiesHandler, java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler void access$2400(sun.awt.FontConfiguration.PropertiesHandler, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler void parseProperty(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler.FontProperties java.lang.Object put(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontConfiguration.PropertiesHandler.FontProperties java.lang.Object put(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;null;_,!null-&gt;null;_,null-&gt;null;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.FontDescriptor FontDescriptor(java.lang.String, java.nio.charset.CharsetEncoder, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.FontDescriptor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.GlobalCursorManager void access$000(sun.awt.GlobalCursorManager, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.GlobalCursorManager void updateCursorImmediately(java.awt.event.InputEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HToolkit java.awt.dnd.DragGestureRecognizer createDragGestureRecognizer(java.lang.Class, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;null;_,!null,_,_,_-&gt;null;_,_,!null,_,_-&gt;null;_,_,_,_,!null-&gt;null;_,_,_,_,null-&gt;null;_,_,null,_,_-&gt;null;_,null,_,_,_-&gt;null;null,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit boolean isModalityTypeSupported(java.awt.Dialog.ModalityType)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HeadlessToolkit java.awt.dnd.DragGestureRecognizer createDragGestureRecognizer(java.lang.Class, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;null;_,!null,_,_,_-&gt;null;_,_,!null,_,_-&gt;null;_,_,_,_,!null-&gt;null;_,_,_,_,null-&gt;null;_,_,null,_,_-&gt;null;_,null,_,_,_-&gt;null;null,_,_,_,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.HorizBagLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.HorizBagLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo IconInfo(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo IconInfo(java.awt.Image) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo IconInfo(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo int[] longArrayToIntArray(long[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo java.awt.Image intArrayToImage(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo java.awt.Image intArrayToImage(int[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.IconInfo long[] intArrayToLongArray(int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.KeyboardFocusManagerPeerImpl boolean deliverFocus(java.awt.Component, java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause, java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_,_-&gt;true;_,!null,_,_,_,_,_-&gt;true;_,_,_,_,_,!null,_-&gt;true;_,_,_,_,_,_,!null-&gt;true;_,_,_,_,_,_,null-&gt;true;_,_,_,_,_,null,_-&gt;true;_,_,_,false,_,_,_-&gt;true;_,_,_,true,_,_,_-&gt;true;_,_,false,_,_,_,_-&gt;true;_,_,true,_,_,_,_-&gt;true;_,null,_,_,_,_,_-&gt;true;null,_,_,_,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.ModalityEvent ModalityEvent(java.lang.Object, sun.awt.ModalityListener, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer boolean handleEvent(java.awt.Event)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;false;_,_,_,!null-&gt;false;_,_,_,null-&gt;false;null,_,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean requestFocus(java.awt.Component, boolean, boolean, long, sun.awt.CausedFocusEvent.Cause)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;false;_,_,_,_,!null-&gt;false;_,_,_,_,null-&gt;false;_,_,false,_,_-&gt;false;_,_,true,_,_-&gt;false;_,false,_,_,_-&gt;false;_,true,_,_,_-&gt;false;null,_,_,_,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer boolean updateGraphicsData(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Dimension getMinimumSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Dimension getPreferredSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.FontMetrics getFontMetrics(java.awt.Font)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.GraphicsConfiguration getAppropriateGraphicsConfiguration(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Image createImage(java.awt.image.ImageProducer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Insets insets()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Point getLocationOnScreen()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.NullComponentPeer java.awt.Rectangle getBounds()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion int compareTo(sun.awt.OSInfo.WindowsVersion) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OSInfo.WindowsVersion java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.OrientableFlowLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PaintEventDispatcher boolean queueSurfaceDataReplacing(java.awt.Component, java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;false;_,!null-&gt;false;_,null-&gt;false;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.PaintEventDispatcher boolean shouldDoNativeBackgroundErase(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.PaintEventDispatcher java.awt.event.PaintEvent createPaintEvent(java.awt.Component, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PaintEventDispatcher java.awt.event.PaintEvent createPaintEvent(java.awt.Component, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;!null;null,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PeerEvent PeerEvent(java.lang.Object, java.lang.Runnable, java.lang.Object, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PeerEvent PeerEvent(java.lang.Object, java.lang.Runnable, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PeerEvent sun.awt.PeerEvent coalesceEvents(sun.awt.PeerEvent)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.PlatformFont java.lang.Object[] makeConvertedMultiFontChars(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PlatformFont java.lang.Object[] makeConvertedMultiFontString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PlatformFont sun.awt.CharsetString[] makeMultiCharsetString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PlatformFont sun.awt.CharsetString[] makeMultiCharsetString(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.PostEventQueue void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.RepaintArea boolean subtract(java.awt.Rectangle, java.awt.Rectangle)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;true;null,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.RepaintArea java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.RepaintArea void add(java.awt.Rectangle, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller int getIncrementFromAdjustable(java.awt.Adjustable, java.awt.event.MouseWheelEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller java.awt.Adjustable getAdjustableToScroll(java.awt.ScrollPane) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.ScrollPaneWheelScroller void scrollAdjustable(java.awt.Adjustable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback void constrainGraphics(java.awt.Graphics, java.awt.Rectangle) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback void constrainGraphics(java.awt.Graphics, java.awt.Rectangle) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback void runComponents(java.awt.Component[], java.awt.Graphics, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback void runComponents(java.awt.Component[], java.awt.Graphics, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback.PaintHeavyweightComponentsCallback void run(java.awt.Component, java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunGraphicsCallback.PrintHeavyweightComponentsCallback void run(java.awt.Component, java.awt.Graphics) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunHints.Key boolean isCompatibleValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.LCDContrastKey boolean isCompatibleValue(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunHints.Value Value(sun.awt.SunHints.Key, int, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunHints.Value void register(sun.awt.SunHints.Key, sun.awt.SunHints.Value) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunHints.Value void register(sun.awt.SunHints.Key, sun.awt.SunHints.Value) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean access$102(sun.awt.SunToolkit, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean access$102(sun.awt.SunToolkit, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,false-&gt;false;_,true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean access$200(sun.awt.SunToolkit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean access$302(sun.awt.SunToolkit, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean access$302(sun.awt.SunToolkit, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,false-&gt;false;_,true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isInstanceOf(java.lang.Class, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isInstanceOf(java.lang.Object, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isLightweightOrUnknown(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isLightweightOrUnknown(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean isModalExcluded(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit boolean isTranslucencyCapable(java.awt.GraphicsConfiguration)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit boolean setAppContext(java.lang.Object, sun.awt.AppContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Component getHeavyweightComponent(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Container getNativeContainer(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Dimension getScreenSize()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.EventQueue getSystemEventQueueImplPP(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Image createImage(java.awt.image.ImageProducer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.RenderingHints getDesktopAAHintsByName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Window createInputMethodWindow(java.lang.String, sun.awt.im.InputContext)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.awt.Window getContainingWindow(java.awt.Component)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit java.lang.Object access$000(sun.awt.SunToolkit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit java.lang.Object targetToPeer(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit java.lang.String[] getFontList()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext createNewAppContext()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext createNewAppContext(java.lang.ThreadGroup)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext getAppContext(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit sun.awt.AppContext targetToAppContext(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.SunToolkit void checkAndSetPolicy(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void dumpPeers(sun.util.logging.PlatformLogger) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void executeOnEDTAndWait(java.lang.Object, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void executeOnEventHandlerThread(java.lang.Object, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void executeOnEventHandlerThread(java.lang.Object, java.lang.Runnable, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void executeOnEventHandlerThread(sun.awt.PeerEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void initEQ(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void invokeLaterOnAppContext(sun.awt.AppContext, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void notifyModalityChange(int, java.awt.Dialog) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void notifyModalityPopped(java.awt.Dialog) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void notifyModalityPushed(java.awt.Dialog) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void postEvent(sun.awt.AppContext, java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void postEvent(sun.awt.AppContext, java.awt.AWTEvent) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void postPriorityEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit void setModalExcluded(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit.2 2(java.lang.Object, java.lang.Runnable, long, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkit.3 3(sun.awt.SunToolkit, java.lang.Object, java.lang.Runnable, long, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.SunToolkitSubclass void flushPendingEvents(sun.awt.AppContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.Symbol java.nio.charset.CharsetEncoder newEncoder()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.Symbol.Encoder boolean isLegalReplacement(byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.Symbol.Encoder java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.Symbol.Encoder java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.TimedWindowEvent TimedWindowEvent(java.awt.Window, int, java.awt.Window, int, int, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.TimedWindowEvent TimedWindowEvent(java.awt.Window, int, java.awt.Window, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.TracedEventQueue void postEvent(java.awt.AWTEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.UNIXToolkit java.lang.Object lazilyLoadDesktopProperty(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.UngrabEvent UngrabEvent(java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.UngrabEvent java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout java.lang.String fracsToString(double[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout void allocateExtraSpace(double[], java.util.BitSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VariableGridLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.VerticalBagLayout void layoutContainer(java.awt.Container) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11CustomCursor X11CustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11CustomCursor X11CustomCursor(java.awt.Image, java.awt.Point, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11CustomCursor void createNativeCursor(java.awt.Image, int[], int, int, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11CustomCursor.1CCount int compareTo(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getFileNameFromPlatformName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getObliqueLucidaFontID(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager java.lang.String getX11FontName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager javax.swing.plaf.FontUIResource getFontConfigFUIR(java.lang.String, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null;null,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager sun.awt.FontConfiguration createFontConfiguration()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager sun.awt.FontConfiguration createFontConfiguration(boolean, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,false-&gt;!null;_,true-&gt;!null;false,_-&gt;!null;true,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11FontManager void registerFontDirs(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.Image createAcceleratedImage(java.awt.Component, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null;null,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.geom.AffineTransform getDefaultTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.geom.AffineTransform getNormalizingTransform()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.ComponentColorModel createABGRCCM()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.DirectColorModel createDCM32(int, int, int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,_,_,_,false-&gt;!null;_,_,_,_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig long createBackBuffer(sun.awt.X11ComponentPeer, int, java.awt.BufferCapabilities) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig long createBackBuffer(sun.awt.X11ComponentPeer, int, java.awt.BufferCapabilities) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig sun.awt.X11GraphicsConfig getConfig(sun.awt.X11GraphicsDevice, int, int, int, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;!null;_,_,_,_,false-&gt;!null;_,_,_,_,true-&gt;!null;null,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig sun.awt.X11GraphicsConfig getConfig(sun.awt.X11GraphicsDevice, int, int, int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_-&gt;!null;null,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsConfig void flip(sun.awt.X11ComponentPeer, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities.FlipContents) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.awt.DisplayMode access$100(sun.awt.X11GraphicsDevice) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.awt.DisplayMode getDefaultDisplayMode()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.lang.String getIDstring()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice void access$000(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice void enterFullScreenExclusive(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsDevice void exitFullScreenExclusive(java.awt.Window) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean access$002(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean access$102(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean access$302(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment boolean access$502(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;false-&gt;false;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11GraphicsEnvironment java.awt.GraphicsDevice makeScreenDevice(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod boolean setLocale(java.util.Locale) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod java.util.Map mapInputMethodHighlight(java.awt.im.InputMethodHighlight) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod.IntBuffer java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod.IntBuffer void insert(int, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethod.IntBuffer void replace(int, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.X11InputMethodDescriptor java.awt.Image getInputMethodIcon(java.util.Locale)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.awt.X11InputMethodDescriptor java.util.Locale[] getAvailableLocales()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings java.util.Map update(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings long access$000(sun.awt.XSettings) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings long access$002(sun.awt.XSettings, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.awt.XSettings.Update Update(sun.awt.XSettings, byte[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
