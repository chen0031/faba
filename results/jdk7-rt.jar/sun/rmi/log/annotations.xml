<root>
  <item name="sun.rmi.log.LogHandler LogHandler()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="abstract virtual sun.rmi.log.LogHandler java.lang.Object applyUpdate(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="abstract virtual sun.rmi.log.LogHandler java.lang.Object applyUpdate(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="abstract virtual sun.rmi.log.LogHandler java.lang.Object initialSnapshot()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.LogHandler java.lang.Object readUpdate(sun.rmi.log.LogInputStream, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="virtual sun.rmi.log.LogHandler java.lang.Object readUpdate(sun.rmi.log.LogInputStream, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="sun.rmi.log.LogHandler java.lang.Object recover(java.io.InputStream)">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="virtual sun.rmi.log.LogInputStream int read(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.LogInputStream int read(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.LogOutputStream void close()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="virtual sun.rmi.log.LogOutputStream void write(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.LogOutputStream void write(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog ReliableLog(java.lang.String, sun.rmi.log.LogHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog ReliableLog(java.lang.String, sun.rmi.log.LogHandler, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog int readVersion(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog java.lang.Object recover()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog java.lang.String fName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog java.lang.String fName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog java.lang.String versionName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog java.lang.String versionName(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog java.lang.String versionName(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog java.lang.String versionName(java.lang.String, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog java.lang.reflect.Constructor&lt;? extends sun.rmi.log.ReliableLog.LogFile&gt; getLogClassConstructor()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog long logSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.rmi.log.ReliableLog long snapshotSize()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.rmi.log.ReliableLog void deleteFile(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog void writeInt(java.io.DataOutput, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog.1 1()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="sun.rmi.log.ReliableLog.1 java.lang.ClassLoader run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog.1 java.lang.Object run()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog.LogFile LogFile(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="sun.rmi.log.ReliableLog.LogFile LogFile(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.rmi.log.ReliableLog.LogFile boolean checkSpansBoundary(long)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
</root>
