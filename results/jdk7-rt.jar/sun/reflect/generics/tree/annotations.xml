<root>
  <item name="sun.reflect.generics.tree.ArrayTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.BooleanSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.BottomSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ByteSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.CharSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature void accept(sun.reflect.generics.visitor.Visitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.DoubleSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.FloatSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.FormalTypeParameter void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.IntSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.LongSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature void accept(sun.reflect.generics.visitor.Visitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ShortSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.TypeVariableSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.VoidDescriptor void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.Wildcard void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
