<root>
  <item name="sun.reflect.generics.tree.ArrayTypeSignature sun.reflect.generics.tree.ArrayTypeSignature make(sun.reflect.generics.tree.TypeSignature)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ArrayTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.BooleanSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.BottomSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ByteSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.CharSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature sun.reflect.generics.tree.ClassSignature make(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.ClassTypeSignature, sun.reflect.generics.tree.ClassTypeSignature[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null;_,!null,_-&gt;!null;_,_,!null-&gt;!null;_,_,null-&gt;!null;_,null,_-&gt;!null;null,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassSignature void accept(sun.reflect.generics.visitor.Visitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassTypeSignature sun.reflect.generics.tree.ClassTypeSignature make(java.util.List&lt;sun.reflect.generics.tree.SimpleClassTypeSignature&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ClassTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.DoubleSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.FloatSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.FormalTypeParameter sun.reflect.generics.tree.FormalTypeParameter make(java.lang.String, sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.FormalTypeParameter void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.IntSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.LongSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature sun.reflect.generics.tree.MethodTypeSignature make(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.TypeSignature[], sun.reflect.generics.tree.ReturnType, sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,!null,_,_-&gt;!null;_,_,!null,_-&gt;!null;_,_,_,!null-&gt;!null;_,_,_,null-&gt;!null;_,_,null,_-&gt;!null;_,null,_,_-&gt;!null;null,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.MethodTypeSignature void accept(sun.reflect.generics.visitor.Visitor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.ShortSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String, boolean, sun.reflect.generics.tree.TypeArgument[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;!null;_,_,!null-&gt;!null;_,_,null-&gt;!null;_,false,_-&gt;!null;_,true,_-&gt;!null;null,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.SimpleClassTypeSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.TypeVariableSignature sun.reflect.generics.tree.TypeVariableSignature make(java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.TypeVariableSignature void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.VoidDescriptor void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.Wildcard sun.reflect.generics.tree.Wildcard make(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.tree.Wildcard void accept(sun.reflect.generics.visitor.TypeTreeVisitor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
