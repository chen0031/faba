<root>
  <item name="sun.reflect.generics.visitor.Reifier java.lang.reflect.Type[] reifyTypeArguments(sun.reflect.generics.tree.TypeArgument[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.visitor.Reifier void visitArrayTypeSignature(sun.reflect.generics.tree.ArrayTypeSignature) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.visitor.Reifier void visitClassTypeSignature(sun.reflect.generics.tree.ClassTypeSignature) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.visitor.Reifier void visitFormalTypeParameter(sun.reflect.generics.tree.FormalTypeParameter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.visitor.Reifier void visitSimpleClassTypeSignature(sun.reflect.generics.tree.SimpleClassTypeSignature) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.visitor.Reifier void visitTypeVariableSignature(sun.reflect.generics.tree.TypeVariableSignature) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.reflect.generics.visitor.Reifier void visitWildcard(sun.reflect.generics.tree.Wildcard) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
