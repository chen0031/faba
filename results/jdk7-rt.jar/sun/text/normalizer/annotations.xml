<root>
  <item name="sun.text.normalizer.CharTrie char access$100(sun.text.normalizer.CharTrie) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharTrie char[] access$000(sun.text.normalizer.CharTrie) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharTrie void putIndexData(sun.text.normalizer.UCharacterProperty) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharacterIteratorWrapper CharacterIteratorWrapper(java.text.CharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.CharacterIteratorWrapper int getText(char[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.lang.String, sun.text.normalizer.NormalizerBase.Mode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.lang.String, sun.text.normalizer.NormalizerBase.Mode, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.text.CharacterIterator, sun.text.normalizer.NormalizerBase.Mode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase NormalizerBase(java.text.CharacterIterator, sun.text.normalizer.NormalizerBase.Mode, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNFSkippable(int, sun.text.normalizer.NormalizerBase.Mode) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNormalized(java.lang.String, java.text.Normalizer.Form) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNormalized(java.lang.String, java.text.Normalizer.Form) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNormalized(java.lang.String, java.text.Normalizer.Form, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase boolean isNormalized(java.lang.String, java.text.Normalizer.Form, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int findNextIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase.IsNextBoundary, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int findPreviousIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase.IsPrevBoundary, int, int, char[], int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int findPreviousIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase.IsPrevBoundary, int, int, char[], int[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int findPreviousIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase.IsPrevBoundary, int, int, char[], int[]) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int next(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int next(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int normalize(char[], int, int, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, int) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int previous(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase int previous(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase.Mode, boolean, boolean[], int) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String normalize(java.lang.String, java.text.Normalizer.Form) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String normalize(java.lang.String, java.text.Normalizer.Form) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String normalize(java.lang.String, java.text.Normalizer.Form, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase java.lang.String normalize(java.lang.String, java.text.Normalizer.Form, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long access$1000(sun.text.normalizer.UCharacterIterator, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long access$1100(sun.text.normalizer.UCharacterIterator, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long access$1100(sun.text.normalizer.UCharacterIterator, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long getNextNorm32(sun.text.normalizer.UCharacterIterator, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long getNextNorm32(sun.text.normalizer.UCharacterIterator, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase long getPrevNorm32(sun.text.normalizer.UCharacterIterator, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase void setText(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase void setText(java.text.CharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextNFDSafe boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextNFDSafe boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextTrueStarter boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsNextTrueStarter boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevNFDSafe boolean isPrevBoundary(sun.text.normalizer.UCharacterIterator, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerBase.IsPrevTrueStarter boolean isPrevBoundary(sun.text.normalizer.UCharacterIterator, int, int, char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader boolean isDataVersionAcceptable(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerDataReader void read(byte[], byte[], byte[], char[], char[]) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl boolean composeHangul(char, char, long, char[], int[], int, boolean, char[], int, sun.text.normalizer.UnicodeSet) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl char recompose(sun.text.normalizer.NormalizerImpl.RecomposeArgs, int, sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl char[] composePart(sun.text.normalizer.NormalizerImpl.ComposePartArgs, int, char[], int, int, int, sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int combine(char[], int, int, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int combine(char[], int, int, int[]) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(char[], int, int, char[], int, int, boolean, int[], sun.text.normalizer.UnicodeSet) 7">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(long, int, sun.text.normalizer.NormalizerImpl.DecomposeArgs) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int decompose(long, sun.text.normalizer.NormalizerImpl.DecomposeArgs) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getNextCC(sun.text.normalizer.NormalizerImpl.NextCCArgs) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getNextCombining(sun.text.normalizer.NormalizerImpl.NextCombiningArgs, int, sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int getPrevCC(sun.text.normalizer.NormalizerImpl.PrevArgs) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl int insertOrdered(char[], int, int, int, char, char, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl java.lang.String canonicalDecomposeWithSingleQuotation(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl long getNorm32(char[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl long getPrevNorm32(sun.text.normalizer.NormalizerImpl.PrevArgs, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.NormalizerImpl sun.text.normalizer.UnicodeSet addPropertyStarts(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableString ReplaceableString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator ReplaceableUCharacterIterator(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator ReplaceableUCharacterIterator(java.lang.StringBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.ReplaceableUCharacterIterator int getText(char[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator RuleCharacterIterator(java.lang.String, sun.text.normalizer.SymbolTable, java.text.ParsePosition) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator RuleCharacterIterator(java.lang.String, sun.text.normalizer.SymbolTable, java.text.ParsePosition) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.RuleCharacterIterator void setPos(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.TrieIterator TrieIterator(sun.text.normalizer.Trie) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.TrieIterator void calculateNextSupplementaryElement(sun.text.normalizer.RangeValueIterator.Element) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.TrieIterator void setResult(sun.text.normalizer.RangeValueIterator.Element, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UBiDiProps.IsAcceptable boolean isDataVersionAcceptable(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.lang.StringBuffer) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterIterator sun.text.normalizer.UCharacterIterator getInstance(java.text.CharacterIterator) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterProperty void setIndexData(sun.text.normalizer.CharTrie.FriendAgent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterPropertyReader boolean isDataVersionAcceptable(byte[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UCharacterPropertyReader void read(sun.text.normalizer.UCharacterProperty) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 int charAt(char[], int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 int charAt(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 int moveCodePointOffset(char[], int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UTF16 java.lang.StringBuffer append(java.lang.StringBuffer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet UnicodeSet(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet boolean resemblesPropertyPattern(sun.text.normalizer.RuleCharacterIterator, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet int getSingleCP(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet java.lang.String mungeCharName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet java.lang.StringBuffer _generatePattern(java.lang.StringBuffer, boolean, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet add(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet addAll(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPattern(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String, sun.text.normalizer.SymbolTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String, sun.text.normalizer.SymbolTable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet removeAll(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet retain(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet retainAll(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet set(sun.text.normalizer.UnicodeSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet sun.text.normalizer.UnicodeSet xor(int[], int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void _appendToPat(java.lang.StringBuffer, java.lang.String, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void applyPattern(sun.text.normalizer.RuleCharacterIterator, sun.text.normalizer.SymbolTable, java.lang.StringBuffer, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void applyPattern(sun.text.normalizer.RuleCharacterIterator, sun.text.normalizer.SymbolTable, java.lang.StringBuffer, int) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator, java.lang.StringBuffer, sun.text.normalizer.SymbolTable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator, java.lang.StringBuffer, sun.text.normalizer.SymbolTable) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.UnicodeSet void syntaxError(sun.text.normalizer.RuleCharacterIterator, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility int skipWhitespace(java.lang.String, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility int unescapeAt(java.lang.String, int[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility int unescapeAt(java.lang.String, int[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.String escape(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.StringBuffer appendNumber(java.lang.StringBuffer, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility java.lang.StringBuffer hex(int, int, java.lang.StringBuffer) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.Utility void recursiveAppendNumber(java.lang.StringBuffer, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.VersionInfo int compareTo(sun.text.normalizer.VersionInfo) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="sun.text.normalizer.VersionInfo sun.text.normalizer.VersionInfo getInstance(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
