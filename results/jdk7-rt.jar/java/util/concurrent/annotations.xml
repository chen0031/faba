<root>
  <item name="java.util.concurrent.AbstractExecutorService java.lang.Object doInvokeAny(java.util.Collection, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.lang.Object invokeAny(java.util.Collection)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.List invokeAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.Future submit(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.Future submit(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.AbstractExecutorService java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue ArrayBlockingQueue(int, boolean, java.util.Collection) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean add(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean offer(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue int drainTo(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue int drainTo(java.util.Collection, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue java.lang.Object cast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue java.lang.Object[] toArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue void checkNotNull(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue void put(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ArrayBlockingQueue.Itr Itr(java.util.concurrent.ArrayBlockingQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap ConcurrentHashMap(java.util.Map) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean containsKey(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean containsValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean remove(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean remove(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean replace(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean replace(java.lang.Object, java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap boolean replace(java.lang.Object, java.lang.Object, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap int hash(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object get(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object put(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object put(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object replace(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object replace(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.lang.Object replace(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.Enumeration elements()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.Enumeration keys()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.HashEntry entryAt(java.util.concurrent.ConcurrentHashMap.HashEntry[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap.Segment, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap java.util.concurrent.ConcurrentHashMap.Segment segmentAt(java.util.concurrent.ConcurrentHashMap.Segment[], int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap void putAll(java.util.Map) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntryIterator EntryIterator(java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntryIterator java.lang.Object next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntryIterator java.util.Map.Entry next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntrySet boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntrySet boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.EntrySet java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.HashIterator HashIterator(java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.KeyIterator KeyIterator(java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.KeySet java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Segment void rehash(java.util.concurrent.ConcurrentHashMap.HashEntry) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.ValueIterator ValueIterator(java.util.concurrent.ConcurrentHashMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.Values java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentHashMap.WriteThroughEntry java.lang.Object setValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque ConcurrentLinkedDeque(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean addAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean offerFirst(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean offerFirst(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean offerLast(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean offerLast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean removeFirstOccurrence(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque boolean removeLastOccurrence(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.lang.Object screenNullResult(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.lang.Object screenNullResult(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.Iterator descendingIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.concurrent.ConcurrentLinkedDeque.Node pred(java.util.concurrent.ConcurrentLinkedDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque java.util.concurrent.ConcurrentLinkedDeque.Node succ(java.util.concurrent.ConcurrentLinkedDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void addFirst(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void addLast(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void checkNotNull(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void linkFirst(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void linkLast(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void skipDeletedPredecessors(java.util.concurrent.ConcurrentLinkedDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void skipDeletedSuccessors(java.util.concurrent.ConcurrentLinkedDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void unlink(java.util.concurrent.ConcurrentLinkedDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void unlinkFirst(java.util.concurrent.ConcurrentLinkedDeque.Node, java.util.concurrent.ConcurrentLinkedDeque.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void unlinkLast(java.util.concurrent.ConcurrentLinkedDeque.Node, java.util.concurrent.ConcurrentLinkedDeque.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.DescendingItr java.util.concurrent.ConcurrentLinkedDeque.Node nextNode(java.util.concurrent.ConcurrentLinkedDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedDeque.Itr java.util.concurrent.ConcurrentLinkedDeque.Node nextNode(java.util.concurrent.ConcurrentLinkedDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue ConcurrentLinkedQueue(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean addAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean offer(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean offer(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue java.util.concurrent.ConcurrentLinkedQueue.Node succ(java.util.concurrent.ConcurrentLinkedQueue.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue void checkNotNull(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentLinkedQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap ConcurrentSkipListMap(java.util.SortedMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean containsKey(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean containsValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean inHalfOpenRange(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean inOpenRange(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean remove(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean remove(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean replace(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean replace(java.lang.Object, java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap boolean replace(java.lang.Object, java.lang.Object, java.lang.Object) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Comparable comparable(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Comparable comparable(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object doGet(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object doPut(java.lang.Object, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object doRemove(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object get(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object put(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object put(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object remove(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object replace(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.lang.Object replace(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Iterator entryIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Iterator keyIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.Iterator valueIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.List toList(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,_,!null,_-&gt;!null;_,_,_,false-&gt;!null;_,_,_,true-&gt;!null;_,false,_,_-&gt;!null;_,true,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node findNear(java.lang.Object, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node findNode(java.lang.Comparable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node findNode(java.lang.Comparable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap java.util.concurrent.ConcurrentSkipListMap.Node findPredecessor(java.lang.Comparable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void addIndex(java.util.concurrent.ConcurrentSkipListMap.Index, java.util.concurrent.ConcurrentSkipListMap.HeadIndex, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void addIndex(java.util.concurrent.ConcurrentSkipListMap.Index, java.util.concurrent.ConcurrentSkipListMap.HeadIndex, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void buildFromSorted(java.util.SortedMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntryIterator EntryIterator(java.util.concurrent.ConcurrentSkipListMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntryIterator java.lang.Object next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntryIterator java.util.Map.Entry next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntrySet boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.EntrySet boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Index boolean link(java.util.concurrent.ConcurrentSkipListMap.Index, java.util.concurrent.ConcurrentSkipListMap.Index) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.Iter Iter(java.util.concurrent.ConcurrentSkipListMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeyIterator KeyIterator(java.util.concurrent.ConcurrentSkipListMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet descendingSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet headSet(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet headSet(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,_,!null,_-&gt;!null;_,_,_,false-&gt;!null;_,_,_,true-&gt;!null;_,_,null,_-&gt;!null;_,false,_,_-&gt;!null;_,true,_,_-&gt;!null;null,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet subSet(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet tailSet(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.NavigableSet tailSet(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.SortedSet headSet(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.SortedSet subSet(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.KeySet java.util.SortedSet tailSet(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$100(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$400(java.util.concurrent.ConcurrentSkipListMap.SubMap, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$500(java.util.concurrent.ConcurrentSkipListMap.SubMap, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean access$700(java.util.concurrent.ConcurrentSkipListMap.SubMap, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean containsKey(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean containsValue(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean isBeforeEnd(java.util.concurrent.ConcurrentSkipListMap.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap boolean replace(java.lang.Object, java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.lang.Object get(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.lang.Object put(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.lang.Object replace(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Iterator entryIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Iterator keyIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.Iterator valueIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap descendingMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap headMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap headMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,_,!null,_-&gt;!null;_,_,_,false-&gt;!null;_,_,_,true-&gt;!null;_,false,_,_-&gt;!null;_,true,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap tailMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.NavigableMap tailMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap headMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap headMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap tailMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.SortedMap tailMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap descendingMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,_,!null,_-&gt;!null;_,_,_,false-&gt;!null;_,_,_,true-&gt;!null;_,false,_,_-&gt;!null;_,true,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap access$600(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.Node access$200(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.Node access$300(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap descendingMap()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap headMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap headMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap headMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap headMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap newSubMap(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,_,!null,_-&gt;!null;_,_,_,false-&gt;!null;_,_,_,true-&gt;!null;_,_,null,_-&gt;!null;_,false,_,_-&gt;!null;_,true,_,_-&gt;!null;null,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap subMap(java.lang.Object, boolean, java.lang.Object, boolean) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,_,!null,_-&gt;!null;_,_,_,false-&gt;!null;_,_,_,true-&gt;!null;_,false,_,_-&gt;!null;_,true,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap subMap(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap subMap(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap subMap(java.lang.Object, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap tailMap(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap tailMap(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap tailMap(java.lang.Object, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap java.util.concurrent.ConcurrentSkipListMap.SubMap tailMap(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap void checkKeyBounds(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapEntryIterator SubMapEntryIterator(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapEntryIterator java.lang.Object next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapEntryIterator java.util.Map.Entry next()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapIter SubMapIter(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapKeyIterator SubMapKeyIterator(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.SubMap.SubMapValueIterator SubMapValueIterator(java.util.concurrent.ConcurrentSkipListMap.SubMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListMap.ValueIterator ValueIterator(java.util.concurrent.ConcurrentSkipListMap) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet ConcurrentSkipListSet(java.util.SortedSet) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet boolean removeAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet java.util.NavigableSet descendingSet()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet java.util.NavigableSet headSet(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;_,_,!null,_-&gt;!null;_,_,_,false-&gt;!null;_,_,_,true-&gt;!null;_,_,null,_-&gt;!null;_,false,_,_-&gt;!null;_,true,_,_-&gt;!null;null,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ConcurrentSkipListSet java.util.NavigableSet tailSet(java.lang.Object, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList CopyOnWriteArrayList(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList CopyOnWriteArrayList(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean add(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean addAll(int, java.util.Collection) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean addAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList boolean containsAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList int addAllAbsent(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.lang.Object get(java.lang.Object[], int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.lang.Object[] toArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.util.List subList(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.util.ListIterator listIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList java.util.ListIterator listIterator(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList void access$100(java.util.concurrent.CopyOnWriteArrayList, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubList java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubList java.util.List subList(int, int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubList java.util.ListIterator listIterator(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CopyOnWriteArrayList.COWSubListIterator COWSubListIterator(java.util.List, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CountDownLatch boolean await(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CountDownLatch java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.CyclicBarrier int await(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue boolean offer(java.util.concurrent.Delayed)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.DelayQueue int drainTo(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue int drainTo(java.util.Collection, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.PriorityQueue access$100(java.util.concurrent.DelayQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.concurrent.Delayed poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.DelayQueue java.util.concurrent.locks.ReentrantLock access$000(java.util.concurrent.DelayQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger boolean tryCancel(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger boolean tryCancel(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.Exchanger java.lang.Object await(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger java.lang.Object awaitNanos(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger java.lang.Object exchange(java.lang.Object, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Exchanger java.lang.Object spinWait(java.util.concurrent.Exchanger.Node, java.util.concurrent.Exchanger.Slot) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService ExecutorCompletionService(java.util.concurrent.Executor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService ExecutorCompletionService(java.util.concurrent.Executor, java.util.concurrent.BlockingQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService ExecutorCompletionService(java.util.concurrent.Executor, java.util.concurrent.BlockingQueue) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService java.util.concurrent.BlockingQueue access$000(java.util.concurrent.ExecutorCompletionService) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService java.util.concurrent.Future submit(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ExecutorCompletionService.QueueingFuture QueueingFuture(java.util.concurrent.ExecutorCompletionService, java.util.concurrent.RunnableFuture) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable callable(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable callable(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable callable(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable callable(java.lang.Runnable, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable callable(java.security.PrivilegedAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable callable(java.security.PrivilegedAction)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newCachedThreadPool()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newFixedThreadPool(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newFixedThreadPool(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newFixedThreadPool(int, java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newSingleThreadExecutor()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int, java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ThreadFactory defaultThreadFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors java.util.concurrent.ThreadFactory privilegedThreadFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.DefaultThreadFactory java.lang.Thread newThread(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallable java.util.concurrent.Callable access$000(java.util.concurrent.Executors.PrivilegedCallable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader java.lang.ClassLoader access$100(java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader java.util.concurrent.Callable access$200(java.util.concurrent.Executors.PrivilegedCallableUsingCurrentClassLoader) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory java.lang.ClassLoader access$300(java.util.concurrent.Executors.PrivilegedThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory java.lang.Thread newThread(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Executors.PrivilegedThreadFactory java.security.AccessControlContext access$400(java.util.concurrent.Executors.PrivilegedThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool ForkJoinPool(int, java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory, java.lang.Thread.UncaughtExceptionHandler, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean awaitTermination(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean scan(java.util.concurrent.ForkJoinWorkerThread, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean tryAwaitWork(java.util.concurrent.ForkJoinWorkerThread, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool boolean tryTerminate(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;true-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.lang.Object invoke(java.util.concurrent.ForkJoinTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.lang.String nextWorkerName()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.List invokeAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask submit(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask submit(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask submit(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask submit(java.lang.Runnable, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask submit(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask submit(java.util.concurrent.Callable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask submit(java.util.concurrent.ForkJoinTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.ForkJoinTask submit(java.util.concurrent.ForkJoinTask)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void awaitBlocker(java.util.concurrent.ForkJoinPool.ManagedBlocker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread, java.lang.Throwable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void execute(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void execute(java.util.concurrent.ForkJoinTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void idleAwaitWork(java.util.concurrent.ForkJoinWorkerThread, long, long, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void timedAwaitJoin(java.util.concurrent.ForkJoinTask, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void tryAwaitJoin(java.util.concurrent.ForkJoinTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool void work(java.util.concurrent.ForkJoinWorkerThread) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinPool.DefaultForkJoinWorkerThreadFactory java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.lang.Object get(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.Collection invokeAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.Collection invokeAll(java.util.Collection)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask adapt(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask adapt(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask adapt(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask adapt(java.lang.Runnable, java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask adapt(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask adapt(java.util.concurrent.Callable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask java.util.concurrent.ForkJoinTask fork()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void invokeAll(java.util.concurrent.ForkJoinTask, java.util.concurrent.ForkJoinTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void invokeAll(java.util.concurrent.ForkJoinTask, java.util.concurrent.ForkJoinTask) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void invokeAll(java.util.concurrent.ForkJoinTask[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask.AdaptedCallable AdaptedCallable(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinTask.AdaptedRunnable AdaptedRunnable(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread ForkJoinWorkerThread(java.util.concurrent.ForkJoinPool) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread int joinTask(java.util.concurrent.ForkJoinTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ForkJoinWorkerThread int tryDeqAndExec(java.util.concurrent.ForkJoinTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.FutureTask FutureTask(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.FutureTask FutureTask(java.util.concurrent.Callable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.FutureTask java.lang.Object get(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque LinkedBlockingDeque(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean add(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean linkFirst(java.util.concurrent.LinkedBlockingDeque.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean linkLast(java.util.concurrent.LinkedBlockingDeque.Node)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerFirst(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerFirst(java.lang.Object, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerFirst(java.lang.Object, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerLast(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerLast(java.lang.Object, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean offerLast(java.lang.Object, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean removeFirstOccurrence(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque boolean removeLastOccurrence(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque int drainTo(java.util.Collection, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.lang.Object pollFirst(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.lang.Object pollLast(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.lang.Object[] toArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.util.Iterator descendingIterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void putFirst(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void putLast(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void unlink(java.util.concurrent.LinkedBlockingDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.AbstractItr AbstractItr(java.util.concurrent.LinkedBlockingDeque) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr DescendingItr(java.util.concurrent.LinkedBlockingDeque) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr DescendingItr(java.util.concurrent.LinkedBlockingDeque, java.util.concurrent.LinkedBlockingDeque.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.DescendingItr java.util.concurrent.LinkedBlockingDeque.Node nextNode(java.util.concurrent.LinkedBlockingDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr Itr(java.util.concurrent.LinkedBlockingDeque) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr Itr(java.util.concurrent.LinkedBlockingDeque, java.util.concurrent.LinkedBlockingDeque.1) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingDeque.Itr java.util.concurrent.LinkedBlockingDeque.Node nextNode(java.util.concurrent.LinkedBlockingDeque.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue LinkedBlockingQueue(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean offer(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue int drainTo(java.util.Collection, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.lang.Object[] toArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue java.util.concurrent.LinkedBlockingQueue.Node access$000(java.util.concurrent.LinkedBlockingQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void put(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void unlink(java.util.concurrent.LinkedBlockingQueue.Node, java.util.concurrent.LinkedBlockingQueue.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void unlink(java.util.concurrent.LinkedBlockingQueue.Node, java.util.concurrent.LinkedBlockingQueue.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue.Itr Itr(java.util.concurrent.LinkedBlockingQueue) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedBlockingQueue.Itr java.util.concurrent.LinkedBlockingQueue.Node nextNode(java.util.concurrent.LinkedBlockingQueue.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean add(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean findAndRemove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean offer(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true;null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_-&gt;true;_,_,!null-&gt;true;_,_,null-&gt;true;null,_,_-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue boolean tryTransfer(java.lang.Object, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int drainTo(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue int drainTo(java.util.Collection, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.lang.Object awaitMatch(java.util.concurrent.LinkedTransferQueue.Node, java.util.concurrent.LinkedTransferQueue.Node, java.lang.Object, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.lang.Object cast(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue java.util.concurrent.LinkedTransferQueue.Node succ(java.util.concurrent.LinkedTransferQueue.Node) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue void unsplice(java.util.concurrent.LinkedTransferQueue.Node, java.util.concurrent.LinkedTransferQueue.Node) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.LinkedTransferQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser int awaitAdvanceInterruptibly(int, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser java.lang.String badArrive(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser java.lang.String badRegister(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser java.lang.String stateToString(long)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Phaser java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue PriorityBlockingQueue(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue boolean offer(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue boolean offer(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue int drainTo(java.util.Collection, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue java.lang.Object[] toArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void siftUpComparable(int, java.lang.Object, java.lang.Object[]) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void siftUpUsingComparator(int, java.lang.Object, java.lang.Object[], java.util.Comparator) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.PriorityBlockingQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor(int, java.util.concurrent.RejectedExecutionHandler) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor boolean access$100(java.util.concurrent.ScheduledThreadPoolExecutor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.RunnableScheduledFuture decorateTask(java.util.concurrent.Callable, java.util.concurrent.RunnableScheduledFuture)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;_,!null-&gt;!null;_,null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor long triggerTime(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue boolean offer(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue boolean offer(java.lang.Runnable)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;true&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue int drainTo(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue int drainTo(java.util.Collection, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.lang.Object[] toArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.Iterator iterator()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue java.util.concurrent.RunnableScheduledFuture poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask ScheduledFutureTask(java.util.concurrent.ScheduledThreadPoolExecutor, java.lang.Runnable, java.lang.Object, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask ScheduledFutureTask(java.util.concurrent.ScheduledThreadPoolExecutor, java.lang.Runnable, java.lang.Object, long, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask ScheduledFutureTask(java.util.concurrent.ScheduledThreadPoolExecutor, java.util.concurrent.Callable, long) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask boolean access$301(java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask long getDelay(java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask void access$201(java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledFutureTask) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Semaphore boolean tryAcquire(int, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Semaphore boolean tryAcquire(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.Semaphore java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean contains(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean containsAll(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean offer(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean remove(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean removeAll(java.util.Collection)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue boolean retainAll(java.util.Collection)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue int drainTo(java.util.Collection) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue int drainTo(java.util.Collection, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue java.lang.Object poll(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue java.lang.Object[] toArray()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue java.lang.Object[] toArray(java.lang.Object[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue java.lang.Object[] toArray(java.lang.Object[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue long objectFieldOffset(sun.misc.Unsafe, java.lang.String, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue long objectFieldOffset(sun.misc.Unsafe, java.lang.String, java.lang.Class) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue long objectFieldOffset(sun.misc.Unsafe, java.lang.String, java.lang.Class) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue void put(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue.TransferQueue.QNode, java.lang.Object, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue void clean(java.util.concurrent.SynchronousQueue.TransferQueue.QNode, java.util.concurrent.SynchronousQueue.TransferQueue.QNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferQueue void clean(java.util.concurrent.SynchronousQueue.TransferQueue.QNode, java.util.concurrent.SynchronousQueue.TransferQueue.QNode) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack java.util.concurrent.SynchronousQueue.TransferStack.SNode awaitFulfill(java.util.concurrent.SynchronousQueue.TransferStack.SNode, boolean, long) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack java.util.concurrent.SynchronousQueue.TransferStack.SNode snode(java.util.concurrent.SynchronousQueue.TransferStack.SNode, java.lang.Object, java.util.concurrent.SynchronousQueue.TransferStack.SNode, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_-&gt;!null;null,_,_,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.util.concurrent.SynchronousQueue.TransferStack void clean(java.util.concurrent.SynchronousQueue.TransferStack.SNode) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadLocalRandom.1 java.lang.Object initialValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadLocalRandom.1 java.util.concurrent.ThreadLocalRandom initialValue()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.RejectedExecutionHandler) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.RejectedExecutionHandler) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.RejectedExecutionHandler) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 4">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler) 6">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor boolean awaitTermination(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor long getKeepAliveTime(java.util.concurrent.TimeUnit) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void execute(java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void processWorkerExit(java.util.concurrent.ThreadPoolExecutor.Worker, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void runWorker(java.util.concurrent.ThreadPoolExecutor.Worker) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void setKeepAliveTime(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor void setThreadFactory(java.util.concurrent.ThreadFactory) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.AbortPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.AbortPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.ThreadPoolExecutor.Worker Worker(java.util.concurrent.ThreadPoolExecutor, java.lang.Runnable) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.1 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.2 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.3 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.4 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.5 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.6 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.util.concurrent.TimeUnit.7 long convert(long, java.util.concurrent.TimeUnit) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
