<root>
  <item name="java.awt.dnd.DnDEventMulticaster java.util.EventListener addInternal(java.util.EventListener, java.util.EventListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.dnd.DnDEventMulticaster java.util.EventListener removeInternal(java.util.EventListener, java.util.EventListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null,_-&gt;null&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.dnd.DragGestureEvent DragGestureEvent(java.awt.dnd.DragGestureRecognizer, int, java.awt.Point, java.util.List&lt;? extends java.awt.event.InputEvent&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureEvent DragGestureEvent(java.awt.dnd.DragGestureRecognizer, int, java.awt.Point, java.util.List&lt;? extends java.awt.event.InputEvent&gt;) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureEvent DragGestureEvent(java.awt.dnd.DragGestureRecognizer, int, java.awt.Point, java.util.List&lt;? extends java.awt.event.InputEvent&gt;) 3">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureEvent void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureEvent void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureRecognizer DragGestureRecognizer(java.awt.dnd.DragSource) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureRecognizer DragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureRecognizer DragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureRecognizer DragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureRecognizer void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragGestureRecognizer void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSource java.awt.dnd.DragSourceContext createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer, java.awt.dnd.DragGestureEvent, java.awt.Cursor, java.awt.Image, java.awt.Point, java.awt.datatransfer.Transferable, java.awt.dnd.DragSourceListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSource java.awt.dnd.DragSourceContext createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer, java.awt.dnd.DragGestureEvent, java.awt.Cursor, java.awt.Image, java.awt.Point, java.awt.datatransfer.Transferable, java.awt.dnd.DragSourceListener) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSource java.awt.dnd.DragSourceContext createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer, java.awt.dnd.DragGestureEvent, java.awt.Cursor, java.awt.Image, java.awt.Point, java.awt.datatransfer.Transferable, java.awt.dnd.DragSourceListener) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSource java.awt.dnd.DragSourceContext createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer, java.awt.dnd.DragGestureEvent, java.awt.Cursor, java.awt.Image, java.awt.Point, java.awt.datatransfer.Transferable, java.awt.dnd.DragSourceListener)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_,_-&gt;!null;_,!null,_,_,_,_,_-&gt;!null;_,_,!null,_,_,_,_-&gt;!null;_,_,_,!null,_,_,_-&gt;!null;_,_,_,_,!null,_,_-&gt;!null;_,_,_,_,_,!null,_-&gt;!null;_,_,_,_,_,_,!null-&gt;!null;_,_,_,_,_,_,null-&gt;!null;_,_,_,_,_,null,_-&gt;!null;_,_,_,_,null,_,_-&gt;!null;_,_,_,null,_,_,_-&gt;!null;_,_,null,_,_,_,_-&gt;!null;_,null,_,_,_,_,_-&gt;!null;null,_,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSource void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSource void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext DragSourceContext(java.awt.dnd.peer.DragSourceContextPeer, java.awt.dnd.DragGestureEvent, java.awt.Cursor, java.awt.Image, java.awt.Point, java.awt.datatransfer.Transferable, java.awt.dnd.DragSourceListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext DragSourceContext(java.awt.dnd.peer.DragSourceContextPeer, java.awt.dnd.DragGestureEvent, java.awt.Cursor, java.awt.Image, java.awt.Point, java.awt.datatransfer.Transferable, java.awt.dnd.DragSourceListener) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext DragSourceContext(java.awt.dnd.peer.DragSourceContextPeer, java.awt.dnd.DragGestureEvent, java.awt.Cursor, java.awt.Image, java.awt.Point, java.awt.datatransfer.Transferable, java.awt.dnd.DragSourceListener) 5">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext void dragEnter(java.awt.dnd.DragSourceDragEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext void dragOver(java.awt.dnd.DragSourceDragEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext void dropActionChanged(java.awt.dnd.DragSourceDragEvent) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceContext.1 boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;false;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.awt.dnd.DragSourceContext.1 java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceDragEvent DragSourceDragEvent(java.awt.dnd.DragSourceContext, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceDragEvent DragSourceDragEvent(java.awt.dnd.DragSourceContext, int, int, int, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceDropEvent DragSourceDropEvent(java.awt.dnd.DragSourceContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceDropEvent DragSourceDropEvent(java.awt.dnd.DragSourceContext, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceDropEvent DragSourceDropEvent(java.awt.dnd.DragSourceContext, int, boolean, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceEvent DragSourceEvent(java.awt.dnd.DragSourceContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DragSourceEvent DragSourceEvent(java.awt.dnd.DragSourceContext, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTarget java.awt.dnd.DropTarget.DropTargetAutoScroller createDropTargetAutoScroller(java.awt.Component, java.awt.Point)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,!null-&gt;!null;_,null-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTarget java.awt.dnd.DropTargetContext createDropTargetContext()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTarget void readObject(java.io.ObjectInputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTarget void writeObject(java.io.ObjectOutputStream) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetContext java.awt.datatransfer.Transferable createTransferableProxy(java.awt.datatransfer.Transferable, boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null;_,false-&gt;!null;_,true-&gt;!null;null,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetContext java.util.List&lt;java.awt.datatransfer.DataFlavor&gt; getCurrentDataFlavorsAsList()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetDragEvent DropTargetDragEvent(java.awt.dnd.DropTargetContext, java.awt.Point, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetDragEvent DropTargetDragEvent(java.awt.dnd.DropTargetContext, java.awt.Point, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetDropEvent DropTargetDropEvent(java.awt.dnd.DropTargetContext, java.awt.Point, int, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetDropEvent DropTargetDropEvent(java.awt.dnd.DropTargetContext, java.awt.Point, int, int) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetDropEvent DropTargetDropEvent(java.awt.dnd.DropTargetContext, java.awt.Point, int, int, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetDropEvent DropTargetDropEvent(java.awt.dnd.DropTargetContext, java.awt.Point, int, int, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.DropTargetEvent DropTargetEvent(java.awt.dnd.DropTargetContext) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.MouseDragGestureRecognizer MouseDragGestureRecognizer(java.awt.dnd.DragSource) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.MouseDragGestureRecognizer MouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.MouseDragGestureRecognizer MouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.MouseDragGestureRecognizer MouseDragGestureRecognizer(java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.awt.dnd.SerializationTester boolean test(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
</root>
