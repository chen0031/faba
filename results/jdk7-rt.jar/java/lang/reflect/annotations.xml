<root>
  <item name="java.lang.reflect.AccessibleObject void setAccessible(java.lang.reflect.AccessibleObject[], boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.AccessibleObject void setAccessible0(java.lang.reflect.AccessibleObject, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.AccessibleObject void slowCheckMemberAccess(java.lang.Class, java.lang.Class, java.lang.Object, int, java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.AccessibleObject void slowCheckMemberAccess(java.lang.Class, java.lang.Class, java.lang.Object, int, java.lang.Class) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.String toGenericString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.annotation.Annotation getAnnotation(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.reflect.Constructor copy()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.String getTypeName(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field java.lang.String toGenericString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field java.lang.annotation.Annotation getAnnotation(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field java.lang.reflect.Field copy()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.String toGenericString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method java.lang.annotation.Annotation getAnnotation(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method java.lang.reflect.Method copy()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Modifier java.lang.String toString(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy boolean isProxyClass(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Class getProxyClass(java.lang.ClassLoader, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Class getProxyClass0(java.lang.ClassLoader, java.lang.Class[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object access$000(java.lang.reflect.Constructor, java.lang.reflect.InvocationHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object newInstance(java.lang.reflect.Constructor, java.lang.reflect.InvocationHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class[], java.lang.reflect.InvocationHandler) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class[], java.lang.reflect.InvocationHandler) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyAccessHelper boolean needsNewInstanceCheck(java.lang.Class) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess byte[] getConstructorAnnotations(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess byte[] getConstructorParameterAnnotations(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess int getConstructorSlot(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.String getConstructorSignature(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Constructor newConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int, int, java.lang.String, byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_,_,_-&gt;!null;_,!null,_,_,_,_,_,_-&gt;!null;_,_,!null,_,_,_,_,_-&gt;!null;_,_,_,_,_,!null,_,_-&gt;!null;_,_,_,_,_,_,!null,_-&gt;!null;_,_,_,_,_,_,_,!null-&gt;!null;_,_,_,_,_,_,_,null-&gt;!null;_,_,_,_,_,_,null,_-&gt;!null;_,_,_,_,_,null,_,_-&gt;!null;_,_,null,_,_,_,_,_-&gt;!null;_,null,_,_,_,_,_,_-&gt;!null;null,_,_,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Field copyField(java.lang.reflect.Field) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Field copyField(java.lang.reflect.Field)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Field newField(java.lang.Class, java.lang.String, java.lang.Class, int, int, java.lang.String, byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_,_-&gt;!null;_,!null,_,_,_,_,_-&gt;!null;_,_,!null,_,_,_,_-&gt;!null;_,_,_,_,_,!null,_-&gt;!null;_,_,_,_,_,_,!null-&gt;!null;_,_,_,_,_,_,null-&gt;!null;_,_,_,_,_,null,_-&gt;!null;_,_,null,_,_,_,_-&gt;!null;_,null,_,_,_,_,_-&gt;!null;null,_,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Method copyMethod(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Method copyMethod(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null-&gt;!null;null-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Method newMethod(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int, int, java.lang.String, byte[], byte[], byte[])">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_,_,_,_,_,_,_,_,_,_-&gt;!null;_,!null,_,_,_,_,_,_,_,_,_-&gt;!null;_,_,!null,_,_,_,_,_,_,_,_-&gt;!null;_,_,_,!null,_,_,_,_,_,_,_-&gt;!null;_,_,_,_,!null,_,_,_,_,_,_-&gt;!null;_,_,_,_,_,_,_,!null,_,_,_-&gt;!null;_,_,_,_,_,_,_,_,!null,_,_-&gt;!null;_,_,_,_,_,_,_,_,_,!null,_-&gt;!null;_,_,_,_,_,_,_,_,_,_,!null-&gt;!null;_,_,_,_,_,_,_,_,_,_,null-&gt;!null;_,_,_,_,_,_,_,_,_,null,_-&gt;!null;_,_,_,_,_,_,_,_,null,_,_-&gt;!null;_,_,_,_,_,_,_,null,_,_,_-&gt;!null;_,_,_,_,null,_,_,_,_,_,_-&gt;!null;_,_,_,null,_,_,_,_,_,_,_-&gt;!null;_,_,null,_,_,_,_,_,_,_,_-&gt;!null;_,null,_,_,_,_,_,_,_,_,_-&gt;!null;null,_,_,_,_,_,_,_,_,_,_-&gt;!null&quot;"/>
    </annotation>
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess sun.reflect.ConstructorAccessor getConstructorAccessor(java.lang.reflect.Constructor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess sun.reflect.MethodAccessor getMethodAccessor(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess void setConstructorAccessor(java.lang.reflect.Constructor, sun.reflect.ConstructorAccessor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess void setMethodAccessor(java.lang.reflect.Method, sun.reflect.MethodAccessor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectPermission ReflectPermission(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectPermission ReflectPermission(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
