<root>
  <item name="java.lang.reflect.AccessibleObject AccessibleObject()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.AccessibleObject T getAnnotation(java.lang.Class&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.AccessibleObject boolean isAccessible()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.AccessibleObject void setAccessible(java.lang.reflect.AccessibleObject[], boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.AccessibleObject void setAccessible0(java.lang.reflect.AccessibleObject, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.AccessibleObject void slowCheckMemberAccess(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Object, int, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.AccessibleObject void slowCheckMemberAccess(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Object, int, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.AccessibleObject void slowCheckMemberAccess(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Object, int, java.lang.Class&lt;?&gt;) 2">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Array Array()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor T getAnnotation(java.lang.Class&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Constructor boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor boolean isSynthetic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor boolean isVarArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor byte[] getRawAnnotations()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor byte[] getRawParameterAnnotations()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor int getModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor int getSlot()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.Class&lt;T&gt; getDeclaringClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.String getSignature()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.String toGenericString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor java.lang.reflect.Constructor&lt;T&gt; copy()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Constructor sun.reflect.ConstructorAccessor getConstructorAccessor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Constructor sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field T getAnnotation(java.lang.Class&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Field boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;null-&gt;false&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field boolean isEnumConstant()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field boolean isSynthetic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field int getModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.Class&lt;?&gt; getDeclaringClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.Class&lt;?&gt; getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.String getGenericSignature()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field java.lang.String getTypeName(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field java.lang.String toGenericString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field java.lang.reflect.Field copy()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Field sun.reflect.FieldAccessor getFieldAccessor(boolean)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Field sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Field sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.InvocationTargetException java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.InvocationTargetException java.lang.Throwable getTargetException()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method T getAnnotation(java.lang.Class&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Method boolean equals(java.lang.Object)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method boolean isBridge()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method boolean isSynthetic()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method boolean isVarArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method int getModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.Class&lt;?&gt; getDeclaringClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.Class&lt;?&gt; getReturnType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.Object getDefaultValue()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Method java.lang.String getGenericSignature()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method java.lang.String toGenericString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method java.lang.reflect.Method copy()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Method sun.reflect.MethodAccessor getMethodAccessor()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Method sun.reflect.generics.factory.GenericsFactory getFactory()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Modifier Modifier()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isAbstract(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isFinal(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isInterface(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isNative(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isPrivate(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isProtected(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isPublic(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isStatic(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isStrict(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isSynchronized(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isSynthetic(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isTransient(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier boolean isVolatile(int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int classModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int constructorModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int fieldModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int interfaceModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier int methodModifiers()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Modifier java.lang.String toString(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy Proxy()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Class&lt;?&gt; getProxyClass(java.lang.ClassLoader, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Class&lt;?&gt; getProxyClass0(java.lang.ClassLoader, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object access$200()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object access$400(java.lang.reflect.Constructor, java.lang.reflect.InvocationHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object newInstance(java.lang.reflect.Constructor&lt;?&gt;, java.lang.reflect.InvocationHandler) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class&lt;?&gt;[], java.lang.reflect.InvocationHandler) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class&lt;?&gt;[], java.lang.reflect.InvocationHandler) 2">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy void checkProxyAccess(java.lang.Class&lt;?&gt;, java.lang.ClassLoader, java.lang.Class&lt;?&gt;...) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Proxy.Key1 Key1(java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.Key1 boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Proxy.Key1 int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.Key2 Key2(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.Key2 Key2(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.Key2 boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Proxy.Key2 int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.KeyFactory KeyFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.KeyFactory KeyFactory(java.lang.reflect.Proxy.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyFactory KeyFactory(java.lang.reflect.Proxy.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.KeyFactory java.lang.Object apply(java.lang.ClassLoader, java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyFactory java.lang.Object apply(java.lang.ClassLoader, java.lang.Class&lt;?&gt;[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyFactory java.lang.Object apply(java.lang.Object, java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyFactory java.lang.Object apply(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyX KeyX(java.lang.Class&lt;?&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyX boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyX boolean equals(java.lang.ref.WeakReference&lt;java.lang.Class&lt;?&gt;&gt;[], java.lang.ref.WeakReference&lt;java.lang.Class&lt;?&gt;&gt;[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyX boolean equals(java.lang.ref.WeakReference&lt;java.lang.Class&lt;?&gt;&gt;[], java.lang.ref.WeakReference&lt;java.lang.Class&lt;?&gt;&gt;[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.KeyX int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyAccessHelper ProxyAccessHelper()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyAccessHelper boolean needsNewInstanceCheck(java.lang.Class&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;null-&gt;false&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyClassFactory ProxyClassFactory()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyClassFactory ProxyClassFactory(java.lang.reflect.Proxy.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyClassFactory ProxyClassFactory(java.lang.reflect.Proxy.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyClassFactory java.lang.Class&lt;?&gt; apply(java.lang.ClassLoader, java.lang.Class&lt;?&gt;[]) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.Proxy.ProxyClassFactory java.lang.Object apply(java.lang.Object, java.lang.Object) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess ReflectAccess()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess byte[] getConstructorAnnotations(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess byte[] getConstructorAnnotations(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess byte[] getConstructorParameterAnnotations(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess byte[] getConstructorParameterAnnotations(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess int getConstructorSlot(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess int getConstructorSlot(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.String getConstructorSignature(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.String getConstructorSignature(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Constructor&lt;T&gt; copyConstructor(java.lang.reflect.Constructor&lt;T&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Constructor&lt;T&gt; copyConstructor(java.lang.reflect.Constructor&lt;T&gt;)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Constructor&lt;T&gt; newConstructor(java.lang.Class&lt;T&gt;, java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;[], int, int, java.lang.String, byte[], byte[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Field copyField(java.lang.reflect.Field) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Field copyField(java.lang.reflect.Field)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Field newField(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;, int, int, java.lang.String, byte[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Method copyMethod(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Method copyMethod(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess java.lang.reflect.Method newMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[], int, int, java.lang.String, byte[], byte[], byte[])">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess sun.reflect.ConstructorAccessor getConstructorAccessor(java.lang.reflect.Constructor&lt;?&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess sun.reflect.ConstructorAccessor getConstructorAccessor(java.lang.reflect.Constructor&lt;?&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess sun.reflect.MethodAccessor getMethodAccessor(java.lang.reflect.Method) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess sun.reflect.MethodAccessor getMethodAccessor(java.lang.reflect.Method)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.ReflectAccess void setConstructorAccessor(java.lang.reflect.Constructor&lt;?&gt;, sun.reflect.ConstructorAccessor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectAccess void setMethodAccessor(java.lang.reflect.Method, sun.reflect.MethodAccessor) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectPermission ReflectPermission(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectPermission ReflectPermission(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.ReflectPermission ReflectPermission(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.UndeclaredThrowableException java.lang.Throwable getCause()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.UndeclaredThrowableException java.lang.Throwable getUndeclaredThrowable()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache V get(K, P) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.WeakCache WeakCache(java.lang.reflect.WeakCache.BiFunction&lt;K,P,?&gt;, java.lang.reflect.WeakCache.BiFunction&lt;K,P,V&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.WeakCache WeakCache(java.lang.reflect.WeakCache.BiFunction&lt;K,P,?&gt;, java.lang.reflect.WeakCache.BiFunction&lt;K,P,V&gt;) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.WeakCache boolean containsValue(V) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.WeakCache java.lang.reflect.WeakCache.BiFunction access$000(java.lang.reflect.WeakCache) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.WeakCache java.lang.reflect.WeakCache.BiFunction access$000(java.lang.reflect.WeakCache)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache java.util.concurrent.ConcurrentMap access$100(java.lang.reflect.WeakCache) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.WeakCache java.util.concurrent.ConcurrentMap access$100(java.lang.reflect.WeakCache)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheKey CacheKey(K, java.lang.ref.ReferenceQueue&lt;K&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheKey boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheKey int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheKey java.lang.Object valueOf(K, java.lang.ref.ReferenceQueue&lt;K&gt;) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheKey java.lang.Object valueOf(K, java.lang.ref.ReferenceQueue&lt;K&gt;) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheKey java.lang.Object valueOf(K, java.lang.ref.ReferenceQueue&lt;K&gt;)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheKey void expungeFrom(java.util.concurrent.ConcurrentMap&lt;?,? extends java.util.concurrent.ConcurrentMap&lt;?,?&gt;&gt;, java.util.concurrent.ConcurrentMap&lt;?,java.lang.Boolean&gt;) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheValue boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.WeakCache.CacheValue int hashCode()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache.Factory V get()">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="java.lang.reflect.WeakCache.LookupValue V get()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="java.lang.reflect.WeakCache.LookupValue boolean equals(java.lang.Object) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
</root>
