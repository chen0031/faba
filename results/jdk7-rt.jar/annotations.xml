<root>
  <item name="WrapperGenerator WrapperGenerator(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator WrapperGenerator(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator boolean readSizeInfo(java.io.InputStream, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator boolean readSizeInfo(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator int getOrdinalSize(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator int getOrdinalSize(java.lang.String, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator int padSize(int, int)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="virtual WrapperGenerator java.lang.String getJavaTypeForSize(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator java.lang.String getJavaTypeForSize(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator java.lang.String getOffsets(WrapperGenerator.StructType, WrapperGenerator.AtomicType, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator java.lang.String getOffsets(WrapperGenerator.StructType, WrapperGenerator.AtomicType, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator java.lang.String getOffsets(WrapperGenerator.StructType, WrapperGenerator.AtomicType, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator java.lang.String getOffsets(WrapperGenerator.StructType, WrapperGenerator.AtomicType, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator java.lang.String getStructSize(WrapperGenerator.StructType, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator java.lang.String getStructSize(WrapperGenerator.StructType, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator java.lang.String makeComment(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator java.lang.String makeComment(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator java.lang.String makeComment(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator java.lang.String makeComment(java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator java.util.logging.Logger access$100()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator void main(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator void makeSizer(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator void startGeneration(java.lang.String, java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator void startGeneration(java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator void writeAccessorImpls(WrapperGenerator.StructType, java.io.PrintWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator void writeAccessorImpls(WrapperGenerator.StructType, java.io.PrintWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator void writeFunctionCallWrapper(java.lang.String, WrapperGenerator.FunctionType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator void writeFunctionCallWrapper(java.lang.String, WrapperGenerator.FunctionType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="virtual WrapperGenerator void writeJavaWrapperClass(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator void writeJavaWrapperClass(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator void writeNativeSizer(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="virtual WrapperGenerator void writeNativeSizer(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator void writeStubs(WrapperGenerator.StructType, java.io.PrintWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator void writeStubs(WrapperGenerator.StructType, java.io.PrintWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator void writeToString(WrapperGenerator.StructType, java.io.PrintWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator void writeToString(WrapperGenerator.StructType, java.io.PrintWriter) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator void writeToString(WrapperGenerator.StructType, java.io.PrintWriter) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator void writeToString(WrapperGenerator.StructType, java.io.PrintWriter) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator void writeWrapper(java.lang.String, WrapperGenerator.StructType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator void writeWrapper(java.lang.String, WrapperGenerator.StructType) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="virtual WrapperGenerator void writeWrapper(java.lang.String, WrapperGenerator.StructType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator void writeWrapper(java.lang.String, WrapperGenerator.StructType) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator void writeWrapperSubclass(WrapperGenerator.StructType, java.io.PrintWriter, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator void writeWrapperSubclass(WrapperGenerator.StructType, java.io.PrintWriter, boolean) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator void writeWrapperSubclass(WrapperGenerator.StructType, java.io.PrintWriter, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator void writeWrapperSubclass(WrapperGenerator.StructType, java.io.PrintWriter, boolean) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType AtomicType(int, java.lang.String, java.lang.String) 1">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType WrapperGenerator.BaseType getReferencedType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType boolean isAlias()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType boolean isAutoFree()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType boolean isIn()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType boolean isInOut()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType boolean isOut()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType int getArrayLength()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType int getNativeSizeForAccess(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType int getOffset()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType int getType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType int getTypeForString(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getAliasName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="virtual WrapperGenerator.AtomicType java.lang.String getJavaAccess(boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getJavaAccess(boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getJavaAccessForType(int, boolean)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getJavaConversion(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.AtomicType java.lang.String getJavaConversion(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getJavaConversionForType(int, java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getJavaResultConversion(java.lang.String, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="&quot;!null,_-&gt;!null&quot;"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getJavaResultConversionForType(int, java.lang.String)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="value=&quot;_,!null-&gt;!null;_,null-&gt;null&quot;,pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getJavaTypeForType(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.AtomicType java.lang.String getNativeAccess()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getNativeAccess()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getNativeAccessForType(int)">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType java.lang.String getTypeUpperCase()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.AtomicType java.lang.String getTypeUpperCase()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.AtomicType void setAttributes(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.AtomicType void setAttributes(java.lang.String[]) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.BaseType BaseType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.BaseType BaseType(WrapperGenerator.1) 0">
    <annotation name="org.jetbrains.annotations.Nullable"/>
  </item>
  <item name="WrapperGenerator.BaseType BaseType(WrapperGenerator.1)">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.BaseType java.lang.String getName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.BaseType java.lang.String getRealType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.BaseType java.lang.String toString()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.FunctionType FunctionType(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.FunctionType boolean isVoid()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.FunctionType int getNumArgs()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.FunctionType java.lang.String getDescription()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.FunctionType java.lang.String getReturnType()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.FunctionType java.util.Collection getArguments()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.FunctionType void setName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.FunctionType void setName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.StructType StructType(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.StructType boolean getIsInterface()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.StructType int getNumFields()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.StructType java.lang.String getBaseClass()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.StructType java.lang.String getDescription()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.StructType java.lang.String getInterfaces()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.StructType java.lang.String getJavaClassName()">
    <annotation name="org.jetbrains.annotations.Contract">
      <val val="pure=true"/>
    </annotation>
  </item>
  <item name="WrapperGenerator.StructType java.lang.String getOffset(WrapperGenerator.AtomicType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.StructType java.lang.String getOffset(WrapperGenerator.AtomicType) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.StructType java.util.Enumeration getMembers()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.StructType java.util.Enumeration getMembers()">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.StructType void parseDescription(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.StructType void parseDescription(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="WrapperGenerator.StructType void setName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
  <item name="virtual WrapperGenerator.StructType void setName(java.lang.String) 0">
    <annotation name="org.jetbrains.annotations.NotNull"/>
  </item>
</root>
